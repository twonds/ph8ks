# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString=None, min_available: IoK8sApimachineryPkgUtilIntstrIntOrString=None, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None):  # noqa: E501
        """IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec - a model defined in Swagger

        :param max_unavailable: The max_unavailable of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.  # noqa: E501
        :type max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString
        :param min_available: The min_available of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.  # noqa: E501
        :type min_available: IoK8sApimachineryPkgUtilIntstrIntOrString
        :param selector: The selector of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.  # noqa: E501
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        self.swagger_types = {
            'max_unavailable': IoK8sApimachineryPkgUtilIntstrIntOrString,
            'min_available': IoK8sApimachineryPkgUtilIntstrIntOrString,
            'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector
        }

        self.attribute_map = {
            'max_unavailable': 'maxUnavailable',
            'min_available': 'minAvailable',
            'selector': 'selector'
        }

        self._max_unavailable = max_unavailable
        self._min_available = min_available
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.  # noqa: E501
        :rtype: IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_unavailable(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the max_unavailable of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".  # noqa: E501

        :return: The max_unavailable of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._max_unavailable

    @max_unavailable.setter
    def max_unavailable(self, max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the max_unavailable of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".  # noqa: E501

        :param max_unavailable: The max_unavailable of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :type max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._max_unavailable = max_unavailable

    @property
    def min_available(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the min_available of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".  # noqa: E501

        :return: The min_available of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._min_available

    @min_available.setter
    def min_available(self, min_available: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the min_available of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".  # noqa: E501

        :param min_available: The min_available of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :type min_available: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._min_available = min_available

    @property
    def selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the selector of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        Label query over pods whose evictions are managed by the disruption budget.  # noqa: E501

        :return: The selector of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the selector of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.

        Label query over pods whose evictions are managed by the disruption budget.  # noqa: E501

        :param selector: The selector of this IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec.
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._selector = selector
