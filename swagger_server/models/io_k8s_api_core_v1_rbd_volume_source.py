# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1RBDVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, image: str=None, keyring: str=None, monitors: List[str]=None, pool: str=None, read_only: bool=None, secret_ref: IoK8sApiCoreV1LocalObjectReference=None, user: str=None):  # noqa: E501
        """IoK8sApiCoreV1RBDVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type fs_type: str
        :param image: The image of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type image: str
        :param keyring: The keyring of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type keyring: str
        :param monitors: The monitors of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type monitors: List[str]
        :param pool: The pool of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type pool: str
        :param read_only: The read_only of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type read_only: bool
        :param secret_ref: The secret_ref of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        :param user: The user of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :type user: str
        """
        self.swagger_types = {
            'fs_type': str,
            'image': str,
            'keyring': str,
            'monitors': List[str],
            'pool': str,
            'read_only': bool,
            'secret_ref': IoK8sApiCoreV1LocalObjectReference,
            'user': str
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'image': 'image',
            'keyring': 'keyring',
            'monitors': 'monitors',
            'pool': 'pool',
            'read_only': 'readOnly',
            'secret_ref': 'secretRef',
            'user': 'user'
        }

        self._fs_type = fs_type
        self._image = image
        self._keyring = keyring
        self._monitors = monitors
        self._pool = pool
        self._read_only = read_only
        self._secret_ref = secret_ref
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1RBDVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.RBDVolumeSource of this IoK8sApiCoreV1RBDVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1RBDVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1RBDVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1RBDVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1RBDVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def image(self) -> str:
        """Gets the image of this IoK8sApiCoreV1RBDVolumeSource.

        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The image of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this IoK8sApiCoreV1RBDVolumeSource.

        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param image: The image of this IoK8sApiCoreV1RBDVolumeSource.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def keyring(self) -> str:
        """Gets the keyring of this IoK8sApiCoreV1RBDVolumeSource.

        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The keyring of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: str
        """
        return self._keyring

    @keyring.setter
    def keyring(self, keyring: str):
        """Sets the keyring of this IoK8sApiCoreV1RBDVolumeSource.

        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param keyring: The keyring of this IoK8sApiCoreV1RBDVolumeSource.
        :type keyring: str
        """

        self._keyring = keyring

    @property
    def monitors(self) -> List[str]:
        """Gets the monitors of this IoK8sApiCoreV1RBDVolumeSource.

        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The monitors of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: List[str]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors: List[str]):
        """Sets the monitors of this IoK8sApiCoreV1RBDVolumeSource.

        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param monitors: The monitors of this IoK8sApiCoreV1RBDVolumeSource.
        :type monitors: List[str]
        """
        if monitors is None:
            raise ValueError("Invalid value for `monitors`, must not be `None`")  # noqa: E501

        self._monitors = monitors

    @property
    def pool(self) -> str:
        """Gets the pool of this IoK8sApiCoreV1RBDVolumeSource.

        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The pool of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool: str):
        """Sets the pool of this IoK8sApiCoreV1RBDVolumeSource.

        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param pool: The pool of this IoK8sApiCoreV1RBDVolumeSource.
        :type pool: str
        """

        self._pool = pool

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1RBDVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1RBDVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1RBDVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_ref(self) -> IoK8sApiCoreV1LocalObjectReference:
        """Gets the secret_ref of this IoK8sApiCoreV1RBDVolumeSource.

        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The secret_ref of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: IoK8sApiCoreV1LocalObjectReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref: IoK8sApiCoreV1LocalObjectReference):
        """Sets the secret_ref of this IoK8sApiCoreV1RBDVolumeSource.

        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param secret_ref: The secret_ref of this IoK8sApiCoreV1RBDVolumeSource.
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        """

        self._secret_ref = secret_ref

    @property
    def user(self) -> str:
        """Gets the user of this IoK8sApiCoreV1RBDVolumeSource.

        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :return: The user of this IoK8sApiCoreV1RBDVolumeSource.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this IoK8sApiCoreV1RBDVolumeSource.

        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it  # noqa: E501

        :param user: The user of this IoK8sApiCoreV1RBDVolumeSource.
        :type user: str
        """

        self._user = user
