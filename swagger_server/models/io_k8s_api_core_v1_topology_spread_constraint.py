# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1TopologySpreadConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, max_skew: int=None, topology_key: str=None, when_unsatisfiable: str=None):  # noqa: E501
        """IoK8sApiCoreV1TopologySpreadConstraint - a model defined in Swagger

        :param label_selector: The label_selector of this IoK8sApiCoreV1TopologySpreadConstraint.  # noqa: E501
        :type label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param max_skew: The max_skew of this IoK8sApiCoreV1TopologySpreadConstraint.  # noqa: E501
        :type max_skew: int
        :param topology_key: The topology_key of this IoK8sApiCoreV1TopologySpreadConstraint.  # noqa: E501
        :type topology_key: str
        :param when_unsatisfiable: The when_unsatisfiable of this IoK8sApiCoreV1TopologySpreadConstraint.  # noqa: E501
        :type when_unsatisfiable: str
        """
        self.swagger_types = {
            'label_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'max_skew': int,
            'topology_key': str,
            'when_unsatisfiable': str
        }

        self.attribute_map = {
            'label_selector': 'labelSelector',
            'max_skew': 'maxSkew',
            'topology_key': 'topologyKey',
            'when_unsatisfiable': 'whenUnsatisfiable'
        }

        self._label_selector = label_selector
        self._max_skew = max_skew
        self._topology_key = topology_key
        self._when_unsatisfiable = when_unsatisfiable

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1TopologySpreadConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.TopologySpreadConstraint of this IoK8sApiCoreV1TopologySpreadConstraint.  # noqa: E501
        :rtype: IoK8sApiCoreV1TopologySpreadConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the label_selector of this IoK8sApiCoreV1TopologySpreadConstraint.

        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.  # noqa: E501

        :return: The label_selector of this IoK8sApiCoreV1TopologySpreadConstraint.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the label_selector of this IoK8sApiCoreV1TopologySpreadConstraint.

        LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.  # noqa: E501

        :param label_selector: The label_selector of this IoK8sApiCoreV1TopologySpreadConstraint.
        :type label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._label_selector = label_selector

    @property
    def max_skew(self) -> int:
        """Gets the max_skew of this IoK8sApiCoreV1TopologySpreadConstraint.

        MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.  # noqa: E501

        :return: The max_skew of this IoK8sApiCoreV1TopologySpreadConstraint.
        :rtype: int
        """
        return self._max_skew

    @max_skew.setter
    def max_skew(self, max_skew: int):
        """Sets the max_skew of this IoK8sApiCoreV1TopologySpreadConstraint.

        MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.  # noqa: E501

        :param max_skew: The max_skew of this IoK8sApiCoreV1TopologySpreadConstraint.
        :type max_skew: int
        """
        if max_skew is None:
            raise ValueError("Invalid value for `max_skew`, must not be `None`")  # noqa: E501

        self._max_skew = max_skew

    @property
    def topology_key(self) -> str:
        """Gets the topology_key of this IoK8sApiCoreV1TopologySpreadConstraint.

        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.  # noqa: E501

        :return: The topology_key of this IoK8sApiCoreV1TopologySpreadConstraint.
        :rtype: str
        """
        return self._topology_key

    @topology_key.setter
    def topology_key(self, topology_key: str):
        """Sets the topology_key of this IoK8sApiCoreV1TopologySpreadConstraint.

        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.  # noqa: E501

        :param topology_key: The topology_key of this IoK8sApiCoreV1TopologySpreadConstraint.
        :type topology_key: str
        """
        if topology_key is None:
            raise ValueError("Invalid value for `topology_key`, must not be `None`")  # noqa: E501

        self._topology_key = topology_key

    @property
    def when_unsatisfiable(self) -> str:
        """Gets the when_unsatisfiable of this IoK8sApiCoreV1TopologySpreadConstraint.

        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.  # noqa: E501

        :return: The when_unsatisfiable of this IoK8sApiCoreV1TopologySpreadConstraint.
        :rtype: str
        """
        return self._when_unsatisfiable

    @when_unsatisfiable.setter
    def when_unsatisfiable(self, when_unsatisfiable: str):
        """Sets the when_unsatisfiable of this IoK8sApiCoreV1TopologySpreadConstraint.

        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.  # noqa: E501

        :param when_unsatisfiable: The when_unsatisfiable of this IoK8sApiCoreV1TopologySpreadConstraint.
        :type when_unsatisfiable: str
        """
        if when_unsatisfiable is None:
            raise ValueError("Invalid value for `when_unsatisfiable`, must not be `None`")  # noqa: E501

        self._when_unsatisfiable = when_unsatisfiable
