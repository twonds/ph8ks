# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, max_replicas: int=None, min_replicas: int=None, scale_target_ref: IoK8sApiAutoscalingV1CrossVersionObjectReference=None, target_cpu_utilization_percentage: int=None):  # noqa: E501
        """IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec - a model defined in Swagger

        :param max_replicas: The max_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.  # noqa: E501
        :type max_replicas: int
        :param min_replicas: The min_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.  # noqa: E501
        :type min_replicas: int
        :param scale_target_ref: The scale_target_ref of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.  # noqa: E501
        :type scale_target_ref: IoK8sApiAutoscalingV1CrossVersionObjectReference
        :param target_cpu_utilization_percentage: The target_cpu_utilization_percentage of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.  # noqa: E501
        :type target_cpu_utilization_percentage: int
        """
        self.swagger_types = {
            'max_replicas': int,
            'min_replicas': int,
            'scale_target_ref': IoK8sApiAutoscalingV1CrossVersionObjectReference,
            'target_cpu_utilization_percentage': int
        }

        self.attribute_map = {
            'max_replicas': 'maxReplicas',
            'min_replicas': 'minReplicas',
            'scale_target_ref': 'scaleTargetRef',
            'target_cpu_utilization_percentage': 'targetCPUUtilizationPercentage'
        }

        self._max_replicas = max_replicas
        self._min_replicas = min_replicas
        self._scale_target_ref = scale_target_ref
        self._target_cpu_utilization_percentage = target_cpu_utilization_percentage

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.  # noqa: E501
        :rtype: IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_replicas(self) -> int:
        """Gets the max_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.  # noqa: E501

        :return: The max_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas: int):
        """Sets the max_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.  # noqa: E501

        :param max_replicas: The max_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :type max_replicas: int
        """
        if max_replicas is None:
            raise ValueError("Invalid value for `max_replicas`, must not be `None`")  # noqa: E501

        self._max_replicas = max_replicas

    @property
    def min_replicas(self) -> int:
        """Gets the min_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.  # noqa: E501

        :return: The min_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas: int):
        """Sets the min_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.  # noqa: E501

        :param min_replicas: The min_replicas of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :type min_replicas: int
        """

        self._min_replicas = min_replicas

    @property
    def scale_target_ref(self) -> IoK8sApiAutoscalingV1CrossVersionObjectReference:
        """Gets the scale_target_ref of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.  # noqa: E501

        :return: The scale_target_ref of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :rtype: IoK8sApiAutoscalingV1CrossVersionObjectReference
        """
        return self._scale_target_ref

    @scale_target_ref.setter
    def scale_target_ref(self, scale_target_ref: IoK8sApiAutoscalingV1CrossVersionObjectReference):
        """Sets the scale_target_ref of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.  # noqa: E501

        :param scale_target_ref: The scale_target_ref of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :type scale_target_ref: IoK8sApiAutoscalingV1CrossVersionObjectReference
        """
        if scale_target_ref is None:
            raise ValueError("Invalid value for `scale_target_ref`, must not be `None`")  # noqa: E501

        self._scale_target_ref = scale_target_ref

    @property
    def target_cpu_utilization_percentage(self) -> int:
        """Gets the target_cpu_utilization_percentage of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.  # noqa: E501

        :return: The target_cpu_utilization_percentage of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :rtype: int
        """
        return self._target_cpu_utilization_percentage

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, target_cpu_utilization_percentage: int):
        """Sets the target_cpu_utilization_percentage of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.

        target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.  # noqa: E501

        :param target_cpu_utilization_percentage: The target_cpu_utilization_percentage of this IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec.
        :type target_cpu_utilization_percentage: int
        """

        self._target_cpu_utilization_percentage = target_cpu_utilization_percentage
