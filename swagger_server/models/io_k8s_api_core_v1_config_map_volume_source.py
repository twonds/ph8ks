# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ConfigMapVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, default_mode: int=None, items: List[IoK8sApiCoreV1KeyToPath]=None, name: str=None, optional: bool=None):  # noqa: E501
        """IoK8sApiCoreV1ConfigMapVolumeSource - a model defined in Swagger

        :param default_mode: The default_mode of this IoK8sApiCoreV1ConfigMapVolumeSource.  # noqa: E501
        :type default_mode: int
        :param items: The items of this IoK8sApiCoreV1ConfigMapVolumeSource.  # noqa: E501
        :type items: List[IoK8sApiCoreV1KeyToPath]
        :param name: The name of this IoK8sApiCoreV1ConfigMapVolumeSource.  # noqa: E501
        :type name: str
        :param optional: The optional of this IoK8sApiCoreV1ConfigMapVolumeSource.  # noqa: E501
        :type optional: bool
        """
        self.swagger_types = {
            'default_mode': int,
            'items': List[IoK8sApiCoreV1KeyToPath],
            'name': str,
            'optional': bool
        }

        self.attribute_map = {
            'default_mode': 'defaultMode',
            'items': 'items',
            'name': 'name',
            'optional': 'optional'
        }

        self._default_mode = default_mode
        self._items = items
        self._name = name
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ConfigMapVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ConfigMapVolumeSource of this IoK8sApiCoreV1ConfigMapVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1ConfigMapVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_mode(self) -> int:
        """Gets the default_mode of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.  # noqa: E501

        :return: The default_mode of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :rtype: int
        """
        return self._default_mode

    @default_mode.setter
    def default_mode(self, default_mode: int):
        """Sets the default_mode of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.  # noqa: E501

        :param default_mode: The default_mode of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :type default_mode: int
        """

        self._default_mode = default_mode

    @property
    def items(self) -> List[IoK8sApiCoreV1KeyToPath]:
        """Gets the items of this IoK8sApiCoreV1ConfigMapVolumeSource.

        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :return: The items of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :rtype: List[IoK8sApiCoreV1KeyToPath]
        """
        return self._items

    @items.setter
    def items(self, items: List[IoK8sApiCoreV1KeyToPath]):
        """Sets the items of this IoK8sApiCoreV1ConfigMapVolumeSource.

        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :param items: The items of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :type items: List[IoK8sApiCoreV1KeyToPath]
        """

        self._items = items

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :return: The name of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :type name: str
        """

        self._name = name

    @property
    def optional(self) -> bool:
        """Gets the optional of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Specify whether the ConfigMap or its keys must be defined  # noqa: E501

        :return: The optional of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional: bool):
        """Sets the optional of this IoK8sApiCoreV1ConfigMapVolumeSource.

        Specify whether the ConfigMap or its keys must be defined  # noqa: E501

        :param optional: The optional of this IoK8sApiCoreV1ConfigMapVolumeSource.
        :type optional: bool
        """

        self._optional = optional
