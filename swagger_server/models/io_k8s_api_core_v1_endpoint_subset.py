# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1EndpointSubset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[IoK8sApiCoreV1EndpointAddress]=None, not_ready_addresses: List[IoK8sApiCoreV1EndpointAddress]=None, ports: List[IoK8sApiCoreV1EndpointPort]=None):  # noqa: E501
        """IoK8sApiCoreV1EndpointSubset - a model defined in Swagger

        :param addresses: The addresses of this IoK8sApiCoreV1EndpointSubset.  # noqa: E501
        :type addresses: List[IoK8sApiCoreV1EndpointAddress]
        :param not_ready_addresses: The not_ready_addresses of this IoK8sApiCoreV1EndpointSubset.  # noqa: E501
        :type not_ready_addresses: List[IoK8sApiCoreV1EndpointAddress]
        :param ports: The ports of this IoK8sApiCoreV1EndpointSubset.  # noqa: E501
        :type ports: List[IoK8sApiCoreV1EndpointPort]
        """
        self.swagger_types = {
            'addresses': List[IoK8sApiCoreV1EndpointAddress],
            'not_ready_addresses': List[IoK8sApiCoreV1EndpointAddress],
            'ports': List[IoK8sApiCoreV1EndpointPort]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'not_ready_addresses': 'notReadyAddresses',
            'ports': 'ports'
        }

        self._addresses = addresses
        self._not_ready_addresses = not_ready_addresses
        self._ports = ports

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1EndpointSubset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.EndpointSubset of this IoK8sApiCoreV1EndpointSubset.  # noqa: E501
        :rtype: IoK8sApiCoreV1EndpointSubset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self) -> List[IoK8sApiCoreV1EndpointAddress]:
        """Gets the addresses of this IoK8sApiCoreV1EndpointSubset.

        IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.  # noqa: E501

        :return: The addresses of this IoK8sApiCoreV1EndpointSubset.
        :rtype: List[IoK8sApiCoreV1EndpointAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses: List[IoK8sApiCoreV1EndpointAddress]):
        """Sets the addresses of this IoK8sApiCoreV1EndpointSubset.

        IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.  # noqa: E501

        :param addresses: The addresses of this IoK8sApiCoreV1EndpointSubset.
        :type addresses: List[IoK8sApiCoreV1EndpointAddress]
        """

        self._addresses = addresses

    @property
    def not_ready_addresses(self) -> List[IoK8sApiCoreV1EndpointAddress]:
        """Gets the not_ready_addresses of this IoK8sApiCoreV1EndpointSubset.

        IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.  # noqa: E501

        :return: The not_ready_addresses of this IoK8sApiCoreV1EndpointSubset.
        :rtype: List[IoK8sApiCoreV1EndpointAddress]
        """
        return self._not_ready_addresses

    @not_ready_addresses.setter
    def not_ready_addresses(self, not_ready_addresses: List[IoK8sApiCoreV1EndpointAddress]):
        """Sets the not_ready_addresses of this IoK8sApiCoreV1EndpointSubset.

        IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.  # noqa: E501

        :param not_ready_addresses: The not_ready_addresses of this IoK8sApiCoreV1EndpointSubset.
        :type not_ready_addresses: List[IoK8sApiCoreV1EndpointAddress]
        """

        self._not_ready_addresses = not_ready_addresses

    @property
    def ports(self) -> List[IoK8sApiCoreV1EndpointPort]:
        """Gets the ports of this IoK8sApiCoreV1EndpointSubset.

        Port numbers available on the related IP addresses.  # noqa: E501

        :return: The ports of this IoK8sApiCoreV1EndpointSubset.
        :rtype: List[IoK8sApiCoreV1EndpointPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[IoK8sApiCoreV1EndpointPort]):
        """Sets the ports of this IoK8sApiCoreV1EndpointSubset.

        Port numbers available on the related IP addresses.  # noqa: E501

        :param ports: The ports of this IoK8sApiCoreV1EndpointSubset.
        :type ports: List[IoK8sApiCoreV1EndpointPort]
        """

        self._ports = ports
