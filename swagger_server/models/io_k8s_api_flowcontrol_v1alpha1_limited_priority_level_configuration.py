# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, assured_concurrency_shares: int=None, limit_response: IoK8sApiFlowcontrolV1alpha1LimitResponse=None):  # noqa: E501
        """IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration - a model defined in Swagger

        :param assured_concurrency_shares: The assured_concurrency_shares of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.  # noqa: E501
        :type assured_concurrency_shares: int
        :param limit_response: The limit_response of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.  # noqa: E501
        :type limit_response: IoK8sApiFlowcontrolV1alpha1LimitResponse
        """
        self.swagger_types = {
            'assured_concurrency_shares': int,
            'limit_response': IoK8sApiFlowcontrolV1alpha1LimitResponse
        }

        self.attribute_map = {
            'assured_concurrency_shares': 'assuredConcurrencyShares',
            'limit_response': 'limitResponse'
        }

        self._assured_concurrency_shares = assured_concurrency_shares
        self._limit_response = limit_response

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.  # noqa: E501
        :rtype: IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assured_concurrency_shares(self) -> int:
        """Gets the assured_concurrency_shares of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.

        `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.  # noqa: E501

        :return: The assured_concurrency_shares of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.
        :rtype: int
        """
        return self._assured_concurrency_shares

    @assured_concurrency_shares.setter
    def assured_concurrency_shares(self, assured_concurrency_shares: int):
        """Sets the assured_concurrency_shares of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.

        `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.  # noqa: E501

        :param assured_concurrency_shares: The assured_concurrency_shares of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.
        :type assured_concurrency_shares: int
        """

        self._assured_concurrency_shares = assured_concurrency_shares

    @property
    def limit_response(self) -> IoK8sApiFlowcontrolV1alpha1LimitResponse:
        """Gets the limit_response of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.

        `limitResponse` indicates what to do with requests that can not be executed right now  # noqa: E501

        :return: The limit_response of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.
        :rtype: IoK8sApiFlowcontrolV1alpha1LimitResponse
        """
        return self._limit_response

    @limit_response.setter
    def limit_response(self, limit_response: IoK8sApiFlowcontrolV1alpha1LimitResponse):
        """Sets the limit_response of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.

        `limitResponse` indicates what to do with requests that can not be executed right now  # noqa: E501

        :param limit_response: The limit_response of this IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.
        :type limit_response: IoK8sApiFlowcontrolV1alpha1LimitResponse
        """

        self._limit_response = limit_response
