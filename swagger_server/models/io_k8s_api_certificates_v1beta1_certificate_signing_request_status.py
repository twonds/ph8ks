# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, certificate: ByteArray=None, conditions: List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]=None):  # noqa: E501
        """IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus - a model defined in Swagger

        :param certificate: The certificate of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.  # noqa: E501
        :type certificate: ByteArray
        :param conditions: The conditions of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.  # noqa: E501
        :type conditions: List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]
        """
        self.swagger_types = {
            'certificate': ByteArray,
            'conditions': List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'conditions': 'conditions'
        }

        self._certificate = certificate
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.  # noqa: E501
        :rtype: IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self) -> ByteArray:
        """Gets the certificate of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.

        If request was approved, the controller will place the issued certificate here.  # noqa: E501

        :return: The certificate of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.
        :rtype: ByteArray
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate: ByteArray):
        """Sets the certificate of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.

        If request was approved, the controller will place the issued certificate here.  # noqa: E501

        :param certificate: The certificate of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.
        :type certificate: ByteArray
        """
        if certificate is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate):  # noqa: E501
            raise ValueError("Invalid value for `certificate`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._certificate = certificate

    @property
    def conditions(self) -> List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]:
        """Gets the conditions of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.

        Conditions applied to the request, such as approval or denial.  # noqa: E501

        :return: The conditions of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.
        :rtype: List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]):
        """Sets the conditions of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.

        Conditions applied to the request, such as approval or denial.  # noqa: E501

        :param conditions: The conditions of this IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.
        :type conditions: List[IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition]
        """

        self._conditions = conditions
