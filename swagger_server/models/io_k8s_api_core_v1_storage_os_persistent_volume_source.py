# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1StorageOSPersistentVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, read_only: bool=None, secret_ref: IoK8sApiCoreV1ObjectReference=None, volume_name: str=None, volume_namespace: str=None):  # noqa: E501
        """IoK8sApiCoreV1StorageOSPersistentVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :type fs_type: str
        :param read_only: The read_only of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :type read_only: bool
        :param secret_ref: The secret_ref of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :type secret_ref: IoK8sApiCoreV1ObjectReference
        :param volume_name: The volume_name of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :type volume_name: str
        :param volume_namespace: The volume_namespace of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :type volume_namespace: str
        """
        self.swagger_types = {
            'fs_type': str,
            'read_only': bool,
            'secret_ref': IoK8sApiCoreV1ObjectReference,
            'volume_name': str,
            'volume_namespace': str
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'read_only': 'readOnly',
            'secret_ref': 'secretRef',
            'volume_name': 'volumeName',
            'volume_namespace': 'volumeNamespace'
        }

        self._fs_type = fs_type
        self._read_only = read_only
        self._secret_ref = secret_ref
        self._volume_name = volume_name
        self._volume_namespace = volume_namespace

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1StorageOSPersistentVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.StorageOSPersistentVolumeSource of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1StorageOSPersistentVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_ref(self) -> IoK8sApiCoreV1ObjectReference:
        """Gets the secret_ref of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.  # noqa: E501

        :return: The secret_ref of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :rtype: IoK8sApiCoreV1ObjectReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref: IoK8sApiCoreV1ObjectReference):
        """Sets the secret_ref of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.  # noqa: E501

        :param secret_ref: The secret_ref of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :type secret_ref: IoK8sApiCoreV1ObjectReference
        """

        self._secret_ref = secret_ref

    @property
    def volume_name(self) -> str:
        """Gets the volume_name of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.  # noqa: E501

        :return: The volume_name of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name: str):
        """Sets the volume_name of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.  # noqa: E501

        :param volume_name: The volume_name of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :type volume_name: str
        """

        self._volume_name = volume_name

    @property
    def volume_namespace(self) -> str:
        """Gets the volume_namespace of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.  # noqa: E501

        :return: The volume_namespace of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :rtype: str
        """
        return self._volume_namespace

    @volume_namespace.setter
    def volume_namespace(self, volume_namespace: str):
        """Sets the volume_namespace of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.

        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.  # noqa: E501

        :param volume_namespace: The volume_namespace of this IoK8sApiCoreV1StorageOSPersistentVolumeSource.
        :type volume_namespace: str
        """

        self._volume_namespace = volume_namespace
