# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAppsV1DeploymentSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, min_ready_seconds: int=None, paused: bool=None, progress_deadline_seconds: int=None, replicas: int=None, revision_history_limit: int=None, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, strategy: IoK8sApiAppsV1DeploymentStrategy=None, template: IoK8sApiCoreV1PodTemplateSpec=None):  # noqa: E501
        """IoK8sApiAppsV1DeploymentSpec - a model defined in Swagger

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type min_ready_seconds: int
        :param paused: The paused of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type paused: bool
        :param progress_deadline_seconds: The progress_deadline_seconds of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type progress_deadline_seconds: int
        :param replicas: The replicas of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type replicas: int
        :param revision_history_limit: The revision_history_limit of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type revision_history_limit: int
        :param selector: The selector of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param strategy: The strategy of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type strategy: IoK8sApiAppsV1DeploymentStrategy
        :param template: The template of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :type template: IoK8sApiCoreV1PodTemplateSpec
        """
        self.swagger_types = {
            'min_ready_seconds': int,
            'paused': bool,
            'progress_deadline_seconds': int,
            'replicas': int,
            'revision_history_limit': int,
            'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'strategy': IoK8sApiAppsV1DeploymentStrategy,
            'template': IoK8sApiCoreV1PodTemplateSpec
        }

        self.attribute_map = {
            'min_ready_seconds': 'minReadySeconds',
            'paused': 'paused',
            'progress_deadline_seconds': 'progressDeadlineSeconds',
            'replicas': 'replicas',
            'revision_history_limit': 'revisionHistoryLimit',
            'selector': 'selector',
            'strategy': 'strategy',
            'template': 'template'
        }

        self._min_ready_seconds = min_ready_seconds
        self._paused = paused
        self._progress_deadline_seconds = progress_deadline_seconds
        self._replicas = replicas
        self._revision_history_limit = revision_history_limit
        self._selector = selector
        self._strategy = strategy
        self._template = template

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAppsV1DeploymentSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.apps.v1.DeploymentSpec of this IoK8sApiAppsV1DeploymentSpec.  # noqa: E501
        :rtype: IoK8sApiAppsV1DeploymentSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_ready_seconds(self) -> int:
        """Gets the min_ready_seconds of this IoK8sApiAppsV1DeploymentSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :return: The min_ready_seconds of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: int
        """
        return self._min_ready_seconds

    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds: int):
        """Sets the min_ready_seconds of this IoK8sApiAppsV1DeploymentSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiAppsV1DeploymentSpec.
        :type min_ready_seconds: int
        """

        self._min_ready_seconds = min_ready_seconds

    @property
    def paused(self) -> bool:
        """Gets the paused of this IoK8sApiAppsV1DeploymentSpec.

        Indicates that the deployment is paused.  # noqa: E501

        :return: The paused of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused: bool):
        """Sets the paused of this IoK8sApiAppsV1DeploymentSpec.

        Indicates that the deployment is paused.  # noqa: E501

        :param paused: The paused of this IoK8sApiAppsV1DeploymentSpec.
        :type paused: bool
        """

        self._paused = paused

    @property
    def progress_deadline_seconds(self) -> int:
        """Gets the progress_deadline_seconds of this IoK8sApiAppsV1DeploymentSpec.

        The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.  # noqa: E501

        :return: The progress_deadline_seconds of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: int
        """
        return self._progress_deadline_seconds

    @progress_deadline_seconds.setter
    def progress_deadline_seconds(self, progress_deadline_seconds: int):
        """Sets the progress_deadline_seconds of this IoK8sApiAppsV1DeploymentSpec.

        The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.  # noqa: E501

        :param progress_deadline_seconds: The progress_deadline_seconds of this IoK8sApiAppsV1DeploymentSpec.
        :type progress_deadline_seconds: int
        """

        self._progress_deadline_seconds = progress_deadline_seconds

    @property
    def replicas(self) -> int:
        """Gets the replicas of this IoK8sApiAppsV1DeploymentSpec.

        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.  # noqa: E501

        :return: The replicas of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: int):
        """Sets the replicas of this IoK8sApiAppsV1DeploymentSpec.

        Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.  # noqa: E501

        :param replicas: The replicas of this IoK8sApiAppsV1DeploymentSpec.
        :type replicas: int
        """

        self._replicas = replicas

    @property
    def revision_history_limit(self) -> int:
        """Gets the revision_history_limit of this IoK8sApiAppsV1DeploymentSpec.

        The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.  # noqa: E501

        :return: The revision_history_limit of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: int
        """
        return self._revision_history_limit

    @revision_history_limit.setter
    def revision_history_limit(self, revision_history_limit: int):
        """Sets the revision_history_limit of this IoK8sApiAppsV1DeploymentSpec.

        The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.  # noqa: E501

        :param revision_history_limit: The revision_history_limit of this IoK8sApiAppsV1DeploymentSpec.
        :type revision_history_limit: int
        """

        self._revision_history_limit = revision_history_limit

    @property
    def selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the selector of this IoK8sApiAppsV1DeploymentSpec.

        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.  # noqa: E501

        :return: The selector of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the selector of this IoK8sApiAppsV1DeploymentSpec.

        Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.  # noqa: E501

        :param selector: The selector of this IoK8sApiAppsV1DeploymentSpec.
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        if selector is None:
            raise ValueError("Invalid value for `selector`, must not be `None`")  # noqa: E501

        self._selector = selector

    @property
    def strategy(self) -> IoK8sApiAppsV1DeploymentStrategy:
        """Gets the strategy of this IoK8sApiAppsV1DeploymentSpec.

        The deployment strategy to use to replace existing pods with new ones.  # noqa: E501

        :return: The strategy of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: IoK8sApiAppsV1DeploymentStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy: IoK8sApiAppsV1DeploymentStrategy):
        """Sets the strategy of this IoK8sApiAppsV1DeploymentSpec.

        The deployment strategy to use to replace existing pods with new ones.  # noqa: E501

        :param strategy: The strategy of this IoK8sApiAppsV1DeploymentSpec.
        :type strategy: IoK8sApiAppsV1DeploymentStrategy
        """

        self._strategy = strategy

    @property
    def template(self) -> IoK8sApiCoreV1PodTemplateSpec:
        """Gets the template of this IoK8sApiAppsV1DeploymentSpec.

        Template describes the pods that will be created.  # noqa: E501

        :return: The template of this IoK8sApiAppsV1DeploymentSpec.
        :rtype: IoK8sApiCoreV1PodTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template: IoK8sApiCoreV1PodTemplateSpec):
        """Sets the template of this IoK8sApiAppsV1DeploymentSpec.

        Template describes the pods that will be created.  # noqa: E501

        :param template: The template of this IoK8sApiAppsV1DeploymentSpec.
        :type template: IoK8sApiCoreV1PodTemplateSpec
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template
