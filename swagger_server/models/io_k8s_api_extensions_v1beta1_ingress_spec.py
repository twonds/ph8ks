# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiExtensionsV1beta1IngressSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, backend: IoK8sApiExtensionsV1beta1IngressBackend=None, rules: List[IoK8sApiExtensionsV1beta1IngressRule]=None, tls: List[IoK8sApiExtensionsV1beta1IngressTLS]=None):  # noqa: E501
        """IoK8sApiExtensionsV1beta1IngressSpec - a model defined in Swagger

        :param backend: The backend of this IoK8sApiExtensionsV1beta1IngressSpec.  # noqa: E501
        :type backend: IoK8sApiExtensionsV1beta1IngressBackend
        :param rules: The rules of this IoK8sApiExtensionsV1beta1IngressSpec.  # noqa: E501
        :type rules: List[IoK8sApiExtensionsV1beta1IngressRule]
        :param tls: The tls of this IoK8sApiExtensionsV1beta1IngressSpec.  # noqa: E501
        :type tls: List[IoK8sApiExtensionsV1beta1IngressTLS]
        """
        self.swagger_types = {
            'backend': IoK8sApiExtensionsV1beta1IngressBackend,
            'rules': List[IoK8sApiExtensionsV1beta1IngressRule],
            'tls': List[IoK8sApiExtensionsV1beta1IngressTLS]
        }

        self.attribute_map = {
            'backend': 'backend',
            'rules': 'rules',
            'tls': 'tls'
        }

        self._backend = backend
        self._rules = rules
        self._tls = tls

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiExtensionsV1beta1IngressSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.extensions.v1beta1.IngressSpec of this IoK8sApiExtensionsV1beta1IngressSpec.  # noqa: E501
        :rtype: IoK8sApiExtensionsV1beta1IngressSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend(self) -> IoK8sApiExtensionsV1beta1IngressBackend:
        """Gets the backend of this IoK8sApiExtensionsV1beta1IngressSpec.

        A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.  # noqa: E501

        :return: The backend of this IoK8sApiExtensionsV1beta1IngressSpec.
        :rtype: IoK8sApiExtensionsV1beta1IngressBackend
        """
        return self._backend

    @backend.setter
    def backend(self, backend: IoK8sApiExtensionsV1beta1IngressBackend):
        """Sets the backend of this IoK8sApiExtensionsV1beta1IngressSpec.

        A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.  # noqa: E501

        :param backend: The backend of this IoK8sApiExtensionsV1beta1IngressSpec.
        :type backend: IoK8sApiExtensionsV1beta1IngressBackend
        """

        self._backend = backend

    @property
    def rules(self) -> List[IoK8sApiExtensionsV1beta1IngressRule]:
        """Gets the rules of this IoK8sApiExtensionsV1beta1IngressSpec.

        A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.  # noqa: E501

        :return: The rules of this IoK8sApiExtensionsV1beta1IngressSpec.
        :rtype: List[IoK8sApiExtensionsV1beta1IngressRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[IoK8sApiExtensionsV1beta1IngressRule]):
        """Sets the rules of this IoK8sApiExtensionsV1beta1IngressSpec.

        A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.  # noqa: E501

        :param rules: The rules of this IoK8sApiExtensionsV1beta1IngressSpec.
        :type rules: List[IoK8sApiExtensionsV1beta1IngressRule]
        """

        self._rules = rules

    @property
    def tls(self) -> List[IoK8sApiExtensionsV1beta1IngressTLS]:
        """Gets the tls of this IoK8sApiExtensionsV1beta1IngressSpec.

        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.  # noqa: E501

        :return: The tls of this IoK8sApiExtensionsV1beta1IngressSpec.
        :rtype: List[IoK8sApiExtensionsV1beta1IngressTLS]
        """
        return self._tls

    @tls.setter
    def tls(self, tls: List[IoK8sApiExtensionsV1beta1IngressTLS]):
        """Sets the tls of this IoK8sApiExtensionsV1beta1IngressSpec.

        TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.  # noqa: E501

        :param tls: The tls of this IoK8sApiExtensionsV1beta1IngressSpec.
        :type tls: List[IoK8sApiExtensionsV1beta1IngressTLS]
        """

        self._tls = tls
