# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ConfigMapNodeConfigSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, kubelet_config_key: str=None, name: str=None, namespace: str=None, resource_version: str=None, uid: str=None):  # noqa: E501
        """IoK8sApiCoreV1ConfigMapNodeConfigSource - a model defined in Swagger

        :param kubelet_config_key: The kubelet_config_key of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :type kubelet_config_key: str
        :param name: The name of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :type name: str
        :param namespace: The namespace of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :type namespace: str
        :param resource_version: The resource_version of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :type resource_version: str
        :param uid: The uid of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :type uid: str
        """
        self.swagger_types = {
            'kubelet_config_key': str,
            'name': str,
            'namespace': str,
            'resource_version': str,
            'uid': str
        }

        self.attribute_map = {
            'kubelet_config_key': 'kubeletConfigKey',
            'name': 'name',
            'namespace': 'namespace',
            'resource_version': 'resourceVersion',
            'uid': 'uid'
        }

        self._kubelet_config_key = kubelet_config_key
        self._name = name
        self._namespace = namespace
        self._resource_version = resource_version
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ConfigMapNodeConfigSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ConfigMapNodeConfigSource of this IoK8sApiCoreV1ConfigMapNodeConfigSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1ConfigMapNodeConfigSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kubelet_config_key(self) -> str:
        """Gets the kubelet_config_key of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.  # noqa: E501

        :return: The kubelet_config_key of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :rtype: str
        """
        return self._kubelet_config_key

    @kubelet_config_key.setter
    def kubelet_config_key(self, kubelet_config_key: str):
        """Sets the kubelet_config_key of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.  # noqa: E501

        :param kubelet_config_key: The kubelet_config_key of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :type kubelet_config_key: str
        """
        if kubelet_config_key is None:
            raise ValueError("Invalid value for `kubelet_config_key`, must not be `None`")  # noqa: E501

        self._kubelet_config_key = kubelet_config_key

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self) -> str:
        """Gets the namespace of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :return: The namespace of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: str):
        """Sets the namespace of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.  # noqa: E501

        :param namespace: The namespace of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def resource_version(self) -> str:
        """Gets the resource_version of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :return: The resource_version of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version: str):
        """Sets the resource_version of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :param resource_version: The resource_version of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :type resource_version: str
        """

        self._resource_version = resource_version

    @property
    def uid(self) -> str:
        """Gets the uid of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :return: The uid of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this IoK8sApiCoreV1ConfigMapNodeConfigSource.

        UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.  # noqa: E501

        :param uid: The uid of this IoK8sApiCoreV1ConfigMapNodeConfigSource.
        :type uid: str
        """

        self._uid = uid
