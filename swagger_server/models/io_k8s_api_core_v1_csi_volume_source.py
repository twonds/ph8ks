# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1CSIVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, driver: str=None, fs_type: str=None, node_publish_secret_ref: IoK8sApiCoreV1LocalObjectReference=None, read_only: bool=None, volume_attributes: Dict[str, str]=None):  # noqa: E501
        """IoK8sApiCoreV1CSIVolumeSource - a model defined in Swagger

        :param driver: The driver of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :type driver: str
        :param fs_type: The fs_type of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :type fs_type: str
        :param node_publish_secret_ref: The node_publish_secret_ref of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :type node_publish_secret_ref: IoK8sApiCoreV1LocalObjectReference
        :param read_only: The read_only of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :type read_only: bool
        :param volume_attributes: The volume_attributes of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :type volume_attributes: Dict[str, str]
        """
        self.swagger_types = {
            'driver': str,
            'fs_type': str,
            'node_publish_secret_ref': IoK8sApiCoreV1LocalObjectReference,
            'read_only': bool,
            'volume_attributes': Dict[str, str]
        }

        self.attribute_map = {
            'driver': 'driver',
            'fs_type': 'fsType',
            'node_publish_secret_ref': 'nodePublishSecretRef',
            'read_only': 'readOnly',
            'volume_attributes': 'volumeAttributes'
        }

        self._driver = driver
        self._fs_type = fs_type
        self._node_publish_secret_ref = node_publish_secret_ref
        self._read_only = read_only
        self._volume_attributes = volume_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1CSIVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.CSIVolumeSource of this IoK8sApiCoreV1CSIVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1CSIVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self) -> str:
        """Gets the driver of this IoK8sApiCoreV1CSIVolumeSource.

        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.  # noqa: E501

        :return: The driver of this IoK8sApiCoreV1CSIVolumeSource.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this IoK8sApiCoreV1CSIVolumeSource.

        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.  # noqa: E501

        :param driver: The driver of this IoK8sApiCoreV1CSIVolumeSource.
        :type driver: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1CSIVolumeSource.

        Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1CSIVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1CSIVolumeSource.

        Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1CSIVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def node_publish_secret_ref(self) -> IoK8sApiCoreV1LocalObjectReference:
        """Gets the node_publish_secret_ref of this IoK8sApiCoreV1CSIVolumeSource.

        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.  # noqa: E501

        :return: The node_publish_secret_ref of this IoK8sApiCoreV1CSIVolumeSource.
        :rtype: IoK8sApiCoreV1LocalObjectReference
        """
        return self._node_publish_secret_ref

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, node_publish_secret_ref: IoK8sApiCoreV1LocalObjectReference):
        """Sets the node_publish_secret_ref of this IoK8sApiCoreV1CSIVolumeSource.

        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.  # noqa: E501

        :param node_publish_secret_ref: The node_publish_secret_ref of this IoK8sApiCoreV1CSIVolumeSource.
        :type node_publish_secret_ref: IoK8sApiCoreV1LocalObjectReference
        """

        self._node_publish_secret_ref = node_publish_secret_ref

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1CSIVolumeSource.

        Specifies a read-only configuration for the volume. Defaults to false (read/write).  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1CSIVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1CSIVolumeSource.

        Specifies a read-only configuration for the volume. Defaults to false (read/write).  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1CSIVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def volume_attributes(self) -> Dict[str, str]:
        """Gets the volume_attributes of this IoK8sApiCoreV1CSIVolumeSource.

        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.  # noqa: E501

        :return: The volume_attributes of this IoK8sApiCoreV1CSIVolumeSource.
        :rtype: Dict[str, str]
        """
        return self._volume_attributes

    @volume_attributes.setter
    def volume_attributes(self, volume_attributes: Dict[str, str]):
        """Sets the volume_attributes of this IoK8sApiCoreV1CSIVolumeSource.

        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.  # noqa: E501

        :param volume_attributes: The volume_attributes of this IoK8sApiCoreV1CSIVolumeSource.
        :type volume_attributes: Dict[str, str]
        """

        self._volume_attributes = volume_attributes
