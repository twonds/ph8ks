# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1NodeSystemInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, boot_id: str=None, container_runtime_version: str=None, kernel_version: str=None, kube_proxy_version: str=None, kubelet_version: str=None, machine_id: str=None, operating_system: str=None, os_image: str=None, system_uuid: str=None):  # noqa: E501
        """IoK8sApiCoreV1NodeSystemInfo - a model defined in Swagger

        :param architecture: The architecture of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type architecture: str
        :param boot_id: The boot_id of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type boot_id: str
        :param container_runtime_version: The container_runtime_version of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type container_runtime_version: str
        :param kernel_version: The kernel_version of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type kernel_version: str
        :param kube_proxy_version: The kube_proxy_version of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type kube_proxy_version: str
        :param kubelet_version: The kubelet_version of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type kubelet_version: str
        :param machine_id: The machine_id of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type machine_id: str
        :param operating_system: The operating_system of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type operating_system: str
        :param os_image: The os_image of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type os_image: str
        :param system_uuid: The system_uuid of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :type system_uuid: str
        """
        self.swagger_types = {
            'architecture': str,
            'boot_id': str,
            'container_runtime_version': str,
            'kernel_version': str,
            'kube_proxy_version': str,
            'kubelet_version': str,
            'machine_id': str,
            'operating_system': str,
            'os_image': str,
            'system_uuid': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'boot_id': 'bootID',
            'container_runtime_version': 'containerRuntimeVersion',
            'kernel_version': 'kernelVersion',
            'kube_proxy_version': 'kubeProxyVersion',
            'kubelet_version': 'kubeletVersion',
            'machine_id': 'machineID',
            'operating_system': 'operatingSystem',
            'os_image': 'osImage',
            'system_uuid': 'systemUUID'
        }

        self._architecture = architecture
        self._boot_id = boot_id
        self._container_runtime_version = container_runtime_version
        self._kernel_version = kernel_version
        self._kube_proxy_version = kube_proxy_version
        self._kubelet_version = kubelet_version
        self._machine_id = machine_id
        self._operating_system = operating_system
        self._os_image = os_image
        self._system_uuid = system_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1NodeSystemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.NodeSystemInfo of this IoK8sApiCoreV1NodeSystemInfo.  # noqa: E501
        :rtype: IoK8sApiCoreV1NodeSystemInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self) -> str:
        """Gets the architecture of this IoK8sApiCoreV1NodeSystemInfo.

        The Architecture reported by the node  # noqa: E501

        :return: The architecture of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture: str):
        """Sets the architecture of this IoK8sApiCoreV1NodeSystemInfo.

        The Architecture reported by the node  # noqa: E501

        :param architecture: The architecture of this IoK8sApiCoreV1NodeSystemInfo.
        :type architecture: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501

        self._architecture = architecture

    @property
    def boot_id(self) -> str:
        """Gets the boot_id of this IoK8sApiCoreV1NodeSystemInfo.

        Boot ID reported by the node.  # noqa: E501

        :return: The boot_id of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._boot_id

    @boot_id.setter
    def boot_id(self, boot_id: str):
        """Sets the boot_id of this IoK8sApiCoreV1NodeSystemInfo.

        Boot ID reported by the node.  # noqa: E501

        :param boot_id: The boot_id of this IoK8sApiCoreV1NodeSystemInfo.
        :type boot_id: str
        """
        if boot_id is None:
            raise ValueError("Invalid value for `boot_id`, must not be `None`")  # noqa: E501

        self._boot_id = boot_id

    @property
    def container_runtime_version(self) -> str:
        """Gets the container_runtime_version of this IoK8sApiCoreV1NodeSystemInfo.

        ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).  # noqa: E501

        :return: The container_runtime_version of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._container_runtime_version

    @container_runtime_version.setter
    def container_runtime_version(self, container_runtime_version: str):
        """Sets the container_runtime_version of this IoK8sApiCoreV1NodeSystemInfo.

        ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).  # noqa: E501

        :param container_runtime_version: The container_runtime_version of this IoK8sApiCoreV1NodeSystemInfo.
        :type container_runtime_version: str
        """
        if container_runtime_version is None:
            raise ValueError("Invalid value for `container_runtime_version`, must not be `None`")  # noqa: E501

        self._container_runtime_version = container_runtime_version

    @property
    def kernel_version(self) -> str:
        """Gets the kernel_version of this IoK8sApiCoreV1NodeSystemInfo.

        Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).  # noqa: E501

        :return: The kernel_version of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version: str):
        """Sets the kernel_version of this IoK8sApiCoreV1NodeSystemInfo.

        Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).  # noqa: E501

        :param kernel_version: The kernel_version of this IoK8sApiCoreV1NodeSystemInfo.
        :type kernel_version: str
        """
        if kernel_version is None:
            raise ValueError("Invalid value for `kernel_version`, must not be `None`")  # noqa: E501

        self._kernel_version = kernel_version

    @property
    def kube_proxy_version(self) -> str:
        """Gets the kube_proxy_version of this IoK8sApiCoreV1NodeSystemInfo.

        KubeProxy Version reported by the node.  # noqa: E501

        :return: The kube_proxy_version of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._kube_proxy_version

    @kube_proxy_version.setter
    def kube_proxy_version(self, kube_proxy_version: str):
        """Sets the kube_proxy_version of this IoK8sApiCoreV1NodeSystemInfo.

        KubeProxy Version reported by the node.  # noqa: E501

        :param kube_proxy_version: The kube_proxy_version of this IoK8sApiCoreV1NodeSystemInfo.
        :type kube_proxy_version: str
        """
        if kube_proxy_version is None:
            raise ValueError("Invalid value for `kube_proxy_version`, must not be `None`")  # noqa: E501

        self._kube_proxy_version = kube_proxy_version

    @property
    def kubelet_version(self) -> str:
        """Gets the kubelet_version of this IoK8sApiCoreV1NodeSystemInfo.

        Kubelet Version reported by the node.  # noqa: E501

        :return: The kubelet_version of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._kubelet_version

    @kubelet_version.setter
    def kubelet_version(self, kubelet_version: str):
        """Sets the kubelet_version of this IoK8sApiCoreV1NodeSystemInfo.

        Kubelet Version reported by the node.  # noqa: E501

        :param kubelet_version: The kubelet_version of this IoK8sApiCoreV1NodeSystemInfo.
        :type kubelet_version: str
        """
        if kubelet_version is None:
            raise ValueError("Invalid value for `kubelet_version`, must not be `None`")  # noqa: E501

        self._kubelet_version = kubelet_version

    @property
    def machine_id(self) -> str:
        """Gets the machine_id of this IoK8sApiCoreV1NodeSystemInfo.

        MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html  # noqa: E501

        :return: The machine_id of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id: str):
        """Sets the machine_id of this IoK8sApiCoreV1NodeSystemInfo.

        MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html  # noqa: E501

        :param machine_id: The machine_id of this IoK8sApiCoreV1NodeSystemInfo.
        :type machine_id: str
        """
        if machine_id is None:
            raise ValueError("Invalid value for `machine_id`, must not be `None`")  # noqa: E501

        self._machine_id = machine_id

    @property
    def operating_system(self) -> str:
        """Gets the operating_system of this IoK8sApiCoreV1NodeSystemInfo.

        The Operating System reported by the node  # noqa: E501

        :return: The operating_system of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system: str):
        """Sets the operating_system of this IoK8sApiCoreV1NodeSystemInfo.

        The Operating System reported by the node  # noqa: E501

        :param operating_system: The operating_system of this IoK8sApiCoreV1NodeSystemInfo.
        :type operating_system: str
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")  # noqa: E501

        self._operating_system = operating_system

    @property
    def os_image(self) -> str:
        """Gets the os_image of this IoK8sApiCoreV1NodeSystemInfo.

        OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).  # noqa: E501

        :return: The os_image of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._os_image

    @os_image.setter
    def os_image(self, os_image: str):
        """Sets the os_image of this IoK8sApiCoreV1NodeSystemInfo.

        OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).  # noqa: E501

        :param os_image: The os_image of this IoK8sApiCoreV1NodeSystemInfo.
        :type os_image: str
        """
        if os_image is None:
            raise ValueError("Invalid value for `os_image`, must not be `None`")  # noqa: E501

        self._os_image = os_image

    @property
    def system_uuid(self) -> str:
        """Gets the system_uuid of this IoK8sApiCoreV1NodeSystemInfo.

        SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html  # noqa: E501

        :return: The system_uuid of this IoK8sApiCoreV1NodeSystemInfo.
        :rtype: str
        """
        return self._system_uuid

    @system_uuid.setter
    def system_uuid(self, system_uuid: str):
        """Sets the system_uuid of this IoK8sApiCoreV1NodeSystemInfo.

        SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html  # noqa: E501

        :param system_uuid: The system_uuid of this IoK8sApiCoreV1NodeSystemInfo.
        :type system_uuid: str
        """
        if system_uuid is None:
            raise ValueError("Invalid value for `system_uuid`, must not be `None`")  # noqa: E501

        self._system_uuid = system_uuid
