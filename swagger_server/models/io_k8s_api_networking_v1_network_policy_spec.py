# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNetworkingV1NetworkPolicySpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, egress: List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]=None, ingress: List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]=None, pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, policy_types: List[str]=None):  # noqa: E501
        """IoK8sApiNetworkingV1NetworkPolicySpec - a model defined in Swagger

        :param egress: The egress of this IoK8sApiNetworkingV1NetworkPolicySpec.  # noqa: E501
        :type egress: List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]
        :param ingress: The ingress of this IoK8sApiNetworkingV1NetworkPolicySpec.  # noqa: E501
        :type ingress: List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]
        :param pod_selector: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicySpec.  # noqa: E501
        :type pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param policy_types: The policy_types of this IoK8sApiNetworkingV1NetworkPolicySpec.  # noqa: E501
        :type policy_types: List[str]
        """
        self.swagger_types = {
            'egress': List[IoK8sApiNetworkingV1NetworkPolicyEgressRule],
            'ingress': List[IoK8sApiNetworkingV1NetworkPolicyIngressRule],
            'pod_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'policy_types': List[str]
        }

        self.attribute_map = {
            'egress': 'egress',
            'ingress': 'ingress',
            'pod_selector': 'podSelector',
            'policy_types': 'policyTypes'
        }

        self._egress = egress
        self._ingress = ingress
        self._pod_selector = pod_selector
        self._policy_types = policy_types

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNetworkingV1NetworkPolicySpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.networking.v1.NetworkPolicySpec of this IoK8sApiNetworkingV1NetworkPolicySpec.  # noqa: E501
        :rtype: IoK8sApiNetworkingV1NetworkPolicySpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress(self) -> List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]:
        """Gets the egress of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8  # noqa: E501

        :return: The egress of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :rtype: List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]
        """
        return self._egress

    @egress.setter
    def egress(self, egress: List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]):
        """Sets the egress of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8  # noqa: E501

        :param egress: The egress of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :type egress: List[IoK8sApiNetworkingV1NetworkPolicyEgressRule]
        """

        self._egress = egress

    @property
    def ingress(self) -> List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]:
        """Gets the ingress of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)  # noqa: E501

        :return: The ingress of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :rtype: List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress: List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]):
        """Sets the ingress of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)  # noqa: E501

        :param ingress: The ingress of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :type ingress: List[IoK8sApiNetworkingV1NetworkPolicyIngressRule]
        """

        self._ingress = ingress

    @property
    def pod_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the pod_selector of this IoK8sApiNetworkingV1NetworkPolicySpec.

        Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.  # noqa: E501

        :return: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._pod_selector

    @pod_selector.setter
    def pod_selector(self, pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the pod_selector of this IoK8sApiNetworkingV1NetworkPolicySpec.

        Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.  # noqa: E501

        :param pod_selector: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :type pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        if pod_selector is None:
            raise ValueError("Invalid value for `pod_selector`, must not be `None`")  # noqa: E501

        self._pod_selector = pod_selector

    @property
    def policy_types(self) -> List[str]:
        """Gets the policy_types of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of rule types that the NetworkPolicy relates to. Valid options are \"Ingress\", \"Egress\", or \"Ingress,Egress\". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8  # noqa: E501

        :return: The policy_types of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :rtype: List[str]
        """
        return self._policy_types

    @policy_types.setter
    def policy_types(self, policy_types: List[str]):
        """Sets the policy_types of this IoK8sApiNetworkingV1NetworkPolicySpec.

        List of rule types that the NetworkPolicy relates to. Valid options are \"Ingress\", \"Egress\", or \"Ingress,Egress\". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8  # noqa: E501

        :param policy_types: The policy_types of this IoK8sApiNetworkingV1NetworkPolicySpec.
        :type policy_types: List[str]
        """

        self._policy_types = policy_types
