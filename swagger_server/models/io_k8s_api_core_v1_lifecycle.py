# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1Lifecycle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, post_start: IoK8sApiCoreV1Handler=None, pre_stop: IoK8sApiCoreV1Handler=None):  # noqa: E501
        """IoK8sApiCoreV1Lifecycle - a model defined in Swagger

        :param post_start: The post_start of this IoK8sApiCoreV1Lifecycle.  # noqa: E501
        :type post_start: IoK8sApiCoreV1Handler
        :param pre_stop: The pre_stop of this IoK8sApiCoreV1Lifecycle.  # noqa: E501
        :type pre_stop: IoK8sApiCoreV1Handler
        """
        self.swagger_types = {
            'post_start': IoK8sApiCoreV1Handler,
            'pre_stop': IoK8sApiCoreV1Handler
        }

        self.attribute_map = {
            'post_start': 'postStart',
            'pre_stop': 'preStop'
        }

        self._post_start = post_start
        self._pre_stop = pre_stop

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1Lifecycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.Lifecycle of this IoK8sApiCoreV1Lifecycle.  # noqa: E501
        :rtype: IoK8sApiCoreV1Lifecycle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def post_start(self) -> IoK8sApiCoreV1Handler:
        """Gets the post_start of this IoK8sApiCoreV1Lifecycle.

        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks  # noqa: E501

        :return: The post_start of this IoK8sApiCoreV1Lifecycle.
        :rtype: IoK8sApiCoreV1Handler
        """
        return self._post_start

    @post_start.setter
    def post_start(self, post_start: IoK8sApiCoreV1Handler):
        """Sets the post_start of this IoK8sApiCoreV1Lifecycle.

        PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks  # noqa: E501

        :param post_start: The post_start of this IoK8sApiCoreV1Lifecycle.
        :type post_start: IoK8sApiCoreV1Handler
        """

        self._post_start = post_start

    @property
    def pre_stop(self) -> IoK8sApiCoreV1Handler:
        """Gets the pre_stop of this IoK8sApiCoreV1Lifecycle.

        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks  # noqa: E501

        :return: The pre_stop of this IoK8sApiCoreV1Lifecycle.
        :rtype: IoK8sApiCoreV1Handler
        """
        return self._pre_stop

    @pre_stop.setter
    def pre_stop(self, pre_stop: IoK8sApiCoreV1Handler):
        """Sets the pre_stop of this IoK8sApiCoreV1Lifecycle.

        PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks  # noqa: E501

        :param pre_stop: The pre_stop of this IoK8sApiCoreV1Lifecycle.
        :type pre_stop: IoK8sApiCoreV1Handler
        """

        self._pre_stop = pre_stop
