# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group_version: str=None, version: str=None):  # noqa: E501
        """IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery - a model defined in Swagger

        :param group_version: The group_version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.  # noqa: E501
        :type group_version: str
        :param version: The version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'group_version': str,
            'version': str
        }

        self.attribute_map = {
            'group_version': 'groupVersion',
            'version': 'version'
        }

        self._group_version = group_version
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_version(self) -> str:
        """Gets the group_version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.

        groupVersion specifies the API group and version in the form \"group/version\"  # noqa: E501

        :return: The group_version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.
        :rtype: str
        """
        return self._group_version

    @group_version.setter
    def group_version(self, group_version: str):
        """Sets the group_version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.

        groupVersion specifies the API group and version in the form \"group/version\"  # noqa: E501

        :param group_version: The group_version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.
        :type group_version: str
        """
        if group_version is None:
            raise ValueError("Invalid value for `group_version`, must not be `None`")  # noqa: E501

        self._group_version = group_version

    @property
    def version(self) -> str:
        """Gets the version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.

        version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.  # noqa: E501

        :return: The version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.

        version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.  # noqa: E501

        :param version: The version of this IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
