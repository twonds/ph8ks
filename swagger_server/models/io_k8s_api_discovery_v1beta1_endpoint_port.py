# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiDiscoveryV1beta1EndpointPort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, app_protocol: str=None, name: str=None, port: int=None, protocol: str=None):  # noqa: E501
        """IoK8sApiDiscoveryV1beta1EndpointPort - a model defined in Swagger

        :param app_protocol: The app_protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.  # noqa: E501
        :type app_protocol: str
        :param name: The name of this IoK8sApiDiscoveryV1beta1EndpointPort.  # noqa: E501
        :type name: str
        :param port: The port of this IoK8sApiDiscoveryV1beta1EndpointPort.  # noqa: E501
        :type port: int
        :param protocol: The protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.  # noqa: E501
        :type protocol: str
        """
        self.swagger_types = {
            'app_protocol': str,
            'name': str,
            'port': int,
            'protocol': str
        }

        self.attribute_map = {
            'app_protocol': 'appProtocol',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol'
        }

        self._app_protocol = app_protocol
        self._name = name
        self._port = port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiDiscoveryV1beta1EndpointPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.discovery.v1beta1.EndpointPort of this IoK8sApiDiscoveryV1beta1EndpointPort.  # noqa: E501
        :rtype: IoK8sApiDiscoveryV1beta1EndpointPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_protocol(self) -> str:
        """Gets the app_protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.  # noqa: E501

        :return: The app_protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :rtype: str
        """
        return self._app_protocol

    @app_protocol.setter
    def app_protocol(self, app_protocol: str):
        """Sets the app_protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.  # noqa: E501

        :param app_protocol: The app_protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :type app_protocol: str
        """

        self._app_protocol = app_protocol

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.  # noqa: E501

        :return: The name of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.  # noqa: E501

        :param name: The name of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :type name: str
        """

        self._name = name

    @property
    def port(self) -> int:
        """Gets the port of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.  # noqa: E501

        :return: The port of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.  # noqa: E501

        :param port: The port of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self) -> str:
        """Gets the protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.  # noqa: E501

        :return: The protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.

        The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.  # noqa: E501

        :param protocol: The protocol of this IoK8sApiDiscoveryV1beta1EndpointPort.
        :type protocol: str
        """

        self._protocol = protocol
