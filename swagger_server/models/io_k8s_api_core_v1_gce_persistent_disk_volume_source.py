# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1GCEPersistentDiskVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, partition: int=None, pd_name: str=None, read_only: bool=None):  # noqa: E501
        """IoK8sApiCoreV1GCEPersistentDiskVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.  # noqa: E501
        :type fs_type: str
        :param partition: The partition of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.  # noqa: E501
        :type partition: int
        :param pd_name: The pd_name of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.  # noqa: E501
        :type pd_name: str
        :param read_only: The read_only of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.  # noqa: E501
        :type read_only: bool
        """
        self.swagger_types = {
            'fs_type': str,
            'partition': int,
            'pd_name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'partition': 'partition',
            'pd_name': 'pdName',
            'read_only': 'readOnly'
        }

        self._fs_type = fs_type
        self._partition = partition
        self._pd_name = pd_name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1GCEPersistentDiskVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.GCEPersistentDiskVolumeSource of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def partition(self) -> int:
        """Gets the partition of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The partition of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :rtype: int
        """
        return self._partition

    @partition.setter
    def partition(self, partition: int):
        """Sets the partition of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param partition: The partition of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :type partition: int
        """

        self._partition = partition

    @property
    def pd_name(self) -> str:
        """Gets the pd_name of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The pd_name of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :rtype: str
        """
        return self._pd_name

    @pd_name.setter
    def pd_name(self, pd_name: str):
        """Sets the pd_name of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param pd_name: The pd_name of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :type pd_name: str
        """
        if pd_name is None:
            raise ValueError("Invalid value for `pd_name`, must not be `None`")  # noqa: E501

        self._pd_name = pd_name

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1GCEPersistentDiskVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only
