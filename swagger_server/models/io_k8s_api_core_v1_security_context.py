# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1SecurityContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, allow_privilege_escalation: bool=None, capabilities: IoK8sApiCoreV1Capabilities=None, privileged: bool=None, proc_mount: str=None, read_only_root_filesystem: bool=None, run_as_group: int=None, run_as_non_root: bool=None, run_as_user: int=None, se_linux_options: IoK8sApiCoreV1SELinuxOptions=None, windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions=None):  # noqa: E501
        """IoK8sApiCoreV1SecurityContext - a model defined in Swagger

        :param allow_privilege_escalation: The allow_privilege_escalation of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type allow_privilege_escalation: bool
        :param capabilities: The capabilities of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type capabilities: IoK8sApiCoreV1Capabilities
        :param privileged: The privileged of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type privileged: bool
        :param proc_mount: The proc_mount of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type proc_mount: str
        :param read_only_root_filesystem: The read_only_root_filesystem of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type read_only_root_filesystem: bool
        :param run_as_group: The run_as_group of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type run_as_group: int
        :param run_as_non_root: The run_as_non_root of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type run_as_non_root: bool
        :param run_as_user: The run_as_user of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type run_as_user: int
        :param se_linux_options: The se_linux_options of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        :param windows_options: The windows_options of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :type windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions
        """
        self.swagger_types = {
            'allow_privilege_escalation': bool,
            'capabilities': IoK8sApiCoreV1Capabilities,
            'privileged': bool,
            'proc_mount': str,
            'read_only_root_filesystem': bool,
            'run_as_group': int,
            'run_as_non_root': bool,
            'run_as_user': int,
            'se_linux_options': IoK8sApiCoreV1SELinuxOptions,
            'windows_options': IoK8sApiCoreV1WindowsSecurityContextOptions
        }

        self.attribute_map = {
            'allow_privilege_escalation': 'allowPrivilegeEscalation',
            'capabilities': 'capabilities',
            'privileged': 'privileged',
            'proc_mount': 'procMount',
            'read_only_root_filesystem': 'readOnlyRootFilesystem',
            'run_as_group': 'runAsGroup',
            'run_as_non_root': 'runAsNonRoot',
            'run_as_user': 'runAsUser',
            'se_linux_options': 'seLinuxOptions',
            'windows_options': 'windowsOptions'
        }

        self._allow_privilege_escalation = allow_privilege_escalation
        self._capabilities = capabilities
        self._privileged = privileged
        self._proc_mount = proc_mount
        self._read_only_root_filesystem = read_only_root_filesystem
        self._run_as_group = run_as_group
        self._run_as_non_root = run_as_non_root
        self._run_as_user = run_as_user
        self._se_linux_options = se_linux_options
        self._windows_options = windows_options

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1SecurityContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.SecurityContext of this IoK8sApiCoreV1SecurityContext.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecurityContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_privilege_escalation(self) -> bool:
        """Gets the allow_privilege_escalation of this IoK8sApiCoreV1SecurityContext.

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN  # noqa: E501

        :return: The allow_privilege_escalation of this IoK8sApiCoreV1SecurityContext.
        :rtype: bool
        """
        return self._allow_privilege_escalation

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, allow_privilege_escalation: bool):
        """Sets the allow_privilege_escalation of this IoK8sApiCoreV1SecurityContext.

        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN  # noqa: E501

        :param allow_privilege_escalation: The allow_privilege_escalation of this IoK8sApiCoreV1SecurityContext.
        :type allow_privilege_escalation: bool
        """

        self._allow_privilege_escalation = allow_privilege_escalation

    @property
    def capabilities(self) -> IoK8sApiCoreV1Capabilities:
        """Gets the capabilities of this IoK8sApiCoreV1SecurityContext.

        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.  # noqa: E501

        :return: The capabilities of this IoK8sApiCoreV1SecurityContext.
        :rtype: IoK8sApiCoreV1Capabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: IoK8sApiCoreV1Capabilities):
        """Sets the capabilities of this IoK8sApiCoreV1SecurityContext.

        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.  # noqa: E501

        :param capabilities: The capabilities of this IoK8sApiCoreV1SecurityContext.
        :type capabilities: IoK8sApiCoreV1Capabilities
        """

        self._capabilities = capabilities

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this IoK8sApiCoreV1SecurityContext.

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.  # noqa: E501

        :return: The privileged of this IoK8sApiCoreV1SecurityContext.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this IoK8sApiCoreV1SecurityContext.

        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.  # noqa: E501

        :param privileged: The privileged of this IoK8sApiCoreV1SecurityContext.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def proc_mount(self) -> str:
        """Gets the proc_mount of this IoK8sApiCoreV1SecurityContext.

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.  # noqa: E501

        :return: The proc_mount of this IoK8sApiCoreV1SecurityContext.
        :rtype: str
        """
        return self._proc_mount

    @proc_mount.setter
    def proc_mount(self, proc_mount: str):
        """Sets the proc_mount of this IoK8sApiCoreV1SecurityContext.

        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.  # noqa: E501

        :param proc_mount: The proc_mount of this IoK8sApiCoreV1SecurityContext.
        :type proc_mount: str
        """

        self._proc_mount = proc_mount

    @property
    def read_only_root_filesystem(self) -> bool:
        """Gets the read_only_root_filesystem of this IoK8sApiCoreV1SecurityContext.

        Whether this container has a read-only root filesystem. Default is false.  # noqa: E501

        :return: The read_only_root_filesystem of this IoK8sApiCoreV1SecurityContext.
        :rtype: bool
        """
        return self._read_only_root_filesystem

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, read_only_root_filesystem: bool):
        """Sets the read_only_root_filesystem of this IoK8sApiCoreV1SecurityContext.

        Whether this container has a read-only root filesystem. Default is false.  # noqa: E501

        :param read_only_root_filesystem: The read_only_root_filesystem of this IoK8sApiCoreV1SecurityContext.
        :type read_only_root_filesystem: bool
        """

        self._read_only_root_filesystem = read_only_root_filesystem

    @property
    def run_as_group(self) -> int:
        """Gets the run_as_group of this IoK8sApiCoreV1SecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_group of this IoK8sApiCoreV1SecurityContext.
        :rtype: int
        """
        return self._run_as_group

    @run_as_group.setter
    def run_as_group(self, run_as_group: int):
        """Sets the run_as_group of this IoK8sApiCoreV1SecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_group: The run_as_group of this IoK8sApiCoreV1SecurityContext.
        :type run_as_group: int
        """

        self._run_as_group = run_as_group

    @property
    def run_as_non_root(self) -> bool:
        """Gets the run_as_non_root of this IoK8sApiCoreV1SecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_non_root of this IoK8sApiCoreV1SecurityContext.
        :rtype: bool
        """
        return self._run_as_non_root

    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root: bool):
        """Sets the run_as_non_root of this IoK8sApiCoreV1SecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_non_root: The run_as_non_root of this IoK8sApiCoreV1SecurityContext.
        :type run_as_non_root: bool
        """

        self._run_as_non_root = run_as_non_root

    @property
    def run_as_user(self) -> int:
        """Gets the run_as_user of this IoK8sApiCoreV1SecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_user of this IoK8sApiCoreV1SecurityContext.
        :rtype: int
        """
        return self._run_as_user

    @run_as_user.setter
    def run_as_user(self, run_as_user: int):
        """Sets the run_as_user of this IoK8sApiCoreV1SecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_user: The run_as_user of this IoK8sApiCoreV1SecurityContext.
        :type run_as_user: int
        """

        self._run_as_user = run_as_user

    @property
    def se_linux_options(self) -> IoK8sApiCoreV1SELinuxOptions:
        """Gets the se_linux_options of this IoK8sApiCoreV1SecurityContext.

        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The se_linux_options of this IoK8sApiCoreV1SecurityContext.
        :rtype: IoK8sApiCoreV1SELinuxOptions
        """
        return self._se_linux_options

    @se_linux_options.setter
    def se_linux_options(self, se_linux_options: IoK8sApiCoreV1SELinuxOptions):
        """Sets the se_linux_options of this IoK8sApiCoreV1SecurityContext.

        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param se_linux_options: The se_linux_options of this IoK8sApiCoreV1SecurityContext.
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        """

        self._se_linux_options = se_linux_options

    @property
    def windows_options(self) -> IoK8sApiCoreV1WindowsSecurityContextOptions:
        """Gets the windows_options of this IoK8sApiCoreV1SecurityContext.

        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The windows_options of this IoK8sApiCoreV1SecurityContext.
        :rtype: IoK8sApiCoreV1WindowsSecurityContextOptions
        """
        return self._windows_options

    @windows_options.setter
    def windows_options(self, windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions):
        """Sets the windows_options of this IoK8sApiCoreV1SecurityContext.

        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param windows_options: The windows_options of this IoK8sApiCoreV1SecurityContext.
        :type windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions
        """

        self._windows_options = windows_options
