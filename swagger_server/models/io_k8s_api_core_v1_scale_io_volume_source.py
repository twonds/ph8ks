# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ScaleIOVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, gateway: str=None, protection_domain: str=None, read_only: bool=None, secret_ref: IoK8sApiCoreV1LocalObjectReference=None, ssl_enabled: bool=None, storage_mode: str=None, storage_pool: str=None, system: str=None, volume_name: str=None):  # noqa: E501
        """IoK8sApiCoreV1ScaleIOVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type fs_type: str
        :param gateway: The gateway of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type gateway: str
        :param protection_domain: The protection_domain of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type protection_domain: str
        :param read_only: The read_only of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type read_only: bool
        :param secret_ref: The secret_ref of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        :param ssl_enabled: The ssl_enabled of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type ssl_enabled: bool
        :param storage_mode: The storage_mode of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type storage_mode: str
        :param storage_pool: The storage_pool of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type storage_pool: str
        :param system: The system of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type system: str
        :param volume_name: The volume_name of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :type volume_name: str
        """
        self.swagger_types = {
            'fs_type': str,
            'gateway': str,
            'protection_domain': str,
            'read_only': bool,
            'secret_ref': IoK8sApiCoreV1LocalObjectReference,
            'ssl_enabled': bool,
            'storage_mode': str,
            'storage_pool': str,
            'system': str,
            'volume_name': str
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'gateway': 'gateway',
            'protection_domain': 'protectionDomain',
            'read_only': 'readOnly',
            'secret_ref': 'secretRef',
            'ssl_enabled': 'sslEnabled',
            'storage_mode': 'storageMode',
            'storage_pool': 'storagePool',
            'system': 'system',
            'volume_name': 'volumeName'
        }

        self._fs_type = fs_type
        self._gateway = gateway
        self._protection_domain = protection_domain
        self._read_only = read_only
        self._secret_ref = secret_ref
        self._ssl_enabled = ssl_enabled
        self._storage_mode = storage_mode
        self._storage_pool = storage_pool
        self._system = system
        self._volume_name = volume_name

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ScaleIOVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ScaleIOVolumeSource of this IoK8sApiCoreV1ScaleIOVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1ScaleIOVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def gateway(self) -> str:
        """Gets the gateway of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The host address of the ScaleIO API Gateway.  # noqa: E501

        :return: The gateway of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: str):
        """Sets the gateway of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The host address of the ScaleIO API Gateway.  # noqa: E501

        :param gateway: The gateway of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type gateway: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    @property
    def protection_domain(self) -> str:
        """Gets the protection_domain of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of the ScaleIO Protection Domain for the configured storage.  # noqa: E501

        :return: The protection_domain of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._protection_domain

    @protection_domain.setter
    def protection_domain(self, protection_domain: str):
        """Sets the protection_domain of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of the ScaleIO Protection Domain for the configured storage.  # noqa: E501

        :param protection_domain: The protection_domain of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type protection_domain: str
        """

        self._protection_domain = protection_domain

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_ref(self) -> IoK8sApiCoreV1LocalObjectReference:
        """Gets the secret_ref of this IoK8sApiCoreV1ScaleIOVolumeSource.

        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.  # noqa: E501

        :return: The secret_ref of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: IoK8sApiCoreV1LocalObjectReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref: IoK8sApiCoreV1LocalObjectReference):
        """Sets the secret_ref of this IoK8sApiCoreV1ScaleIOVolumeSource.

        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.  # noqa: E501

        :param secret_ref: The secret_ref of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        """
        if secret_ref is None:
            raise ValueError("Invalid value for `secret_ref`, must not be `None`")  # noqa: E501

        self._secret_ref = secret_ref

    @property
    def ssl_enabled(self) -> bool:
        """Gets the ssl_enabled of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Flag to enable/disable SSL communication with Gateway, default false  # noqa: E501

        :return: The ssl_enabled of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled: bool):
        """Sets the ssl_enabled of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Flag to enable/disable SSL communication with Gateway, default false  # noqa: E501

        :param ssl_enabled: The ssl_enabled of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type ssl_enabled: bool
        """

        self._ssl_enabled = ssl_enabled

    @property
    def storage_mode(self) -> str:
        """Gets the storage_mode of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.  # noqa: E501

        :return: The storage_mode of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._storage_mode

    @storage_mode.setter
    def storage_mode(self, storage_mode: str):
        """Sets the storage_mode of this IoK8sApiCoreV1ScaleIOVolumeSource.

        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.  # noqa: E501

        :param storage_mode: The storage_mode of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type storage_mode: str
        """

        self._storage_mode = storage_mode

    @property
    def storage_pool(self) -> str:
        """Gets the storage_pool of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The ScaleIO Storage Pool associated with the protection domain.  # noqa: E501

        :return: The storage_pool of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._storage_pool

    @storage_pool.setter
    def storage_pool(self, storage_pool: str):
        """Sets the storage_pool of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The ScaleIO Storage Pool associated with the protection domain.  # noqa: E501

        :param storage_pool: The storage_pool of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type storage_pool: str
        """

        self._storage_pool = storage_pool

    @property
    def system(self) -> str:
        """Gets the system of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of the storage system as configured in ScaleIO.  # noqa: E501

        :return: The system of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system: str):
        """Sets the system of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of the storage system as configured in ScaleIO.  # noqa: E501

        :param system: The system of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type system: str
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501

        self._system = system

    @property
    def volume_name(self) -> str:
        """Gets the volume_name of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of a volume already created in the ScaleIO system that is associated with this volume source.  # noqa: E501

        :return: The volume_name of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name: str):
        """Sets the volume_name of this IoK8sApiCoreV1ScaleIOVolumeSource.

        The name of a volume already created in the ScaleIO system that is associated with this volume source.  # noqa: E501

        :param volume_name: The volume_name of this IoK8sApiCoreV1ScaleIOVolumeSource.
        :type volume_name: str
        """

        self._volume_name = volume_name
