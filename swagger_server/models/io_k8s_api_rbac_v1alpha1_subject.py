# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiRbacV1alpha1Subject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, kind: str=None, name: str=None, namespace: str=None):  # noqa: E501
        """IoK8sApiRbacV1alpha1Subject - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApiRbacV1alpha1Subject.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this IoK8sApiRbacV1alpha1Subject.  # noqa: E501
        :type kind: str
        :param name: The name of this IoK8sApiRbacV1alpha1Subject.  # noqa: E501
        :type name: str
        :param namespace: The namespace of this IoK8sApiRbacV1alpha1Subject.  # noqa: E501
        :type namespace: str
        """
        self.swagger_types = {
            'api_version': str,
            'kind': str,
            'name': str,
            'namespace': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'kind': 'kind',
            'name': 'name',
            'namespace': 'namespace'
        }

        self._api_version = api_version
        self._kind = kind
        self._name = name
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiRbacV1alpha1Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.rbac.v1alpha1.Subject of this IoK8sApiRbacV1alpha1Subject.  # noqa: E501
        :rtype: IoK8sApiRbacV1alpha1Subject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiRbacV1alpha1Subject.

        APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects.  # noqa: E501

        :return: The api_version of this IoK8sApiRbacV1alpha1Subject.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiRbacV1alpha1Subject.

        APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects.  # noqa: E501

        :param api_version: The api_version of this IoK8sApiRbacV1alpha1Subject.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiRbacV1alpha1Subject.

        Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.  # noqa: E501

        :return: The kind of this IoK8sApiRbacV1alpha1Subject.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiRbacV1alpha1Subject.

        Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.  # noqa: E501

        :param kind: The kind of this IoK8sApiRbacV1alpha1Subject.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiRbacV1alpha1Subject.

        Name of the object being referenced.  # noqa: E501

        :return: The name of this IoK8sApiRbacV1alpha1Subject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiRbacV1alpha1Subject.

        Name of the object being referenced.  # noqa: E501

        :param name: The name of this IoK8sApiRbacV1alpha1Subject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self) -> str:
        """Gets the namespace of this IoK8sApiRbacV1alpha1Subject.

        Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.  # noqa: E501

        :return: The namespace of this IoK8sApiRbacV1alpha1Subject.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace: str):
        """Sets the namespace of this IoK8sApiRbacV1alpha1Subject.

        Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.  # noqa: E501

        :param namespace: The namespace of this IoK8sApiRbacV1alpha1Subject.
        :type namespace: str
        """

        self._namespace = namespace
