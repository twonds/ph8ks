# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PodSecurityContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_group: int=None, run_as_group: int=None, run_as_non_root: bool=None, run_as_user: int=None, se_linux_options: IoK8sApiCoreV1SELinuxOptions=None, supplemental_groups: List[int]=None, sysctls: List[IoK8sApiCoreV1Sysctl]=None, windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions=None):  # noqa: E501
        """IoK8sApiCoreV1PodSecurityContext - a model defined in Swagger

        :param fs_group: The fs_group of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type fs_group: int
        :param run_as_group: The run_as_group of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type run_as_group: int
        :param run_as_non_root: The run_as_non_root of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type run_as_non_root: bool
        :param run_as_user: The run_as_user of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type run_as_user: int
        :param se_linux_options: The se_linux_options of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        :param supplemental_groups: The supplemental_groups of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type supplemental_groups: List[int]
        :param sysctls: The sysctls of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type sysctls: List[IoK8sApiCoreV1Sysctl]
        :param windows_options: The windows_options of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :type windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions
        """
        self.swagger_types = {
            'fs_group': int,
            'run_as_group': int,
            'run_as_non_root': bool,
            'run_as_user': int,
            'se_linux_options': IoK8sApiCoreV1SELinuxOptions,
            'supplemental_groups': List[int],
            'sysctls': List[IoK8sApiCoreV1Sysctl],
            'windows_options': IoK8sApiCoreV1WindowsSecurityContextOptions
        }

        self.attribute_map = {
            'fs_group': 'fsGroup',
            'run_as_group': 'runAsGroup',
            'run_as_non_root': 'runAsNonRoot',
            'run_as_user': 'runAsUser',
            'se_linux_options': 'seLinuxOptions',
            'supplemental_groups': 'supplementalGroups',
            'sysctls': 'sysctls',
            'windows_options': 'windowsOptions'
        }

        self._fs_group = fs_group
        self._run_as_group = run_as_group
        self._run_as_non_root = run_as_non_root
        self._run_as_user = run_as_user
        self._se_linux_options = se_linux_options
        self._supplemental_groups = supplemental_groups
        self._sysctls = sysctls
        self._windows_options = windows_options

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PodSecurityContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PodSecurityContext of this IoK8sApiCoreV1PodSecurityContext.  # noqa: E501
        :rtype: IoK8sApiCoreV1PodSecurityContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_group(self) -> int:
        """Gets the fs_group of this IoK8sApiCoreV1PodSecurityContext.

        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.  # noqa: E501

        :return: The fs_group of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: int
        """
        return self._fs_group

    @fs_group.setter
    def fs_group(self, fs_group: int):
        """Sets the fs_group of this IoK8sApiCoreV1PodSecurityContext.

        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.  # noqa: E501

        :param fs_group: The fs_group of this IoK8sApiCoreV1PodSecurityContext.
        :type fs_group: int
        """

        self._fs_group = fs_group

    @property
    def run_as_group(self) -> int:
        """Gets the run_as_group of this IoK8sApiCoreV1PodSecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :return: The run_as_group of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: int
        """
        return self._run_as_group

    @run_as_group.setter
    def run_as_group(self, run_as_group: int):
        """Sets the run_as_group of this IoK8sApiCoreV1PodSecurityContext.

        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :param run_as_group: The run_as_group of this IoK8sApiCoreV1PodSecurityContext.
        :type run_as_group: int
        """

        self._run_as_group = run_as_group

    @property
    def run_as_non_root(self) -> bool:
        """Gets the run_as_non_root of this IoK8sApiCoreV1PodSecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The run_as_non_root of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: bool
        """
        return self._run_as_non_root

    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root: bool):
        """Sets the run_as_non_root of this IoK8sApiCoreV1PodSecurityContext.

        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param run_as_non_root: The run_as_non_root of this IoK8sApiCoreV1PodSecurityContext.
        :type run_as_non_root: bool
        """

        self._run_as_non_root = run_as_non_root

    @property
    def run_as_user(self) -> int:
        """Gets the run_as_user of this IoK8sApiCoreV1PodSecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :return: The run_as_user of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: int
        """
        return self._run_as_user

    @run_as_user.setter
    def run_as_user(self, run_as_user: int):
        """Sets the run_as_user of this IoK8sApiCoreV1PodSecurityContext.

        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :param run_as_user: The run_as_user of this IoK8sApiCoreV1PodSecurityContext.
        :type run_as_user: int
        """

        self._run_as_user = run_as_user

    @property
    def se_linux_options(self) -> IoK8sApiCoreV1SELinuxOptions:
        """Gets the se_linux_options of this IoK8sApiCoreV1PodSecurityContext.

        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :return: The se_linux_options of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: IoK8sApiCoreV1SELinuxOptions
        """
        return self._se_linux_options

    @se_linux_options.setter
    def se_linux_options(self, se_linux_options: IoK8sApiCoreV1SELinuxOptions):
        """Sets the se_linux_options of this IoK8sApiCoreV1PodSecurityContext.

        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.  # noqa: E501

        :param se_linux_options: The se_linux_options of this IoK8sApiCoreV1PodSecurityContext.
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        """

        self._se_linux_options = se_linux_options

    @property
    def supplemental_groups(self) -> List[int]:
        """Gets the supplemental_groups of this IoK8sApiCoreV1PodSecurityContext.

        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.  # noqa: E501

        :return: The supplemental_groups of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: List[int]
        """
        return self._supplemental_groups

    @supplemental_groups.setter
    def supplemental_groups(self, supplemental_groups: List[int]):
        """Sets the supplemental_groups of this IoK8sApiCoreV1PodSecurityContext.

        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.  # noqa: E501

        :param supplemental_groups: The supplemental_groups of this IoK8sApiCoreV1PodSecurityContext.
        :type supplemental_groups: List[int]
        """

        self._supplemental_groups = supplemental_groups

    @property
    def sysctls(self) -> List[IoK8sApiCoreV1Sysctl]:
        """Gets the sysctls of this IoK8sApiCoreV1PodSecurityContext.

        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.  # noqa: E501

        :return: The sysctls of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: List[IoK8sApiCoreV1Sysctl]
        """
        return self._sysctls

    @sysctls.setter
    def sysctls(self, sysctls: List[IoK8sApiCoreV1Sysctl]):
        """Sets the sysctls of this IoK8sApiCoreV1PodSecurityContext.

        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.  # noqa: E501

        :param sysctls: The sysctls of this IoK8sApiCoreV1PodSecurityContext.
        :type sysctls: List[IoK8sApiCoreV1Sysctl]
        """

        self._sysctls = sysctls

    @property
    def windows_options(self) -> IoK8sApiCoreV1WindowsSecurityContextOptions:
        """Gets the windows_options of this IoK8sApiCoreV1PodSecurityContext.

        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :return: The windows_options of this IoK8sApiCoreV1PodSecurityContext.
        :rtype: IoK8sApiCoreV1WindowsSecurityContextOptions
        """
        return self._windows_options

    @windows_options.setter
    def windows_options(self, windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions):
        """Sets the windows_options of this IoK8sApiCoreV1PodSecurityContext.

        The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.  # noqa: E501

        :param windows_options: The windows_options of this IoK8sApiCoreV1PodSecurityContext.
        :type windows_options: IoK8sApiCoreV1WindowsSecurityContextOptions
        """

        self._windows_options = windows_options
