# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1Toleration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, effect: str=None, key: str=None, operator: str=None, toleration_seconds: int=None, value: str=None):  # noqa: E501
        """IoK8sApiCoreV1Toleration - a model defined in Swagger

        :param effect: The effect of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :type effect: str
        :param key: The key of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :type key: str
        :param operator: The operator of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :type operator: str
        :param toleration_seconds: The toleration_seconds of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :type toleration_seconds: int
        :param value: The value of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'effect': str,
            'key': str,
            'operator': str,
            'toleration_seconds': int,
            'value': str
        }

        self.attribute_map = {
            'effect': 'effect',
            'key': 'key',
            'operator': 'operator',
            'toleration_seconds': 'tolerationSeconds',
            'value': 'value'
        }

        self._effect = effect
        self._key = key
        self._operator = operator
        self._toleration_seconds = toleration_seconds
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1Toleration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.Toleration of this IoK8sApiCoreV1Toleration.  # noqa: E501
        :rtype: IoK8sApiCoreV1Toleration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect(self) -> str:
        """Gets the effect of this IoK8sApiCoreV1Toleration.

        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.  # noqa: E501

        :return: The effect of this IoK8sApiCoreV1Toleration.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect: str):
        """Sets the effect of this IoK8sApiCoreV1Toleration.

        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.  # noqa: E501

        :param effect: The effect of this IoK8sApiCoreV1Toleration.
        :type effect: str
        """

        self._effect = effect

    @property
    def key(self) -> str:
        """Gets the key of this IoK8sApiCoreV1Toleration.

        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.  # noqa: E501

        :return: The key of this IoK8sApiCoreV1Toleration.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this IoK8sApiCoreV1Toleration.

        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.  # noqa: E501

        :param key: The key of this IoK8sApiCoreV1Toleration.
        :type key: str
        """

        self._key = key

    @property
    def operator(self) -> str:
        """Gets the operator of this IoK8sApiCoreV1Toleration.

        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.  # noqa: E501

        :return: The operator of this IoK8sApiCoreV1Toleration.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this IoK8sApiCoreV1Toleration.

        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.  # noqa: E501

        :param operator: The operator of this IoK8sApiCoreV1Toleration.
        :type operator: str
        """

        self._operator = operator

    @property
    def toleration_seconds(self) -> int:
        """Gets the toleration_seconds of this IoK8sApiCoreV1Toleration.

        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.  # noqa: E501

        :return: The toleration_seconds of this IoK8sApiCoreV1Toleration.
        :rtype: int
        """
        return self._toleration_seconds

    @toleration_seconds.setter
    def toleration_seconds(self, toleration_seconds: int):
        """Sets the toleration_seconds of this IoK8sApiCoreV1Toleration.

        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.  # noqa: E501

        :param toleration_seconds: The toleration_seconds of this IoK8sApiCoreV1Toleration.
        :type toleration_seconds: int
        """

        self._toleration_seconds = toleration_seconds

    @property
    def value(self) -> str:
        """Gets the value of this IoK8sApiCoreV1Toleration.

        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.  # noqa: E501

        :return: The value of this IoK8sApiCoreV1Toleration.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this IoK8sApiCoreV1Toleration.

        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.  # noqa: E501

        :param value: The value of this IoK8sApiCoreV1Toleration.
        :type value: str
        """

        self._value = value
