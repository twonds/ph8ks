# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1WeightedPodAffinityTerm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, pod_affinity_term: IoK8sApiCoreV1PodAffinityTerm=None, weight: int=None):  # noqa: E501
        """IoK8sApiCoreV1WeightedPodAffinityTerm - a model defined in Swagger

        :param pod_affinity_term: The pod_affinity_term of this IoK8sApiCoreV1WeightedPodAffinityTerm.  # noqa: E501
        :type pod_affinity_term: IoK8sApiCoreV1PodAffinityTerm
        :param weight: The weight of this IoK8sApiCoreV1WeightedPodAffinityTerm.  # noqa: E501
        :type weight: int
        """
        self.swagger_types = {
            'pod_affinity_term': IoK8sApiCoreV1PodAffinityTerm,
            'weight': int
        }

        self.attribute_map = {
            'pod_affinity_term': 'podAffinityTerm',
            'weight': 'weight'
        }

        self._pod_affinity_term = pod_affinity_term
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1WeightedPodAffinityTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.WeightedPodAffinityTerm of this IoK8sApiCoreV1WeightedPodAffinityTerm.  # noqa: E501
        :rtype: IoK8sApiCoreV1WeightedPodAffinityTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pod_affinity_term(self) -> IoK8sApiCoreV1PodAffinityTerm:
        """Gets the pod_affinity_term of this IoK8sApiCoreV1WeightedPodAffinityTerm.

        Required. A pod affinity term, associated with the corresponding weight.  # noqa: E501

        :return: The pod_affinity_term of this IoK8sApiCoreV1WeightedPodAffinityTerm.
        :rtype: IoK8sApiCoreV1PodAffinityTerm
        """
        return self._pod_affinity_term

    @pod_affinity_term.setter
    def pod_affinity_term(self, pod_affinity_term: IoK8sApiCoreV1PodAffinityTerm):
        """Sets the pod_affinity_term of this IoK8sApiCoreV1WeightedPodAffinityTerm.

        Required. A pod affinity term, associated with the corresponding weight.  # noqa: E501

        :param pod_affinity_term: The pod_affinity_term of this IoK8sApiCoreV1WeightedPodAffinityTerm.
        :type pod_affinity_term: IoK8sApiCoreV1PodAffinityTerm
        """
        if pod_affinity_term is None:
            raise ValueError("Invalid value for `pod_affinity_term`, must not be `None`")  # noqa: E501

        self._pod_affinity_term = pod_affinity_term

    @property
    def weight(self) -> int:
        """Gets the weight of this IoK8sApiCoreV1WeightedPodAffinityTerm.

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.  # noqa: E501

        :return: The weight of this IoK8sApiCoreV1WeightedPodAffinityTerm.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """Sets the weight of this IoK8sApiCoreV1WeightedPodAffinityTerm.

        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.  # noqa: E501

        :param weight: The weight of this IoK8sApiCoreV1WeightedPodAffinityTerm.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight
