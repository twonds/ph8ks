# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiRbacV1beta1PolicyRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_groups: List[str]=None, non_resource_ur_ls: List[str]=None, resource_names: List[str]=None, resources: List[str]=None, verbs: List[str]=None):  # noqa: E501
        """IoK8sApiRbacV1beta1PolicyRule - a model defined in Swagger

        :param api_groups: The api_groups of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :type api_groups: List[str]
        :param non_resource_ur_ls: The non_resource_ur_ls of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :type non_resource_ur_ls: List[str]
        :param resource_names: The resource_names of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :type resource_names: List[str]
        :param resources: The resources of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :type resources: List[str]
        :param verbs: The verbs of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :type verbs: List[str]
        """
        self.swagger_types = {
            'api_groups': List[str],
            'non_resource_ur_ls': List[str],
            'resource_names': List[str],
            'resources': List[str],
            'verbs': List[str]
        }

        self.attribute_map = {
            'api_groups': 'apiGroups',
            'non_resource_ur_ls': 'nonResourceURLs',
            'resource_names': 'resourceNames',
            'resources': 'resources',
            'verbs': 'verbs'
        }

        self._api_groups = api_groups
        self._non_resource_ur_ls = non_resource_ur_ls
        self._resource_names = resource_names
        self._resources = resources
        self._verbs = verbs

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiRbacV1beta1PolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.rbac.v1beta1.PolicyRule of this IoK8sApiRbacV1beta1PolicyRule.  # noqa: E501
        :rtype: IoK8sApiRbacV1beta1PolicyRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_groups(self) -> List[str]:
        """Gets the api_groups of this IoK8sApiRbacV1beta1PolicyRule.

        APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  # noqa: E501

        :return: The api_groups of this IoK8sApiRbacV1beta1PolicyRule.
        :rtype: List[str]
        """
        return self._api_groups

    @api_groups.setter
    def api_groups(self, api_groups: List[str]):
        """Sets the api_groups of this IoK8sApiRbacV1beta1PolicyRule.

        APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  # noqa: E501

        :param api_groups: The api_groups of this IoK8sApiRbacV1beta1PolicyRule.
        :type api_groups: List[str]
        """

        self._api_groups = api_groups

    @property
    def non_resource_ur_ls(self) -> List[str]:
        """Gets the non_resource_ur_ls of this IoK8sApiRbacV1beta1PolicyRule.

        NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.  # noqa: E501

        :return: The non_resource_ur_ls of this IoK8sApiRbacV1beta1PolicyRule.
        :rtype: List[str]
        """
        return self._non_resource_ur_ls

    @non_resource_ur_ls.setter
    def non_resource_ur_ls(self, non_resource_ur_ls: List[str]):
        """Sets the non_resource_ur_ls of this IoK8sApiRbacV1beta1PolicyRule.

        NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.  # noqa: E501

        :param non_resource_ur_ls: The non_resource_ur_ls of this IoK8sApiRbacV1beta1PolicyRule.
        :type non_resource_ur_ls: List[str]
        """

        self._non_resource_ur_ls = non_resource_ur_ls

    @property
    def resource_names(self) -> List[str]:
        """Gets the resource_names of this IoK8sApiRbacV1beta1PolicyRule.

        ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  # noqa: E501

        :return: The resource_names of this IoK8sApiRbacV1beta1PolicyRule.
        :rtype: List[str]
        """
        return self._resource_names

    @resource_names.setter
    def resource_names(self, resource_names: List[str]):
        """Sets the resource_names of this IoK8sApiRbacV1beta1PolicyRule.

        ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  # noqa: E501

        :param resource_names: The resource_names of this IoK8sApiRbacV1beta1PolicyRule.
        :type resource_names: List[str]
        """

        self._resource_names = resource_names

    @property
    def resources(self) -> List[str]:
        """Gets the resources of this IoK8sApiRbacV1beta1PolicyRule.

        Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.  # noqa: E501

        :return: The resources of this IoK8sApiRbacV1beta1PolicyRule.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources: List[str]):
        """Sets the resources of this IoK8sApiRbacV1beta1PolicyRule.

        Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.  # noqa: E501

        :param resources: The resources of this IoK8sApiRbacV1beta1PolicyRule.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def verbs(self) -> List[str]:
        """Gets the verbs of this IoK8sApiRbacV1beta1PolicyRule.

        Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.  # noqa: E501

        :return: The verbs of this IoK8sApiRbacV1beta1PolicyRule.
        :rtype: List[str]
        """
        return self._verbs

    @verbs.setter
    def verbs(self, verbs: List[str]):
        """Sets the verbs of this IoK8sApiRbacV1beta1PolicyRule.

        Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.  # noqa: E501

        :param verbs: The verbs of this IoK8sApiRbacV1beta1PolicyRule.
        :type verbs: List[str]
        """
        if verbs is None:
            raise ValueError("Invalid value for `verbs`, must not be `None`")  # noqa: E501

        self._verbs = verbs
