# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1VolumeMount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mount_path: str=None, mount_propagation: str=None, name: str=None, read_only: bool=None, sub_path: str=None, sub_path_expr: str=None):  # noqa: E501
        """IoK8sApiCoreV1VolumeMount - a model defined in Swagger

        :param mount_path: The mount_path of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type mount_path: str
        :param mount_propagation: The mount_propagation of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type mount_propagation: str
        :param name: The name of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type name: str
        :param read_only: The read_only of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type read_only: bool
        :param sub_path: The sub_path of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type sub_path: str
        :param sub_path_expr: The sub_path_expr of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :type sub_path_expr: str
        """
        self.swagger_types = {
            'mount_path': str,
            'mount_propagation': str,
            'name': str,
            'read_only': bool,
            'sub_path': str,
            'sub_path_expr': str
        }

        self.attribute_map = {
            'mount_path': 'mountPath',
            'mount_propagation': 'mountPropagation',
            'name': 'name',
            'read_only': 'readOnly',
            'sub_path': 'subPath',
            'sub_path_expr': 'subPathExpr'
        }

        self._mount_path = mount_path
        self._mount_propagation = mount_propagation
        self._name = name
        self._read_only = read_only
        self._sub_path = sub_path
        self._sub_path_expr = sub_path_expr

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1VolumeMount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.VolumeMount of this IoK8sApiCoreV1VolumeMount.  # noqa: E501
        :rtype: IoK8sApiCoreV1VolumeMount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_path(self) -> str:
        """Gets the mount_path of this IoK8sApiCoreV1VolumeMount.

        Path within the container at which the volume should be mounted.  Must not contain ':'.  # noqa: E501

        :return: The mount_path of this IoK8sApiCoreV1VolumeMount.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path: str):
        """Sets the mount_path of this IoK8sApiCoreV1VolumeMount.

        Path within the container at which the volume should be mounted.  Must not contain ':'.  # noqa: E501

        :param mount_path: The mount_path of this IoK8sApiCoreV1VolumeMount.
        :type mount_path: str
        """
        if mount_path is None:
            raise ValueError("Invalid value for `mount_path`, must not be `None`")  # noqa: E501

        self._mount_path = mount_path

    @property
    def mount_propagation(self) -> str:
        """Gets the mount_propagation of this IoK8sApiCoreV1VolumeMount.

        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.  # noqa: E501

        :return: The mount_propagation of this IoK8sApiCoreV1VolumeMount.
        :rtype: str
        """
        return self._mount_propagation

    @mount_propagation.setter
    def mount_propagation(self, mount_propagation: str):
        """Sets the mount_propagation of this IoK8sApiCoreV1VolumeMount.

        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.  # noqa: E501

        :param mount_propagation: The mount_propagation of this IoK8sApiCoreV1VolumeMount.
        :type mount_propagation: str
        """

        self._mount_propagation = mount_propagation

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1VolumeMount.

        This must match the Name of a Volume.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1VolumeMount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1VolumeMount.

        This must match the Name of a Volume.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1VolumeMount.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1VolumeMount.

        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1VolumeMount.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1VolumeMount.

        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1VolumeMount.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def sub_path(self) -> str:
        """Gets the sub_path of this IoK8sApiCoreV1VolumeMount.

        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).  # noqa: E501

        :return: The sub_path of this IoK8sApiCoreV1VolumeMount.
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path: str):
        """Sets the sub_path of this IoK8sApiCoreV1VolumeMount.

        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).  # noqa: E501

        :param sub_path: The sub_path of this IoK8sApiCoreV1VolumeMount.
        :type sub_path: str
        """

        self._sub_path = sub_path

    @property
    def sub_path_expr(self) -> str:
        """Gets the sub_path_expr of this IoK8sApiCoreV1VolumeMount.

        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.  # noqa: E501

        :return: The sub_path_expr of this IoK8sApiCoreV1VolumeMount.
        :rtype: str
        """
        return self._sub_path_expr

    @sub_path_expr.setter
    def sub_path_expr(self, sub_path_expr: str):
        """Sets the sub_path_expr of this IoK8sApiCoreV1VolumeMount.

        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.  # noqa: E501

        :param sub_path_expr: The sub_path_expr of this IoK8sApiCoreV1VolumeMount.
        :type sub_path_expr: str
        """

        self._sub_path_expr = sub_path_expr
