# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1QuobyteVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, read_only: bool=None, registry: str=None, tenant: str=None, user: str=None, volume: str=None):  # noqa: E501
        """IoK8sApiCoreV1QuobyteVolumeSource - a model defined in Swagger

        :param group: The group of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type group: str
        :param read_only: The read_only of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type read_only: bool
        :param registry: The registry of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type registry: str
        :param tenant: The tenant of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type tenant: str
        :param user: The user of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type user: str
        :param volume: The volume of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :type volume: str
        """
        self.swagger_types = {
            'group': str,
            'read_only': bool,
            'registry': str,
            'tenant': str,
            'user': str,
            'volume': str
        }

        self.attribute_map = {
            'group': 'group',
            'read_only': 'readOnly',
            'registry': 'registry',
            'tenant': 'tenant',
            'user': 'user',
            'volume': 'volume'
        }

        self._group = group
        self._read_only = read_only
        self._registry = registry
        self._tenant = tenant
        self._user = user
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1QuobyteVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.QuobyteVolumeSource of this IoK8sApiCoreV1QuobyteVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1QuobyteVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> str:
        """Gets the group of this IoK8sApiCoreV1QuobyteVolumeSource.

        Group to map volume access to Default is no group  # noqa: E501

        :return: The group of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this IoK8sApiCoreV1QuobyteVolumeSource.

        Group to map volume access to Default is no group  # noqa: E501

        :param group: The group of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type group: str
        """

        self._group = group

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1QuobyteVolumeSource.

        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1QuobyteVolumeSource.

        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def registry(self) -> str:
        """Gets the registry of this IoK8sApiCoreV1QuobyteVolumeSource.

        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes  # noqa: E501

        :return: The registry of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry: str):
        """Sets the registry of this IoK8sApiCoreV1QuobyteVolumeSource.

        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes  # noqa: E501

        :param registry: The registry of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type registry: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")  # noqa: E501

        self._registry = registry

    @property
    def tenant(self) -> str:
        """Gets the tenant of this IoK8sApiCoreV1QuobyteVolumeSource.

        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin  # noqa: E501

        :return: The tenant of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant: str):
        """Sets the tenant of this IoK8sApiCoreV1QuobyteVolumeSource.

        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin  # noqa: E501

        :param tenant: The tenant of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type tenant: str
        """

        self._tenant = tenant

    @property
    def user(self) -> str:
        """Gets the user of this IoK8sApiCoreV1QuobyteVolumeSource.

        User to map volume access to Defaults to serivceaccount user  # noqa: E501

        :return: The user of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this IoK8sApiCoreV1QuobyteVolumeSource.

        User to map volume access to Defaults to serivceaccount user  # noqa: E501

        :param user: The user of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type user: str
        """

        self._user = user

    @property
    def volume(self) -> str:
        """Gets the volume of this IoK8sApiCoreV1QuobyteVolumeSource.

        Volume is a string that references an already created Quobyte volume by name.  # noqa: E501

        :return: The volume of this IoK8sApiCoreV1QuobyteVolumeSource.
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume: str):
        """Sets the volume of this IoK8sApiCoreV1QuobyteVolumeSource.

        Volume is a string that references an already created Quobyte volume by name.  # noqa: E501

        :param volume: The volume of this IoK8sApiCoreV1QuobyteVolumeSource.
        :type volume: str
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume
