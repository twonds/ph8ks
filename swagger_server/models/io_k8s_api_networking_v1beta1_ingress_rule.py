# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNetworkingV1beta1IngressRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, http: IoK8sApiNetworkingV1beta1HTTPIngressRuleValue=None):  # noqa: E501
        """IoK8sApiNetworkingV1beta1IngressRule - a model defined in Swagger

        :param host: The host of this IoK8sApiNetworkingV1beta1IngressRule.  # noqa: E501
        :type host: str
        :param http: The http of this IoK8sApiNetworkingV1beta1IngressRule.  # noqa: E501
        :type http: IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
        """
        self.swagger_types = {
            'host': str,
            'http': IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
        }

        self.attribute_map = {
            'host': 'host',
            'http': 'http'
        }

        self._host = host
        self._http = http

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNetworkingV1beta1IngressRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.networking.v1beta1.IngressRule of this IoK8sApiNetworkingV1beta1IngressRule.  # noqa: E501
        :rtype: IoK8sApiNetworkingV1beta1IngressRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self) -> str:
        """Gets the host of this IoK8sApiNetworkingV1beta1IngressRule.

        Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the    IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.  # noqa: E501

        :return: The host of this IoK8sApiNetworkingV1beta1IngressRule.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this IoK8sApiNetworkingV1beta1IngressRule.

        Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the    IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.  # noqa: E501

        :param host: The host of this IoK8sApiNetworkingV1beta1IngressRule.
        :type host: str
        """

        self._host = host

    @property
    def http(self) -> IoK8sApiNetworkingV1beta1HTTPIngressRuleValue:
        """Gets the http of this IoK8sApiNetworkingV1beta1IngressRule.


        :return: The http of this IoK8sApiNetworkingV1beta1IngressRule.
        :rtype: IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
        """
        return self._http

    @http.setter
    def http(self, http: IoK8sApiNetworkingV1beta1HTTPIngressRuleValue):
        """Sets the http of this IoK8sApiNetworkingV1beta1IngressRule.


        :param http: The http of this IoK8sApiNetworkingV1beta1IngressRule.
        :type http: IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
        """

        self._http = http
