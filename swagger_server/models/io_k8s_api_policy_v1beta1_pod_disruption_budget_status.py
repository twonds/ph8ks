# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, current_healthy: int=None, desired_healthy: int=None, disrupted_pods: Dict[str, IoK8sApimachineryPkgApisMetaV1Time]=None, disruptions_allowed: int=None, expected_pods: int=None, observed_generation: int=None):  # noqa: E501
        """IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus - a model defined in Swagger

        :param current_healthy: The current_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type current_healthy: int
        :param desired_healthy: The desired_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type desired_healthy: int
        :param disrupted_pods: The disrupted_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type disrupted_pods: Dict[str, IoK8sApimachineryPkgApisMetaV1Time]
        :param disruptions_allowed: The disruptions_allowed of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type disruptions_allowed: int
        :param expected_pods: The expected_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type expected_pods: int
        :param observed_generation: The observed_generation of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :type observed_generation: int
        """
        self.swagger_types = {
            'current_healthy': int,
            'desired_healthy': int,
            'disrupted_pods': Dict[str, IoK8sApimachineryPkgApisMetaV1Time],
            'disruptions_allowed': int,
            'expected_pods': int,
            'observed_generation': int
        }

        self.attribute_map = {
            'current_healthy': 'currentHealthy',
            'desired_healthy': 'desiredHealthy',
            'disrupted_pods': 'disruptedPods',
            'disruptions_allowed': 'disruptionsAllowed',
            'expected_pods': 'expectedPods',
            'observed_generation': 'observedGeneration'
        }

        self._current_healthy = current_healthy
        self._desired_healthy = desired_healthy
        self._disrupted_pods = disrupted_pods
        self._disruptions_allowed = disruptions_allowed
        self._expected_pods = expected_pods
        self._observed_generation = observed_generation

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.  # noqa: E501
        :rtype: IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_healthy(self) -> int:
        """Gets the current_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        current number of healthy pods  # noqa: E501

        :return: The current_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._current_healthy

    @current_healthy.setter
    def current_healthy(self, current_healthy: int):
        """Sets the current_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        current number of healthy pods  # noqa: E501

        :param current_healthy: The current_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type current_healthy: int
        """
        if current_healthy is None:
            raise ValueError("Invalid value for `current_healthy`, must not be `None`")  # noqa: E501

        self._current_healthy = current_healthy

    @property
    def desired_healthy(self) -> int:
        """Gets the desired_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        minimum desired number of healthy pods  # noqa: E501

        :return: The desired_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._desired_healthy

    @desired_healthy.setter
    def desired_healthy(self, desired_healthy: int):
        """Sets the desired_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        minimum desired number of healthy pods  # noqa: E501

        :param desired_healthy: The desired_healthy of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type desired_healthy: int
        """
        if desired_healthy is None:
            raise ValueError("Invalid value for `desired_healthy`, must not be `None`")  # noqa: E501

        self._desired_healthy = desired_healthy

    @property
    def disrupted_pods(self) -> Dict[str, IoK8sApimachineryPkgApisMetaV1Time]:
        """Gets the disrupted_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.  # noqa: E501

        :return: The disrupted_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApisMetaV1Time]
        """
        return self._disrupted_pods

    @disrupted_pods.setter
    def disrupted_pods(self, disrupted_pods: Dict[str, IoK8sApimachineryPkgApisMetaV1Time]):
        """Sets the disrupted_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.  # noqa: E501

        :param disrupted_pods: The disrupted_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type disrupted_pods: Dict[str, IoK8sApimachineryPkgApisMetaV1Time]
        """

        self._disrupted_pods = disrupted_pods

    @property
    def disruptions_allowed(self) -> int:
        """Gets the disruptions_allowed of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        Number of pod disruptions that are currently allowed.  # noqa: E501

        :return: The disruptions_allowed of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._disruptions_allowed

    @disruptions_allowed.setter
    def disruptions_allowed(self, disruptions_allowed: int):
        """Sets the disruptions_allowed of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        Number of pod disruptions that are currently allowed.  # noqa: E501

        :param disruptions_allowed: The disruptions_allowed of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type disruptions_allowed: int
        """
        if disruptions_allowed is None:
            raise ValueError("Invalid value for `disruptions_allowed`, must not be `None`")  # noqa: E501

        self._disruptions_allowed = disruptions_allowed

    @property
    def expected_pods(self) -> int:
        """Gets the expected_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        total number of pods counted by this disruption budget  # noqa: E501

        :return: The expected_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._expected_pods

    @expected_pods.setter
    def expected_pods(self, expected_pods: int):
        """Sets the expected_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        total number of pods counted by this disruption budget  # noqa: E501

        :param expected_pods: The expected_pods of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type expected_pods: int
        """
        if expected_pods is None:
            raise ValueError("Invalid value for `expected_pods`, must not be `None`")  # noqa: E501

        self._expected_pods = expected_pods

    @property
    def observed_generation(self) -> int:
        """Gets the observed_generation of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.  # noqa: E501

        :return: The observed_generation of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation: int):
        """Sets the observed_generation of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.

        Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.  # noqa: E501

        :param observed_generation: The observed_generation of this IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation
