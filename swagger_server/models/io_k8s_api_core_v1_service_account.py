# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ServiceAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, automount_service_account_token: bool=None, image_pull_secrets: List[IoK8sApiCoreV1LocalObjectReference]=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, secrets: List[IoK8sApiCoreV1ObjectReference]=None):  # noqa: E501
        """IoK8sApiCoreV1ServiceAccount - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type api_version: str
        :param automount_service_account_token: The automount_service_account_token of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type automount_service_account_token: bool
        :param image_pull_secrets: The image_pull_secrets of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type image_pull_secrets: List[IoK8sApiCoreV1LocalObjectReference]
        :param kind: The kind of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param secrets: The secrets of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :type secrets: List[IoK8sApiCoreV1ObjectReference]
        """
        self.swagger_types = {
            'api_version': str,
            'automount_service_account_token': bool,
            'image_pull_secrets': List[IoK8sApiCoreV1LocalObjectReference],
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'secrets': List[IoK8sApiCoreV1ObjectReference]
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'automount_service_account_token': 'automountServiceAccountToken',
            'image_pull_secrets': 'imagePullSecrets',
            'kind': 'kind',
            'metadata': 'metadata',
            'secrets': 'secrets'
        }

        self._api_version = api_version
        self._automount_service_account_token = automount_service_account_token
        self._image_pull_secrets = image_pull_secrets
        self._kind = kind
        self._metadata = metadata
        self._secrets = secrets

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ServiceAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ServiceAccount of this IoK8sApiCoreV1ServiceAccount.  # noqa: E501
        :rtype: IoK8sApiCoreV1ServiceAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiCoreV1ServiceAccount.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiCoreV1ServiceAccount.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiCoreV1ServiceAccount.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiCoreV1ServiceAccount.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def automount_service_account_token(self) -> bool:
        """Gets the automount_service_account_token of this IoK8sApiCoreV1ServiceAccount.

        AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.  # noqa: E501

        :return: The automount_service_account_token of this IoK8sApiCoreV1ServiceAccount.
        :rtype: bool
        """
        return self._automount_service_account_token

    @automount_service_account_token.setter
    def automount_service_account_token(self, automount_service_account_token: bool):
        """Sets the automount_service_account_token of this IoK8sApiCoreV1ServiceAccount.

        AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.  # noqa: E501

        :param automount_service_account_token: The automount_service_account_token of this IoK8sApiCoreV1ServiceAccount.
        :type automount_service_account_token: bool
        """

        self._automount_service_account_token = automount_service_account_token

    @property
    def image_pull_secrets(self) -> List[IoK8sApiCoreV1LocalObjectReference]:
        """Gets the image_pull_secrets of this IoK8sApiCoreV1ServiceAccount.

        ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this IoK8sApiCoreV1ServiceAccount.
        :rtype: List[IoK8sApiCoreV1LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets: List[IoK8sApiCoreV1LocalObjectReference]):
        """Sets the image_pull_secrets of this IoK8sApiCoreV1ServiceAccount.

        ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this IoK8sApiCoreV1ServiceAccount.
        :type image_pull_secrets: List[IoK8sApiCoreV1LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiCoreV1ServiceAccount.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiCoreV1ServiceAccount.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiCoreV1ServiceAccount.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiCoreV1ServiceAccount.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiCoreV1ServiceAccount.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The metadata of this IoK8sApiCoreV1ServiceAccount.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiCoreV1ServiceAccount.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param metadata: The metadata of this IoK8sApiCoreV1ServiceAccount.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def secrets(self) -> List[IoK8sApiCoreV1ObjectReference]:
        """Gets the secrets of this IoK8sApiCoreV1ServiceAccount.

        Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret  # noqa: E501

        :return: The secrets of this IoK8sApiCoreV1ServiceAccount.
        :rtype: List[IoK8sApiCoreV1ObjectReference]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets: List[IoK8sApiCoreV1ObjectReference]):
        """Sets the secrets of this IoK8sApiCoreV1ServiceAccount.

        Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret  # noqa: E501

        :param secrets: The secrets of this IoK8sApiCoreV1ServiceAccount.
        :type secrets: List[IoK8sApiCoreV1ObjectReference]
        """

        self._secrets = secrets
