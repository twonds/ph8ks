# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiDiscoveryV1beta1EndpointSlice(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address_type: str=None, api_version: str=None, endpoints: List[IoK8sApiDiscoveryV1beta1Endpoint]=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, ports: List[IoK8sApiDiscoveryV1beta1EndpointPort]=None):  # noqa: E501
        """IoK8sApiDiscoveryV1beta1EndpointSlice - a model defined in Swagger

        :param address_type: The address_type of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type address_type: str
        :param api_version: The api_version of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type api_version: str
        :param endpoints: The endpoints of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type endpoints: List[IoK8sApiDiscoveryV1beta1Endpoint]
        :param kind: The kind of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param ports: The ports of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :type ports: List[IoK8sApiDiscoveryV1beta1EndpointPort]
        """
        self.swagger_types = {
            'address_type': str,
            'api_version': str,
            'endpoints': List[IoK8sApiDiscoveryV1beta1Endpoint],
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'ports': List[IoK8sApiDiscoveryV1beta1EndpointPort]
        }

        self.attribute_map = {
            'address_type': 'addressType',
            'api_version': 'apiVersion',
            'endpoints': 'endpoints',
            'kind': 'kind',
            'metadata': 'metadata',
            'ports': 'ports'
        }

        self._address_type = address_type
        self._api_version = api_version
        self._endpoints = endpoints
        self._kind = kind
        self._metadata = metadata
        self._ports = ports

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiDiscoveryV1beta1EndpointSlice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.discovery.v1beta1.EndpointSlice of this IoK8sApiDiscoveryV1beta1EndpointSlice.  # noqa: E501
        :rtype: IoK8sApiDiscoveryV1beta1EndpointSlice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_type(self) -> str:
        """Gets the address_type of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.  # noqa: E501

        :return: The address_type of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type: str):
        """Sets the address_type of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.  # noqa: E501

        :param address_type: The address_type of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type address_type: str
        """
        if address_type is None:
            raise ValueError("Invalid value for `address_type`, must not be `None`")  # noqa: E501

        self._address_type = address_type

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def endpoints(self) -> List[IoK8sApiDiscoveryV1beta1Endpoint]:
        """Gets the endpoints of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.  # noqa: E501

        :return: The endpoints of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: List[IoK8sApiDiscoveryV1beta1Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints: List[IoK8sApiDiscoveryV1beta1Endpoint]):
        """Sets the endpoints of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.  # noqa: E501

        :param endpoints: The endpoints of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type endpoints: List[IoK8sApiDiscoveryV1beta1Endpoint]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        Standard object's metadata.  # noqa: E501

        :return: The metadata of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        Standard object's metadata.  # noqa: E501

        :param metadata: The metadata of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def ports(self) -> List[IoK8sApiDiscoveryV1beta1EndpointPort]:
        """Gets the ports of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.  # noqa: E501

        :return: The ports of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :rtype: List[IoK8sApiDiscoveryV1beta1EndpointPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[IoK8sApiDiscoveryV1beta1EndpointPort]):
        """Sets the ports of this IoK8sApiDiscoveryV1beta1EndpointSlice.

        ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.  # noqa: E501

        :param ports: The ports of this IoK8sApiDiscoveryV1beta1EndpointSlice.
        :type ports: List[IoK8sApiDiscoveryV1beta1EndpointPort]
        """

        self._ports = ports
