# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiFlowcontrolV1alpha1Subject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group: IoK8sApiFlowcontrolV1alpha1GroupSubject=None, kind: str=None, service_account: IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject=None, user: IoK8sApiFlowcontrolV1alpha1UserSubject=None):  # noqa: E501
        """IoK8sApiFlowcontrolV1alpha1Subject - a model defined in Swagger

        :param group: The group of this IoK8sApiFlowcontrolV1alpha1Subject.  # noqa: E501
        :type group: IoK8sApiFlowcontrolV1alpha1GroupSubject
        :param kind: The kind of this IoK8sApiFlowcontrolV1alpha1Subject.  # noqa: E501
        :type kind: str
        :param service_account: The service_account of this IoK8sApiFlowcontrolV1alpha1Subject.  # noqa: E501
        :type service_account: IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject
        :param user: The user of this IoK8sApiFlowcontrolV1alpha1Subject.  # noqa: E501
        :type user: IoK8sApiFlowcontrolV1alpha1UserSubject
        """
        self.swagger_types = {
            'group': IoK8sApiFlowcontrolV1alpha1GroupSubject,
            'kind': str,
            'service_account': IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject,
            'user': IoK8sApiFlowcontrolV1alpha1UserSubject
        }

        self.attribute_map = {
            'group': 'group',
            'kind': 'kind',
            'service_account': 'serviceAccount',
            'user': 'user'
        }

        self._group = group
        self._kind = kind
        self._service_account = service_account
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiFlowcontrolV1alpha1Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.flowcontrol.v1alpha1.Subject of this IoK8sApiFlowcontrolV1alpha1Subject.  # noqa: E501
        :rtype: IoK8sApiFlowcontrolV1alpha1Subject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> IoK8sApiFlowcontrolV1alpha1GroupSubject:
        """Gets the group of this IoK8sApiFlowcontrolV1alpha1Subject.


        :return: The group of this IoK8sApiFlowcontrolV1alpha1Subject.
        :rtype: IoK8sApiFlowcontrolV1alpha1GroupSubject
        """
        return self._group

    @group.setter
    def group(self, group: IoK8sApiFlowcontrolV1alpha1GroupSubject):
        """Sets the group of this IoK8sApiFlowcontrolV1alpha1Subject.


        :param group: The group of this IoK8sApiFlowcontrolV1alpha1Subject.
        :type group: IoK8sApiFlowcontrolV1alpha1GroupSubject
        """

        self._group = group

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiFlowcontrolV1alpha1Subject.

        Required  # noqa: E501

        :return: The kind of this IoK8sApiFlowcontrolV1alpha1Subject.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiFlowcontrolV1alpha1Subject.

        Required  # noqa: E501

        :param kind: The kind of this IoK8sApiFlowcontrolV1alpha1Subject.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def service_account(self) -> IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject:
        """Gets the service_account of this IoK8sApiFlowcontrolV1alpha1Subject.


        :return: The service_account of this IoK8sApiFlowcontrolV1alpha1Subject.
        :rtype: IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account: IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject):
        """Sets the service_account of this IoK8sApiFlowcontrolV1alpha1Subject.


        :param service_account: The service_account of this IoK8sApiFlowcontrolV1alpha1Subject.
        :type service_account: IoK8sApiFlowcontrolV1alpha1ServiceAccountSubject
        """

        self._service_account = service_account

    @property
    def user(self) -> IoK8sApiFlowcontrolV1alpha1UserSubject:
        """Gets the user of this IoK8sApiFlowcontrolV1alpha1Subject.


        :return: The user of this IoK8sApiFlowcontrolV1alpha1Subject.
        :rtype: IoK8sApiFlowcontrolV1alpha1UserSubject
        """
        return self._user

    @user.setter
    def user(self, user: IoK8sApiFlowcontrolV1alpha1UserSubject):
        """Sets the user of this IoK8sApiFlowcontrolV1alpha1Subject.


        :param user: The user of this IoK8sApiFlowcontrolV1alpha1Subject.
        :type user: IoK8sApiFlowcontrolV1alpha1UserSubject
        """

        self._user = user
