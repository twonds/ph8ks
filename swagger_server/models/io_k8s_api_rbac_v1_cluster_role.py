# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiRbacV1ClusterRole(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, aggregation_rule: IoK8sApiRbacV1AggregationRule=None, api_version: str=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, rules: List[IoK8sApiRbacV1PolicyRule]=None):  # noqa: E501
        """IoK8sApiRbacV1ClusterRole - a model defined in Swagger

        :param aggregation_rule: The aggregation_rule of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :type aggregation_rule: IoK8sApiRbacV1AggregationRule
        :param api_version: The api_version of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param rules: The rules of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :type rules: List[IoK8sApiRbacV1PolicyRule]
        """
        self.swagger_types = {
            'aggregation_rule': IoK8sApiRbacV1AggregationRule,
            'api_version': str,
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'rules': List[IoK8sApiRbacV1PolicyRule]
        }

        self.attribute_map = {
            'aggregation_rule': 'aggregationRule',
            'api_version': 'apiVersion',
            'kind': 'kind',
            'metadata': 'metadata',
            'rules': 'rules'
        }

        self._aggregation_rule = aggregation_rule
        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiRbacV1ClusterRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.rbac.v1.ClusterRole of this IoK8sApiRbacV1ClusterRole.  # noqa: E501
        :rtype: IoK8sApiRbacV1ClusterRole
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_rule(self) -> IoK8sApiRbacV1AggregationRule:
        """Gets the aggregation_rule of this IoK8sApiRbacV1ClusterRole.

        AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.  # noqa: E501

        :return: The aggregation_rule of this IoK8sApiRbacV1ClusterRole.
        :rtype: IoK8sApiRbacV1AggregationRule
        """
        return self._aggregation_rule

    @aggregation_rule.setter
    def aggregation_rule(self, aggregation_rule: IoK8sApiRbacV1AggregationRule):
        """Sets the aggregation_rule of this IoK8sApiRbacV1ClusterRole.

        AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.  # noqa: E501

        :param aggregation_rule: The aggregation_rule of this IoK8sApiRbacV1ClusterRole.
        :type aggregation_rule: IoK8sApiRbacV1AggregationRule
        """

        self._aggregation_rule = aggregation_rule

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiRbacV1ClusterRole.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiRbacV1ClusterRole.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiRbacV1ClusterRole.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiRbacV1ClusterRole.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiRbacV1ClusterRole.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiRbacV1ClusterRole.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiRbacV1ClusterRole.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiRbacV1ClusterRole.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiRbacV1ClusterRole.

        Standard object's metadata.  # noqa: E501

        :return: The metadata of this IoK8sApiRbacV1ClusterRole.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiRbacV1ClusterRole.

        Standard object's metadata.  # noqa: E501

        :param metadata: The metadata of this IoK8sApiRbacV1ClusterRole.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def rules(self) -> List[IoK8sApiRbacV1PolicyRule]:
        """Gets the rules of this IoK8sApiRbacV1ClusterRole.

        Rules holds all the PolicyRules for this ClusterRole  # noqa: E501

        :return: The rules of this IoK8sApiRbacV1ClusterRole.
        :rtype: List[IoK8sApiRbacV1PolicyRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[IoK8sApiRbacV1PolicyRule]):
        """Sets the rules of this IoK8sApiRbacV1ClusterRole.

        Rules holds all the PolicyRules for this ClusterRole  # noqa: E501

        :param rules: The rules of this IoK8sApiRbacV1ClusterRole.
        :type rules: List[IoK8sApiRbacV1PolicyRule]
        """

        self._rules = rules
