# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PersistentVolumeClaimSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_modes: List[str]=None, data_source: IoK8sApiCoreV1TypedLocalObjectReference=None, resources: IoK8sApiCoreV1ResourceRequirements=None, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, storage_class_name: str=None, volume_mode: str=None, volume_name: str=None):  # noqa: E501
        """IoK8sApiCoreV1PersistentVolumeClaimSpec - a model defined in Swagger

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type access_modes: List[str]
        :param data_source: The data_source of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type data_source: IoK8sApiCoreV1TypedLocalObjectReference
        :param resources: The resources of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type resources: IoK8sApiCoreV1ResourceRequirements
        :param selector: The selector of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param storage_class_name: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type storage_class_name: str
        :param volume_mode: The volume_mode of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type volume_mode: str
        :param volume_name: The volume_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :type volume_name: str
        """
        self.swagger_types = {
            'access_modes': List[str],
            'data_source': IoK8sApiCoreV1TypedLocalObjectReference,
            'resources': IoK8sApiCoreV1ResourceRequirements,
            'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'storage_class_name': str,
            'volume_mode': str,
            'volume_name': str
        }

        self.attribute_map = {
            'access_modes': 'accessModes',
            'data_source': 'dataSource',
            'resources': 'resources',
            'selector': 'selector',
            'storage_class_name': 'storageClassName',
            'volume_mode': 'volumeMode',
            'volume_name': 'volumeName'
        }

        self._access_modes = access_modes
        self._data_source = data_source
        self._resources = resources
        self._selector = selector
        self._storage_class_name = storage_class_name
        self._volume_mode = volume_mode
        self._volume_name = volume_name

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PersistentVolumeClaimSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PersistentVolumeClaimSpec of this IoK8sApiCoreV1PersistentVolumeClaimSpec.  # noqa: E501
        :rtype: IoK8sApiCoreV1PersistentVolumeClaimSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_modes(self) -> List[str]:
        """Gets the access_modes of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :return: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: List[str]
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes: List[str]):
        """Sets the access_modes of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type access_modes: List[str]
        """

        self._access_modes = access_modes

    @property
    def data_source(self) -> IoK8sApiCoreV1TypedLocalObjectReference:
        """Gets the data_source of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.  # noqa: E501

        :return: The data_source of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: IoK8sApiCoreV1TypedLocalObjectReference
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source: IoK8sApiCoreV1TypedLocalObjectReference):
        """Sets the data_source of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.  # noqa: E501

        :param data_source: The data_source of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type data_source: IoK8sApiCoreV1TypedLocalObjectReference
        """

        self._data_source = data_source

    @property
    def resources(self) -> IoK8sApiCoreV1ResourceRequirements:
        """Gets the resources of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources  # noqa: E501

        :return: The resources of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: IoK8sApiCoreV1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources: IoK8sApiCoreV1ResourceRequirements):
        """Sets the resources of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources  # noqa: E501

        :param resources: The resources of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type resources: IoK8sApiCoreV1ResourceRequirements
        """

        self._resources = resources

    @property
    def selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the selector of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        A label query over volumes to consider for binding.  # noqa: E501

        :return: The selector of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the selector of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        A label query over volumes to consider for binding.  # noqa: E501

        :param selector: The selector of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._selector = selector

    @property
    def storage_class_name(self) -> str:
        """Gets the storage_class_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1  # noqa: E501

        :return: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: str
        """
        return self._storage_class_name

    @storage_class_name.setter
    def storage_class_name(self, storage_class_name: str):
        """Sets the storage_class_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1  # noqa: E501

        :param storage_class_name: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type storage_class_name: str
        """

        self._storage_class_name = storage_class_name

    @property
    def volume_mode(self) -> str:
        """Gets the volume_mode of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.  # noqa: E501

        :return: The volume_mode of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: str
        """
        return self._volume_mode

    @volume_mode.setter
    def volume_mode(self, volume_mode: str):
        """Sets the volume_mode of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.  # noqa: E501

        :param volume_mode: The volume_mode of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type volume_mode: str
        """

        self._volume_mode = volume_mode

    @property
    def volume_name(self) -> str:
        """Gets the volume_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        VolumeName is the binding reference to the PersistentVolume backing this claim.  # noqa: E501

        :return: The volume_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name: str):
        """Sets the volume_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.

        VolumeName is the binding reference to the PersistentVolume backing this claim.  # noqa: E501

        :param volume_name: The volume_name of this IoK8sApiCoreV1PersistentVolumeClaimSpec.
        :type volume_name: str
        """

        self._volume_name = volume_name
