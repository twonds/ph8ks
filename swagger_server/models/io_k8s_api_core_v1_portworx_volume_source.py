# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PortworxVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, read_only: bool=None, volume_id: str=None):  # noqa: E501
        """IoK8sApiCoreV1PortworxVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1PortworxVolumeSource.  # noqa: E501
        :type fs_type: str
        :param read_only: The read_only of this IoK8sApiCoreV1PortworxVolumeSource.  # noqa: E501
        :type read_only: bool
        :param volume_id: The volume_id of this IoK8sApiCoreV1PortworxVolumeSource.  # noqa: E501
        :type volume_id: str
        """
        self.swagger_types = {
            'fs_type': str,
            'read_only': bool,
            'volume_id': str
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'read_only': 'readOnly',
            'volume_id': 'volumeID'
        }

        self._fs_type = fs_type
        self._read_only = read_only
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PortworxVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PortworxVolumeSource of this IoK8sApiCoreV1PortworxVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1PortworxVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1PortworxVolumeSource.

        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1PortworxVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1PortworxVolumeSource.

        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1PortworxVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1PortworxVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1PortworxVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1PortworxVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1PortworxVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def volume_id(self) -> str:
        """Gets the volume_id of this IoK8sApiCoreV1PortworxVolumeSource.

        VolumeID uniquely identifies a Portworx volume  # noqa: E501

        :return: The volume_id of this IoK8sApiCoreV1PortworxVolumeSource.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id: str):
        """Sets the volume_id of this IoK8sApiCoreV1PortworxVolumeSource.

        VolumeID uniquely identifies a Portworx volume  # noqa: E501

        :param volume_id: The volume_id of this IoK8sApiCoreV1PortworxVolumeSource.
        :type volume_id: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id
