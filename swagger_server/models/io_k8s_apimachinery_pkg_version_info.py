# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApimachineryPkgVersionInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, build_date: str=None, compiler: str=None, git_commit: str=None, git_tree_state: str=None, git_version: str=None, go_version: str=None, major: str=None, minor: str=None, platform: str=None):  # noqa: E501
        """IoK8sApimachineryPkgVersionInfo - a model defined in Swagger

        :param build_date: The build_date of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type build_date: str
        :param compiler: The compiler of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type compiler: str
        :param git_commit: The git_commit of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type git_commit: str
        :param git_tree_state: The git_tree_state of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type git_tree_state: str
        :param git_version: The git_version of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type git_version: str
        :param go_version: The go_version of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type go_version: str
        :param major: The major of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type major: str
        :param minor: The minor of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type minor: str
        :param platform: The platform of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :type platform: str
        """
        self.swagger_types = {
            'build_date': str,
            'compiler': str,
            'git_commit': str,
            'git_tree_state': str,
            'git_version': str,
            'go_version': str,
            'major': str,
            'minor': str,
            'platform': str
        }

        self.attribute_map = {
            'build_date': 'buildDate',
            'compiler': 'compiler',
            'git_commit': 'gitCommit',
            'git_tree_state': 'gitTreeState',
            'git_version': 'gitVersion',
            'go_version': 'goVersion',
            'major': 'major',
            'minor': 'minor',
            'platform': 'platform'
        }

        self._build_date = build_date
        self._compiler = compiler
        self._git_commit = git_commit
        self._git_tree_state = git_tree_state
        self._git_version = git_version
        self._go_version = go_version
        self._major = major
        self._minor = minor
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApimachineryPkgVersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apimachinery.pkg.version.Info of this IoK8sApimachineryPkgVersionInfo.  # noqa: E501
        :rtype: IoK8sApimachineryPkgVersionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_date(self) -> str:
        """Gets the build_date of this IoK8sApimachineryPkgVersionInfo.


        :return: The build_date of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date: str):
        """Sets the build_date of this IoK8sApimachineryPkgVersionInfo.


        :param build_date: The build_date of this IoK8sApimachineryPkgVersionInfo.
        :type build_date: str
        """
        if build_date is None:
            raise ValueError("Invalid value for `build_date`, must not be `None`")  # noqa: E501

        self._build_date = build_date

    @property
    def compiler(self) -> str:
        """Gets the compiler of this IoK8sApimachineryPkgVersionInfo.


        :return: The compiler of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._compiler

    @compiler.setter
    def compiler(self, compiler: str):
        """Sets the compiler of this IoK8sApimachineryPkgVersionInfo.


        :param compiler: The compiler of this IoK8sApimachineryPkgVersionInfo.
        :type compiler: str
        """
        if compiler is None:
            raise ValueError("Invalid value for `compiler`, must not be `None`")  # noqa: E501

        self._compiler = compiler

    @property
    def git_commit(self) -> str:
        """Gets the git_commit of this IoK8sApimachineryPkgVersionInfo.


        :return: The git_commit of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit: str):
        """Sets the git_commit of this IoK8sApimachineryPkgVersionInfo.


        :param git_commit: The git_commit of this IoK8sApimachineryPkgVersionInfo.
        :type git_commit: str
        """
        if git_commit is None:
            raise ValueError("Invalid value for `git_commit`, must not be `None`")  # noqa: E501

        self._git_commit = git_commit

    @property
    def git_tree_state(self) -> str:
        """Gets the git_tree_state of this IoK8sApimachineryPkgVersionInfo.


        :return: The git_tree_state of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._git_tree_state

    @git_tree_state.setter
    def git_tree_state(self, git_tree_state: str):
        """Sets the git_tree_state of this IoK8sApimachineryPkgVersionInfo.


        :param git_tree_state: The git_tree_state of this IoK8sApimachineryPkgVersionInfo.
        :type git_tree_state: str
        """
        if git_tree_state is None:
            raise ValueError("Invalid value for `git_tree_state`, must not be `None`")  # noqa: E501

        self._git_tree_state = git_tree_state

    @property
    def git_version(self) -> str:
        """Gets the git_version of this IoK8sApimachineryPkgVersionInfo.


        :return: The git_version of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._git_version

    @git_version.setter
    def git_version(self, git_version: str):
        """Sets the git_version of this IoK8sApimachineryPkgVersionInfo.


        :param git_version: The git_version of this IoK8sApimachineryPkgVersionInfo.
        :type git_version: str
        """
        if git_version is None:
            raise ValueError("Invalid value for `git_version`, must not be `None`")  # noqa: E501

        self._git_version = git_version

    @property
    def go_version(self) -> str:
        """Gets the go_version of this IoK8sApimachineryPkgVersionInfo.


        :return: The go_version of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._go_version

    @go_version.setter
    def go_version(self, go_version: str):
        """Sets the go_version of this IoK8sApimachineryPkgVersionInfo.


        :param go_version: The go_version of this IoK8sApimachineryPkgVersionInfo.
        :type go_version: str
        """
        if go_version is None:
            raise ValueError("Invalid value for `go_version`, must not be `None`")  # noqa: E501

        self._go_version = go_version

    @property
    def major(self) -> str:
        """Gets the major of this IoK8sApimachineryPkgVersionInfo.


        :return: The major of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major: str):
        """Sets the major of this IoK8sApimachineryPkgVersionInfo.


        :param major: The major of this IoK8sApimachineryPkgVersionInfo.
        :type major: str
        """
        if major is None:
            raise ValueError("Invalid value for `major`, must not be `None`")  # noqa: E501

        self._major = major

    @property
    def minor(self) -> str:
        """Gets the minor of this IoK8sApimachineryPkgVersionInfo.


        :return: The minor of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._minor

    @minor.setter
    def minor(self, minor: str):
        """Sets the minor of this IoK8sApimachineryPkgVersionInfo.


        :param minor: The minor of this IoK8sApimachineryPkgVersionInfo.
        :type minor: str
        """
        if minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")  # noqa: E501

        self._minor = minor

    @property
    def platform(self) -> str:
        """Gets the platform of this IoK8sApimachineryPkgVersionInfo.


        :return: The platform of this IoK8sApimachineryPkgVersionInfo.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this IoK8sApimachineryPkgVersionInfo.


        :param platform: The platform of this IoK8sApimachineryPkgVersionInfo.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform
