# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1Volume(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource=None, azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource=None, azure_file: IoK8sApiCoreV1AzureFileVolumeSource=None, cephfs: IoK8sApiCoreV1CephFSVolumeSource=None, cinder: IoK8sApiCoreV1CinderVolumeSource=None, config_map: IoK8sApiCoreV1ConfigMapVolumeSource=None, csi: IoK8sApiCoreV1CSIVolumeSource=None, downward_api: IoK8sApiCoreV1DownwardAPIVolumeSource=None, empty_dir: IoK8sApiCoreV1EmptyDirVolumeSource=None, fc: IoK8sApiCoreV1FCVolumeSource=None, flex_volume: IoK8sApiCoreV1FlexVolumeSource=None, flocker: IoK8sApiCoreV1FlockerVolumeSource=None, gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource=None, git_repo: IoK8sApiCoreV1GitRepoVolumeSource=None, glusterfs: IoK8sApiCoreV1GlusterfsVolumeSource=None, host_path: IoK8sApiCoreV1HostPathVolumeSource=None, iscsi: IoK8sApiCoreV1ISCSIVolumeSource=None, name: str=None, nfs: IoK8sApiCoreV1NFSVolumeSource=None, persistent_volume_claim: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource=None, photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource=None, portworx_volume: IoK8sApiCoreV1PortworxVolumeSource=None, projected: IoK8sApiCoreV1ProjectedVolumeSource=None, quobyte: IoK8sApiCoreV1QuobyteVolumeSource=None, rbd: IoK8sApiCoreV1RBDVolumeSource=None, scale_io: IoK8sApiCoreV1ScaleIOVolumeSource=None, secret: IoK8sApiCoreV1SecretVolumeSource=None, storageos: IoK8sApiCoreV1StorageOSVolumeSource=None, vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource=None):  # noqa: E501
        """IoK8sApiCoreV1Volume - a model defined in Swagger

        :param aws_elastic_block_store: The aws_elastic_block_store of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        :param azure_disk: The azure_disk of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource
        :param azure_file: The azure_file of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type azure_file: IoK8sApiCoreV1AzureFileVolumeSource
        :param cephfs: The cephfs of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type cephfs: IoK8sApiCoreV1CephFSVolumeSource
        :param cinder: The cinder of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type cinder: IoK8sApiCoreV1CinderVolumeSource
        :param config_map: The config_map of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type config_map: IoK8sApiCoreV1ConfigMapVolumeSource
        :param csi: The csi of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type csi: IoK8sApiCoreV1CSIVolumeSource
        :param downward_api: The downward_api of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type downward_api: IoK8sApiCoreV1DownwardAPIVolumeSource
        :param empty_dir: The empty_dir of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type empty_dir: IoK8sApiCoreV1EmptyDirVolumeSource
        :param fc: The fc of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type fc: IoK8sApiCoreV1FCVolumeSource
        :param flex_volume: The flex_volume of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type flex_volume: IoK8sApiCoreV1FlexVolumeSource
        :param flocker: The flocker of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type flocker: IoK8sApiCoreV1FlockerVolumeSource
        :param gce_persistent_disk: The gce_persistent_disk of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        :param git_repo: The git_repo of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type git_repo: IoK8sApiCoreV1GitRepoVolumeSource
        :param glusterfs: The glusterfs of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type glusterfs: IoK8sApiCoreV1GlusterfsVolumeSource
        :param host_path: The host_path of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type host_path: IoK8sApiCoreV1HostPathVolumeSource
        :param iscsi: The iscsi of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type iscsi: IoK8sApiCoreV1ISCSIVolumeSource
        :param name: The name of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type name: str
        :param nfs: The nfs of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type nfs: IoK8sApiCoreV1NFSVolumeSource
        :param persistent_volume_claim: The persistent_volume_claim of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type persistent_volume_claim: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
        :param photon_persistent_disk: The photon_persistent_disk of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        :param portworx_volume: The portworx_volume of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type portworx_volume: IoK8sApiCoreV1PortworxVolumeSource
        :param projected: The projected of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type projected: IoK8sApiCoreV1ProjectedVolumeSource
        :param quobyte: The quobyte of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type quobyte: IoK8sApiCoreV1QuobyteVolumeSource
        :param rbd: The rbd of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type rbd: IoK8sApiCoreV1RBDVolumeSource
        :param scale_io: The scale_io of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type scale_io: IoK8sApiCoreV1ScaleIOVolumeSource
        :param secret: The secret of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type secret: IoK8sApiCoreV1SecretVolumeSource
        :param storageos: The storageos of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type storageos: IoK8sApiCoreV1StorageOSVolumeSource
        :param vsphere_volume: The vsphere_volume of this IoK8sApiCoreV1Volume.  # noqa: E501
        :type vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """
        self.swagger_types = {
            'aws_elastic_block_store': IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource,
            'azure_disk': IoK8sApiCoreV1AzureDiskVolumeSource,
            'azure_file': IoK8sApiCoreV1AzureFileVolumeSource,
            'cephfs': IoK8sApiCoreV1CephFSVolumeSource,
            'cinder': IoK8sApiCoreV1CinderVolumeSource,
            'config_map': IoK8sApiCoreV1ConfigMapVolumeSource,
            'csi': IoK8sApiCoreV1CSIVolumeSource,
            'downward_api': IoK8sApiCoreV1DownwardAPIVolumeSource,
            'empty_dir': IoK8sApiCoreV1EmptyDirVolumeSource,
            'fc': IoK8sApiCoreV1FCVolumeSource,
            'flex_volume': IoK8sApiCoreV1FlexVolumeSource,
            'flocker': IoK8sApiCoreV1FlockerVolumeSource,
            'gce_persistent_disk': IoK8sApiCoreV1GCEPersistentDiskVolumeSource,
            'git_repo': IoK8sApiCoreV1GitRepoVolumeSource,
            'glusterfs': IoK8sApiCoreV1GlusterfsVolumeSource,
            'host_path': IoK8sApiCoreV1HostPathVolumeSource,
            'iscsi': IoK8sApiCoreV1ISCSIVolumeSource,
            'name': str,
            'nfs': IoK8sApiCoreV1NFSVolumeSource,
            'persistent_volume_claim': IoK8sApiCoreV1PersistentVolumeClaimVolumeSource,
            'photon_persistent_disk': IoK8sApiCoreV1PhotonPersistentDiskVolumeSource,
            'portworx_volume': IoK8sApiCoreV1PortworxVolumeSource,
            'projected': IoK8sApiCoreV1ProjectedVolumeSource,
            'quobyte': IoK8sApiCoreV1QuobyteVolumeSource,
            'rbd': IoK8sApiCoreV1RBDVolumeSource,
            'scale_io': IoK8sApiCoreV1ScaleIOVolumeSource,
            'secret': IoK8sApiCoreV1SecretVolumeSource,
            'storageos': IoK8sApiCoreV1StorageOSVolumeSource,
            'vsphere_volume': IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        }

        self.attribute_map = {
            'aws_elastic_block_store': 'awsElasticBlockStore',
            'azure_disk': 'azureDisk',
            'azure_file': 'azureFile',
            'cephfs': 'cephfs',
            'cinder': 'cinder',
            'config_map': 'configMap',
            'csi': 'csi',
            'downward_api': 'downwardAPI',
            'empty_dir': 'emptyDir',
            'fc': 'fc',
            'flex_volume': 'flexVolume',
            'flocker': 'flocker',
            'gce_persistent_disk': 'gcePersistentDisk',
            'git_repo': 'gitRepo',
            'glusterfs': 'glusterfs',
            'host_path': 'hostPath',
            'iscsi': 'iscsi',
            'name': 'name',
            'nfs': 'nfs',
            'persistent_volume_claim': 'persistentVolumeClaim',
            'photon_persistent_disk': 'photonPersistentDisk',
            'portworx_volume': 'portworxVolume',
            'projected': 'projected',
            'quobyte': 'quobyte',
            'rbd': 'rbd',
            'scale_io': 'scaleIO',
            'secret': 'secret',
            'storageos': 'storageos',
            'vsphere_volume': 'vsphereVolume'
        }

        self._aws_elastic_block_store = aws_elastic_block_store
        self._azure_disk = azure_disk
        self._azure_file = azure_file
        self._cephfs = cephfs
        self._cinder = cinder
        self._config_map = config_map
        self._csi = csi
        self._downward_api = downward_api
        self._empty_dir = empty_dir
        self._fc = fc
        self._flex_volume = flex_volume
        self._flocker = flocker
        self._gce_persistent_disk = gce_persistent_disk
        self._git_repo = git_repo
        self._glusterfs = glusterfs
        self._host_path = host_path
        self._iscsi = iscsi
        self._name = name
        self._nfs = nfs
        self._persistent_volume_claim = persistent_volume_claim
        self._photon_persistent_disk = photon_persistent_disk
        self._portworx_volume = portworx_volume
        self._projected = projected
        self._quobyte = quobyte
        self._rbd = rbd
        self._scale_io = scale_io
        self._secret = secret
        self._storageos = storageos
        self._vsphere_volume = vsphere_volume

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.Volume of this IoK8sApiCoreV1Volume.  # noqa: E501
        :rtype: IoK8sApiCoreV1Volume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_elastic_block_store(self) -> IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource:
        """Gets the aws_elastic_block_store of this IoK8sApiCoreV1Volume.

        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore  # noqa: E501

        :return: The aws_elastic_block_store of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        """
        return self._aws_elastic_block_store

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource):
        """Sets the aws_elastic_block_store of this IoK8sApiCoreV1Volume.

        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore  # noqa: E501

        :param aws_elastic_block_store: The aws_elastic_block_store of this IoK8sApiCoreV1Volume.
        :type aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        """

        self._aws_elastic_block_store = aws_elastic_block_store

    @property
    def azure_disk(self) -> IoK8sApiCoreV1AzureDiskVolumeSource:
        """Gets the azure_disk of this IoK8sApiCoreV1Volume.

        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.  # noqa: E501

        :return: The azure_disk of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1AzureDiskVolumeSource
        """
        return self._azure_disk

    @azure_disk.setter
    def azure_disk(self, azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource):
        """Sets the azure_disk of this IoK8sApiCoreV1Volume.

        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.  # noqa: E501

        :param azure_disk: The azure_disk of this IoK8sApiCoreV1Volume.
        :type azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource
        """

        self._azure_disk = azure_disk

    @property
    def azure_file(self) -> IoK8sApiCoreV1AzureFileVolumeSource:
        """Gets the azure_file of this IoK8sApiCoreV1Volume.

        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.  # noqa: E501

        :return: The azure_file of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1AzureFileVolumeSource
        """
        return self._azure_file

    @azure_file.setter
    def azure_file(self, azure_file: IoK8sApiCoreV1AzureFileVolumeSource):
        """Sets the azure_file of this IoK8sApiCoreV1Volume.

        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.  # noqa: E501

        :param azure_file: The azure_file of this IoK8sApiCoreV1Volume.
        :type azure_file: IoK8sApiCoreV1AzureFileVolumeSource
        """

        self._azure_file = azure_file

    @property
    def cephfs(self) -> IoK8sApiCoreV1CephFSVolumeSource:
        """Gets the cephfs of this IoK8sApiCoreV1Volume.

        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime  # noqa: E501

        :return: The cephfs of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1CephFSVolumeSource
        """
        return self._cephfs

    @cephfs.setter
    def cephfs(self, cephfs: IoK8sApiCoreV1CephFSVolumeSource):
        """Sets the cephfs of this IoK8sApiCoreV1Volume.

        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime  # noqa: E501

        :param cephfs: The cephfs of this IoK8sApiCoreV1Volume.
        :type cephfs: IoK8sApiCoreV1CephFSVolumeSource
        """

        self._cephfs = cephfs

    @property
    def cinder(self) -> IoK8sApiCoreV1CinderVolumeSource:
        """Gets the cinder of this IoK8sApiCoreV1Volume.

        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md  # noqa: E501

        :return: The cinder of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1CinderVolumeSource
        """
        return self._cinder

    @cinder.setter
    def cinder(self, cinder: IoK8sApiCoreV1CinderVolumeSource):
        """Sets the cinder of this IoK8sApiCoreV1Volume.

        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md  # noqa: E501

        :param cinder: The cinder of this IoK8sApiCoreV1Volume.
        :type cinder: IoK8sApiCoreV1CinderVolumeSource
        """

        self._cinder = cinder

    @property
    def config_map(self) -> IoK8sApiCoreV1ConfigMapVolumeSource:
        """Gets the config_map of this IoK8sApiCoreV1Volume.

        ConfigMap represents a configMap that should populate this volume  # noqa: E501

        :return: The config_map of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1ConfigMapVolumeSource
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map: IoK8sApiCoreV1ConfigMapVolumeSource):
        """Sets the config_map of this IoK8sApiCoreV1Volume.

        ConfigMap represents a configMap that should populate this volume  # noqa: E501

        :param config_map: The config_map of this IoK8sApiCoreV1Volume.
        :type config_map: IoK8sApiCoreV1ConfigMapVolumeSource
        """

        self._config_map = config_map

    @property
    def csi(self) -> IoK8sApiCoreV1CSIVolumeSource:
        """Gets the csi of this IoK8sApiCoreV1Volume.

        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).  # noqa: E501

        :return: The csi of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1CSIVolumeSource
        """
        return self._csi

    @csi.setter
    def csi(self, csi: IoK8sApiCoreV1CSIVolumeSource):
        """Sets the csi of this IoK8sApiCoreV1Volume.

        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).  # noqa: E501

        :param csi: The csi of this IoK8sApiCoreV1Volume.
        :type csi: IoK8sApiCoreV1CSIVolumeSource
        """

        self._csi = csi

    @property
    def downward_api(self) -> IoK8sApiCoreV1DownwardAPIVolumeSource:
        """Gets the downward_api of this IoK8sApiCoreV1Volume.

        DownwardAPI represents downward API about the pod that should populate this volume  # noqa: E501

        :return: The downward_api of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1DownwardAPIVolumeSource
        """
        return self._downward_api

    @downward_api.setter
    def downward_api(self, downward_api: IoK8sApiCoreV1DownwardAPIVolumeSource):
        """Sets the downward_api of this IoK8sApiCoreV1Volume.

        DownwardAPI represents downward API about the pod that should populate this volume  # noqa: E501

        :param downward_api: The downward_api of this IoK8sApiCoreV1Volume.
        :type downward_api: IoK8sApiCoreV1DownwardAPIVolumeSource
        """

        self._downward_api = downward_api

    @property
    def empty_dir(self) -> IoK8sApiCoreV1EmptyDirVolumeSource:
        """Gets the empty_dir of this IoK8sApiCoreV1Volume.

        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir  # noqa: E501

        :return: The empty_dir of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1EmptyDirVolumeSource
        """
        return self._empty_dir

    @empty_dir.setter
    def empty_dir(self, empty_dir: IoK8sApiCoreV1EmptyDirVolumeSource):
        """Sets the empty_dir of this IoK8sApiCoreV1Volume.

        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir  # noqa: E501

        :param empty_dir: The empty_dir of this IoK8sApiCoreV1Volume.
        :type empty_dir: IoK8sApiCoreV1EmptyDirVolumeSource
        """

        self._empty_dir = empty_dir

    @property
    def fc(self) -> IoK8sApiCoreV1FCVolumeSource:
        """Gets the fc of this IoK8sApiCoreV1Volume.

        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.  # noqa: E501

        :return: The fc of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1FCVolumeSource
        """
        return self._fc

    @fc.setter
    def fc(self, fc: IoK8sApiCoreV1FCVolumeSource):
        """Sets the fc of this IoK8sApiCoreV1Volume.

        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.  # noqa: E501

        :param fc: The fc of this IoK8sApiCoreV1Volume.
        :type fc: IoK8sApiCoreV1FCVolumeSource
        """

        self._fc = fc

    @property
    def flex_volume(self) -> IoK8sApiCoreV1FlexVolumeSource:
        """Gets the flex_volume of this IoK8sApiCoreV1Volume.

        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.  # noqa: E501

        :return: The flex_volume of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1FlexVolumeSource
        """
        return self._flex_volume

    @flex_volume.setter
    def flex_volume(self, flex_volume: IoK8sApiCoreV1FlexVolumeSource):
        """Sets the flex_volume of this IoK8sApiCoreV1Volume.

        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.  # noqa: E501

        :param flex_volume: The flex_volume of this IoK8sApiCoreV1Volume.
        :type flex_volume: IoK8sApiCoreV1FlexVolumeSource
        """

        self._flex_volume = flex_volume

    @property
    def flocker(self) -> IoK8sApiCoreV1FlockerVolumeSource:
        """Gets the flocker of this IoK8sApiCoreV1Volume.

        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running  # noqa: E501

        :return: The flocker of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1FlockerVolumeSource
        """
        return self._flocker

    @flocker.setter
    def flocker(self, flocker: IoK8sApiCoreV1FlockerVolumeSource):
        """Sets the flocker of this IoK8sApiCoreV1Volume.

        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running  # noqa: E501

        :param flocker: The flocker of this IoK8sApiCoreV1Volume.
        :type flocker: IoK8sApiCoreV1FlockerVolumeSource
        """

        self._flocker = flocker

    @property
    def gce_persistent_disk(self) -> IoK8sApiCoreV1GCEPersistentDiskVolumeSource:
        """Gets the gce_persistent_disk of this IoK8sApiCoreV1Volume.

        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The gce_persistent_disk of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        """
        return self._gce_persistent_disk

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource):
        """Sets the gce_persistent_disk of this IoK8sApiCoreV1Volume.

        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param gce_persistent_disk: The gce_persistent_disk of this IoK8sApiCoreV1Volume.
        :type gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        """

        self._gce_persistent_disk = gce_persistent_disk

    @property
    def git_repo(self) -> IoK8sApiCoreV1GitRepoVolumeSource:
        """Gets the git_repo of this IoK8sApiCoreV1Volume.

        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.  # noqa: E501

        :return: The git_repo of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1GitRepoVolumeSource
        """
        return self._git_repo

    @git_repo.setter
    def git_repo(self, git_repo: IoK8sApiCoreV1GitRepoVolumeSource):
        """Sets the git_repo of this IoK8sApiCoreV1Volume.

        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.  # noqa: E501

        :param git_repo: The git_repo of this IoK8sApiCoreV1Volume.
        :type git_repo: IoK8sApiCoreV1GitRepoVolumeSource
        """

        self._git_repo = git_repo

    @property
    def glusterfs(self) -> IoK8sApiCoreV1GlusterfsVolumeSource:
        """Gets the glusterfs of this IoK8sApiCoreV1Volume.

        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md  # noqa: E501

        :return: The glusterfs of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1GlusterfsVolumeSource
        """
        return self._glusterfs

    @glusterfs.setter
    def glusterfs(self, glusterfs: IoK8sApiCoreV1GlusterfsVolumeSource):
        """Sets the glusterfs of this IoK8sApiCoreV1Volume.

        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md  # noqa: E501

        :param glusterfs: The glusterfs of this IoK8sApiCoreV1Volume.
        :type glusterfs: IoK8sApiCoreV1GlusterfsVolumeSource
        """

        self._glusterfs = glusterfs

    @property
    def host_path(self) -> IoK8sApiCoreV1HostPathVolumeSource:
        """Gets the host_path of this IoK8sApiCoreV1Volume.

        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath  # noqa: E501

        :return: The host_path of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1HostPathVolumeSource
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path: IoK8sApiCoreV1HostPathVolumeSource):
        """Sets the host_path of this IoK8sApiCoreV1Volume.

        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath  # noqa: E501

        :param host_path: The host_path of this IoK8sApiCoreV1Volume.
        :type host_path: IoK8sApiCoreV1HostPathVolumeSource
        """

        self._host_path = host_path

    @property
    def iscsi(self) -> IoK8sApiCoreV1ISCSIVolumeSource:
        """Gets the iscsi of this IoK8sApiCoreV1Volume.

        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md  # noqa: E501

        :return: The iscsi of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1ISCSIVolumeSource
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi: IoK8sApiCoreV1ISCSIVolumeSource):
        """Sets the iscsi of this IoK8sApiCoreV1Volume.

        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md  # noqa: E501

        :param iscsi: The iscsi of this IoK8sApiCoreV1Volume.
        :type iscsi: IoK8sApiCoreV1ISCSIVolumeSource
        """

        self._iscsi = iscsi

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1Volume.

        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :return: The name of this IoK8sApiCoreV1Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1Volume.

        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1Volume.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nfs(self) -> IoK8sApiCoreV1NFSVolumeSource:
        """Gets the nfs of this IoK8sApiCoreV1Volume.

        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :return: The nfs of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1NFSVolumeSource
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs: IoK8sApiCoreV1NFSVolumeSource):
        """Sets the nfs of this IoK8sApiCoreV1Volume.

        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :param nfs: The nfs of this IoK8sApiCoreV1Volume.
        :type nfs: IoK8sApiCoreV1NFSVolumeSource
        """

        self._nfs = nfs

    @property
    def persistent_volume_claim(self) -> IoK8sApiCoreV1PersistentVolumeClaimVolumeSource:
        """Gets the persistent_volume_claim of this IoK8sApiCoreV1Volume.

        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims  # noqa: E501

        :return: The persistent_volume_claim of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource):
        """Sets the persistent_volume_claim of this IoK8sApiCoreV1Volume.

        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims  # noqa: E501

        :param persistent_volume_claim: The persistent_volume_claim of this IoK8sApiCoreV1Volume.
        :type persistent_volume_claim: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
        """

        self._persistent_volume_claim = persistent_volume_claim

    @property
    def photon_persistent_disk(self) -> IoK8sApiCoreV1PhotonPersistentDiskVolumeSource:
        """Gets the photon_persistent_disk of this IoK8sApiCoreV1Volume.

        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine  # noqa: E501

        :return: The photon_persistent_disk of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        """
        return self._photon_persistent_disk

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource):
        """Sets the photon_persistent_disk of this IoK8sApiCoreV1Volume.

        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine  # noqa: E501

        :param photon_persistent_disk: The photon_persistent_disk of this IoK8sApiCoreV1Volume.
        :type photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        """

        self._photon_persistent_disk = photon_persistent_disk

    @property
    def portworx_volume(self) -> IoK8sApiCoreV1PortworxVolumeSource:
        """Gets the portworx_volume of this IoK8sApiCoreV1Volume.

        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine  # noqa: E501

        :return: The portworx_volume of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1PortworxVolumeSource
        """
        return self._portworx_volume

    @portworx_volume.setter
    def portworx_volume(self, portworx_volume: IoK8sApiCoreV1PortworxVolumeSource):
        """Sets the portworx_volume of this IoK8sApiCoreV1Volume.

        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine  # noqa: E501

        :param portworx_volume: The portworx_volume of this IoK8sApiCoreV1Volume.
        :type portworx_volume: IoK8sApiCoreV1PortworxVolumeSource
        """

        self._portworx_volume = portworx_volume

    @property
    def projected(self) -> IoK8sApiCoreV1ProjectedVolumeSource:
        """Gets the projected of this IoK8sApiCoreV1Volume.

        Items for all in one resources secrets, configmaps, and downward API  # noqa: E501

        :return: The projected of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1ProjectedVolumeSource
        """
        return self._projected

    @projected.setter
    def projected(self, projected: IoK8sApiCoreV1ProjectedVolumeSource):
        """Sets the projected of this IoK8sApiCoreV1Volume.

        Items for all in one resources secrets, configmaps, and downward API  # noqa: E501

        :param projected: The projected of this IoK8sApiCoreV1Volume.
        :type projected: IoK8sApiCoreV1ProjectedVolumeSource
        """

        self._projected = projected

    @property
    def quobyte(self) -> IoK8sApiCoreV1QuobyteVolumeSource:
        """Gets the quobyte of this IoK8sApiCoreV1Volume.

        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime  # noqa: E501

        :return: The quobyte of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1QuobyteVolumeSource
        """
        return self._quobyte

    @quobyte.setter
    def quobyte(self, quobyte: IoK8sApiCoreV1QuobyteVolumeSource):
        """Sets the quobyte of this IoK8sApiCoreV1Volume.

        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime  # noqa: E501

        :param quobyte: The quobyte of this IoK8sApiCoreV1Volume.
        :type quobyte: IoK8sApiCoreV1QuobyteVolumeSource
        """

        self._quobyte = quobyte

    @property
    def rbd(self) -> IoK8sApiCoreV1RBDVolumeSource:
        """Gets the rbd of this IoK8sApiCoreV1Volume.

        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md  # noqa: E501

        :return: The rbd of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1RBDVolumeSource
        """
        return self._rbd

    @rbd.setter
    def rbd(self, rbd: IoK8sApiCoreV1RBDVolumeSource):
        """Sets the rbd of this IoK8sApiCoreV1Volume.

        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md  # noqa: E501

        :param rbd: The rbd of this IoK8sApiCoreV1Volume.
        :type rbd: IoK8sApiCoreV1RBDVolumeSource
        """

        self._rbd = rbd

    @property
    def scale_io(self) -> IoK8sApiCoreV1ScaleIOVolumeSource:
        """Gets the scale_io of this IoK8sApiCoreV1Volume.

        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :return: The scale_io of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1ScaleIOVolumeSource
        """
        return self._scale_io

    @scale_io.setter
    def scale_io(self, scale_io: IoK8sApiCoreV1ScaleIOVolumeSource):
        """Sets the scale_io of this IoK8sApiCoreV1Volume.

        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :param scale_io: The scale_io of this IoK8sApiCoreV1Volume.
        :type scale_io: IoK8sApiCoreV1ScaleIOVolumeSource
        """

        self._scale_io = scale_io

    @property
    def secret(self) -> IoK8sApiCoreV1SecretVolumeSource:
        """Gets the secret of this IoK8sApiCoreV1Volume.

        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret  # noqa: E501

        :return: The secret of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1SecretVolumeSource
        """
        return self._secret

    @secret.setter
    def secret(self, secret: IoK8sApiCoreV1SecretVolumeSource):
        """Sets the secret of this IoK8sApiCoreV1Volume.

        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret  # noqa: E501

        :param secret: The secret of this IoK8sApiCoreV1Volume.
        :type secret: IoK8sApiCoreV1SecretVolumeSource
        """

        self._secret = secret

    @property
    def storageos(self) -> IoK8sApiCoreV1StorageOSVolumeSource:
        """Gets the storageos of this IoK8sApiCoreV1Volume.

        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :return: The storageos of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1StorageOSVolumeSource
        """
        return self._storageos

    @storageos.setter
    def storageos(self, storageos: IoK8sApiCoreV1StorageOSVolumeSource):
        """Sets the storageos of this IoK8sApiCoreV1Volume.

        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :param storageos: The storageos of this IoK8sApiCoreV1Volume.
        :type storageos: IoK8sApiCoreV1StorageOSVolumeSource
        """

        self._storageos = storageos

    @property
    def vsphere_volume(self) -> IoK8sApiCoreV1VsphereVirtualDiskVolumeSource:
        """Gets the vsphere_volume of this IoK8sApiCoreV1Volume.

        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine  # noqa: E501

        :return: The vsphere_volume of this IoK8sApiCoreV1Volume.
        :rtype: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """
        return self._vsphere_volume

    @vsphere_volume.setter
    def vsphere_volume(self, vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource):
        """Sets the vsphere_volume of this IoK8sApiCoreV1Volume.

        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine  # noqa: E501

        :param vsphere_volume: The vsphere_volume of this IoK8sApiCoreV1Volume.
        :type vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """

        self._vsphere_volume = vsphere_volume
