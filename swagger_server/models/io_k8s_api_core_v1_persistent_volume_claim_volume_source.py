# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PersistentVolumeClaimVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, claim_name: str=None, read_only: bool=None):  # noqa: E501
        """IoK8sApiCoreV1PersistentVolumeClaimVolumeSource - a model defined in Swagger

        :param claim_name: The claim_name of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.  # noqa: E501
        :type claim_name: str
        :param read_only: The read_only of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.  # noqa: E501
        :type read_only: bool
        """
        self.swagger_types = {
            'claim_name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'claim_name': 'claimName',
            'read_only': 'readOnly'
        }

        self._claim_name = claim_name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PersistentVolumeClaimVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim_name(self) -> str:
        """Gets the claim_name of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.

        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims  # noqa: E501

        :return: The claim_name of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.
        :rtype: str
        """
        return self._claim_name

    @claim_name.setter
    def claim_name(self, claim_name: str):
        """Sets the claim_name of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.

        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims  # noqa: E501

        :param claim_name: The claim_name of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.
        :type claim_name: str
        """
        if claim_name is None:
            raise ValueError("Invalid value for `claim_name`, must not be `None`")  # noqa: E501

        self._claim_name = claim_name

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.

        Will force the ReadOnly setting in VolumeMounts. Default false.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.

        Will force the ReadOnly setting in VolumeMounts. Default false.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only
