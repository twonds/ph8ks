# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, non_resource_rules: List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]=None, resource_rules: List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]=None, subjects: List[IoK8sApiFlowcontrolV1alpha1Subject]=None):  # noqa: E501
        """IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects - a model defined in Swagger

        :param non_resource_rules: The non_resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.  # noqa: E501
        :type non_resource_rules: List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]
        :param resource_rules: The resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.  # noqa: E501
        :type resource_rules: List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]
        :param subjects: The subjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.  # noqa: E501
        :type subjects: List[IoK8sApiFlowcontrolV1alpha1Subject]
        """
        self.swagger_types = {
            'non_resource_rules': List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule],
            'resource_rules': List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule],
            'subjects': List[IoK8sApiFlowcontrolV1alpha1Subject]
        }

        self.attribute_map = {
            'non_resource_rules': 'nonResourceRules',
            'resource_rules': 'resourceRules',
            'subjects': 'subjects'
        }

        self._non_resource_rules = non_resource_rules
        self._resource_rules = resource_rules
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.  # noqa: E501
        :rtype: IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects
        """
        return util.deserialize_model(dikt, cls)

    @property
    def non_resource_rules(self) -> List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]:
        """Gets the non_resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.  # noqa: E501

        :return: The non_resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :rtype: List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]
        """
        return self._non_resource_rules

    @non_resource_rules.setter
    def non_resource_rules(self, non_resource_rules: List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]):
        """Sets the non_resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.  # noqa: E501

        :param non_resource_rules: The non_resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :type non_resource_rules: List[IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule]
        """

        self._non_resource_rules = non_resource_rules

    @property
    def resource_rules(self) -> List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]:
        """Gets the resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.  # noqa: E501

        :return: The resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :rtype: List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]
        """
        return self._resource_rules

    @resource_rules.setter
    def resource_rules(self, resource_rules: List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]):
        """Sets the resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.  # noqa: E501

        :param resource_rules: The resource_rules of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :type resource_rules: List[IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule]
        """

        self._resource_rules = resource_rules

    @property
    def subjects(self) -> List[IoK8sApiFlowcontrolV1alpha1Subject]:
        """Gets the subjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.  # noqa: E501

        :return: The subjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :rtype: List[IoK8sApiFlowcontrolV1alpha1Subject]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects: List[IoK8sApiFlowcontrolV1alpha1Subject]):
        """Sets the subjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.

        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.  # noqa: E501

        :param subjects: The subjects of this IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects.
        :type subjects: List[IoK8sApiFlowcontrolV1alpha1Subject]
        """
        if subjects is None:
            raise ValueError("Invalid value for `subjects`, must not be `None`")  # noqa: E501

        self._subjects = subjects
