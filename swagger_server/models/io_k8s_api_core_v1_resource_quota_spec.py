# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ResourceQuotaSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, scope_selector: IoK8sApiCoreV1ScopeSelector=None, scopes: List[str]=None):  # noqa: E501
        """IoK8sApiCoreV1ResourceQuotaSpec - a model defined in Swagger

        :param hard: The hard of this IoK8sApiCoreV1ResourceQuotaSpec.  # noqa: E501
        :type hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param scope_selector: The scope_selector of this IoK8sApiCoreV1ResourceQuotaSpec.  # noqa: E501
        :type scope_selector: IoK8sApiCoreV1ScopeSelector
        :param scopes: The scopes of this IoK8sApiCoreV1ResourceQuotaSpec.  # noqa: E501
        :type scopes: List[str]
        """
        self.swagger_types = {
            'hard': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'scope_selector': IoK8sApiCoreV1ScopeSelector,
            'scopes': List[str]
        }

        self.attribute_map = {
            'hard': 'hard',
            'scope_selector': 'scopeSelector',
            'scopes': 'scopes'
        }

        self._hard = hard
        self._scope_selector = scope_selector
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ResourceQuotaSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ResourceQuotaSpec of this IoK8sApiCoreV1ResourceQuotaSpec.  # noqa: E501
        :rtype: IoK8sApiCoreV1ResourceQuotaSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hard(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the hard of this IoK8sApiCoreV1ResourceQuotaSpec.

        hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/  # noqa: E501

        :return: The hard of this IoK8sApiCoreV1ResourceQuotaSpec.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._hard

    @hard.setter
    def hard(self, hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the hard of this IoK8sApiCoreV1ResourceQuotaSpec.

        hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/  # noqa: E501

        :param hard: The hard of this IoK8sApiCoreV1ResourceQuotaSpec.
        :type hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._hard = hard

    @property
    def scope_selector(self) -> IoK8sApiCoreV1ScopeSelector:
        """Gets the scope_selector of this IoK8sApiCoreV1ResourceQuotaSpec.

        scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.  # noqa: E501

        :return: The scope_selector of this IoK8sApiCoreV1ResourceQuotaSpec.
        :rtype: IoK8sApiCoreV1ScopeSelector
        """
        return self._scope_selector

    @scope_selector.setter
    def scope_selector(self, scope_selector: IoK8sApiCoreV1ScopeSelector):
        """Sets the scope_selector of this IoK8sApiCoreV1ResourceQuotaSpec.

        scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.  # noqa: E501

        :param scope_selector: The scope_selector of this IoK8sApiCoreV1ResourceQuotaSpec.
        :type scope_selector: IoK8sApiCoreV1ScopeSelector
        """

        self._scope_selector = scope_selector

    @property
    def scopes(self) -> List[str]:
        """Gets the scopes of this IoK8sApiCoreV1ResourceQuotaSpec.

        A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.  # noqa: E501

        :return: The scopes of this IoK8sApiCoreV1ResourceQuotaSpec.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes: List[str]):
        """Sets the scopes of this IoK8sApiCoreV1ResourceQuotaSpec.

        A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.  # noqa: E501

        :param scopes: The scopes of this IoK8sApiCoreV1ResourceQuotaSpec.
        :type scopes: List[str]
        """

        self._scopes = scopes
