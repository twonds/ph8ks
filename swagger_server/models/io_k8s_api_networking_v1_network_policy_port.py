# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNetworkingV1NetworkPolicyPort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, port: IoK8sApimachineryPkgUtilIntstrIntOrString=None, protocol: str=None):  # noqa: E501
        """IoK8sApiNetworkingV1NetworkPolicyPort - a model defined in Swagger

        :param port: The port of this IoK8sApiNetworkingV1NetworkPolicyPort.  # noqa: E501
        :type port: IoK8sApimachineryPkgUtilIntstrIntOrString
        :param protocol: The protocol of this IoK8sApiNetworkingV1NetworkPolicyPort.  # noqa: E501
        :type protocol: str
        """
        self.swagger_types = {
            'port': IoK8sApimachineryPkgUtilIntstrIntOrString,
            'protocol': str
        }

        self.attribute_map = {
            'port': 'port',
            'protocol': 'protocol'
        }

        self._port = port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNetworkingV1NetworkPolicyPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.networking.v1.NetworkPolicyPort of this IoK8sApiNetworkingV1NetworkPolicyPort.  # noqa: E501
        :rtype: IoK8sApiNetworkingV1NetworkPolicyPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the port of this IoK8sApiNetworkingV1NetworkPolicyPort.

        The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.  # noqa: E501

        :return: The port of this IoK8sApiNetworkingV1NetworkPolicyPort.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._port

    @port.setter
    def port(self, port: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the port of this IoK8sApiNetworkingV1NetworkPolicyPort.

        The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.  # noqa: E501

        :param port: The port of this IoK8sApiNetworkingV1NetworkPolicyPort.
        :type port: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._port = port

    @property
    def protocol(self) -> str:
        """Gets the protocol of this IoK8sApiNetworkingV1NetworkPolicyPort.

        The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.  # noqa: E501

        :return: The protocol of this IoK8sApiNetworkingV1NetworkPolicyPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this IoK8sApiNetworkingV1NetworkPolicyPort.

        The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.  # noqa: E501

        :param protocol: The protocol of this IoK8sApiNetworkingV1NetworkPolicyPort.
        :type protocol: str
        """

        self._protocol = protocol
