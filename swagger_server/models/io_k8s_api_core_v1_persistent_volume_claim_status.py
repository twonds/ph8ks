# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PersistentVolumeClaimStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_modes: List[str]=None, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, conditions: List[IoK8sApiCoreV1PersistentVolumeClaimCondition]=None, phase: str=None):  # noqa: E501
        """IoK8sApiCoreV1PersistentVolumeClaimStatus - a model defined in Swagger

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimStatus.  # noqa: E501
        :type access_modes: List[str]
        :param capacity: The capacity of this IoK8sApiCoreV1PersistentVolumeClaimStatus.  # noqa: E501
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param conditions: The conditions of this IoK8sApiCoreV1PersistentVolumeClaimStatus.  # noqa: E501
        :type conditions: List[IoK8sApiCoreV1PersistentVolumeClaimCondition]
        :param phase: The phase of this IoK8sApiCoreV1PersistentVolumeClaimStatus.  # noqa: E501
        :type phase: str
        """
        self.swagger_types = {
            'access_modes': List[str],
            'capacity': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'conditions': List[IoK8sApiCoreV1PersistentVolumeClaimCondition],
            'phase': str
        }

        self.attribute_map = {
            'access_modes': 'accessModes',
            'capacity': 'capacity',
            'conditions': 'conditions',
            'phase': 'phase'
        }

        self._access_modes = access_modes
        self._capacity = capacity
        self._conditions = conditions
        self._phase = phase

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PersistentVolumeClaimStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PersistentVolumeClaimStatus of this IoK8sApiCoreV1PersistentVolumeClaimStatus.  # noqa: E501
        :rtype: IoK8sApiCoreV1PersistentVolumeClaimStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_modes(self) -> List[str]:
        """Gets the access_modes of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :return: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :rtype: List[str]
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes: List[str]):
        """Sets the access_modes of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :type access_modes: List[str]
        """

        self._access_modes = access_modes

    @property
    def capacity(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the capacity of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Represents the actual resources of the underlying volume.  # noqa: E501

        :return: The capacity of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the capacity of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Represents the actual resources of the underlying volume.  # noqa: E501

        :param capacity: The capacity of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._capacity = capacity

    @property
    def conditions(self) -> List[IoK8sApiCoreV1PersistentVolumeClaimCondition]:
        """Gets the conditions of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.  # noqa: E501

        :return: The conditions of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :rtype: List[IoK8sApiCoreV1PersistentVolumeClaimCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: List[IoK8sApiCoreV1PersistentVolumeClaimCondition]):
        """Sets the conditions of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.  # noqa: E501

        :param conditions: The conditions of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :type conditions: List[IoK8sApiCoreV1PersistentVolumeClaimCondition]
        """

        self._conditions = conditions

    @property
    def phase(self) -> str:
        """Gets the phase of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Phase represents the current phase of PersistentVolumeClaim.  # noqa: E501

        :return: The phase of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase: str):
        """Sets the phase of this IoK8sApiCoreV1PersistentVolumeClaimStatus.

        Phase represents the current phase of PersistentVolumeClaim.  # noqa: E501

        :param phase: The phase of this IoK8sApiCoreV1PersistentVolumeClaimStatus.
        :type phase: str
        """

        self._phase = phase
