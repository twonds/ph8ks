# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAuthorizationV1SubjectAccessReviewStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, denied: bool=None, evaluation_error: str=None, reason: str=None):  # noqa: E501
        """IoK8sApiAuthorizationV1SubjectAccessReviewStatus - a model defined in Swagger

        :param allowed: The allowed of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.  # noqa: E501
        :type allowed: bool
        :param denied: The denied of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.  # noqa: E501
        :type denied: bool
        :param evaluation_error: The evaluation_error of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.  # noqa: E501
        :type evaluation_error: str
        :param reason: The reason of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.  # noqa: E501
        :type reason: str
        """
        self.swagger_types = {
            'allowed': bool,
            'denied': bool,
            'evaluation_error': str,
            'reason': str
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'denied': 'denied',
            'evaluation_error': 'evaluationError',
            'reason': 'reason'
        }

        self._allowed = allowed
        self._denied = denied
        self._evaluation_error = evaluation_error
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAuthorizationV1SubjectAccessReviewStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.authorization.v1.SubjectAccessReviewStatus of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.  # noqa: E501
        :rtype: IoK8sApiAuthorizationV1SubjectAccessReviewStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self) -> bool:
        """Gets the allowed of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Allowed is required. True if the action would be allowed, false otherwise.  # noqa: E501

        :return: The allowed of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed: bool):
        """Sets the allowed of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Allowed is required. True if the action would be allowed, false otherwise.  # noqa: E501

        :param allowed: The allowed of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :type allowed: bool
        """
        if allowed is None:
            raise ValueError("Invalid value for `allowed`, must not be `None`")  # noqa: E501

        self._allowed = allowed

    @property
    def denied(self) -> bool:
        """Gets the denied of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.  # noqa: E501

        :return: The denied of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :rtype: bool
        """
        return self._denied

    @denied.setter
    def denied(self, denied: bool):
        """Sets the denied of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.  # noqa: E501

        :param denied: The denied of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :type denied: bool
        """

        self._denied = denied

    @property
    def evaluation_error(self) -> str:
        """Gets the evaluation_error of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.  # noqa: E501

        :return: The evaluation_error of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :rtype: str
        """
        return self._evaluation_error

    @evaluation_error.setter
    def evaluation_error(self, evaluation_error: str):
        """Sets the evaluation_error of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.  # noqa: E501

        :param evaluation_error: The evaluation_error of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :type evaluation_error: str
        """

        self._evaluation_error = evaluation_error

    @property
    def reason(self) -> str:
        """Gets the reason of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Reason is optional.  It indicates why a request was allowed or denied.  # noqa: E501

        :return: The reason of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.

        Reason is optional.  It indicates why a request was allowed or denied.  # noqa: E501

        :param reason: The reason of this IoK8sApiAuthorizationV1SubjectAccessReviewStatus.
        :type reason: str
        """

        self._reason = reason
