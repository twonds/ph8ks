# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, distinguisher_method: IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod=None, matching_precedence: int=None, priority_level_configuration: IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference=None, rules: List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]=None):  # noqa: E501
        """IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec - a model defined in Swagger

        :param distinguisher_method: The distinguisher_method of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.  # noqa: E501
        :type distinguisher_method: IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod
        :param matching_precedence: The matching_precedence of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.  # noqa: E501
        :type matching_precedence: int
        :param priority_level_configuration: The priority_level_configuration of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.  # noqa: E501
        :type priority_level_configuration: IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference
        :param rules: The rules of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.  # noqa: E501
        :type rules: List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]
        """
        self.swagger_types = {
            'distinguisher_method': IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod,
            'matching_precedence': int,
            'priority_level_configuration': IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference,
            'rules': List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]
        }

        self.attribute_map = {
            'distinguisher_method': 'distinguisherMethod',
            'matching_precedence': 'matchingPrecedence',
            'priority_level_configuration': 'priorityLevelConfiguration',
            'rules': 'rules'
        }

        self._distinguisher_method = distinguisher_method
        self._matching_precedence = matching_precedence
        self._priority_level_configuration = priority_level_configuration
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.  # noqa: E501
        :rtype: IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distinguisher_method(self) -> IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod:
        """Gets the distinguisher_method of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.  # noqa: E501

        :return: The distinguisher_method of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :rtype: IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod
        """
        return self._distinguisher_method

    @distinguisher_method.setter
    def distinguisher_method(self, distinguisher_method: IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod):
        """Sets the distinguisher_method of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.  # noqa: E501

        :param distinguisher_method: The distinguisher_method of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :type distinguisher_method: IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod
        """

        self._distinguisher_method = distinguisher_method

    @property
    def matching_precedence(self) -> int:
        """Gets the matching_precedence of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.  # noqa: E501

        :return: The matching_precedence of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :rtype: int
        """
        return self._matching_precedence

    @matching_precedence.setter
    def matching_precedence(self, matching_precedence: int):
        """Sets the matching_precedence of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.  # noqa: E501

        :param matching_precedence: The matching_precedence of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :type matching_precedence: int
        """

        self._matching_precedence = matching_precedence

    @property
    def priority_level_configuration(self) -> IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference:
        """Gets the priority_level_configuration of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.  # noqa: E501

        :return: The priority_level_configuration of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :rtype: IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference
        """
        return self._priority_level_configuration

    @priority_level_configuration.setter
    def priority_level_configuration(self, priority_level_configuration: IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference):
        """Sets the priority_level_configuration of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.  # noqa: E501

        :param priority_level_configuration: The priority_level_configuration of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :type priority_level_configuration: IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference
        """
        if priority_level_configuration is None:
            raise ValueError("Invalid value for `priority_level_configuration`, must not be `None`")  # noqa: E501

        self._priority_level_configuration = priority_level_configuration

    @property
    def rules(self) -> List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]:
        """Gets the rules of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.  # noqa: E501

        :return: The rules of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :rtype: List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]):
        """Sets the rules of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.

        `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.  # noqa: E501

        :param rules: The rules of this IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec.
        :type rules: List[IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects]
        """

        self._rules = rules
