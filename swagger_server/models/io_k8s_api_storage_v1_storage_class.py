# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiStorageV1StorageClass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, allow_volume_expansion: bool=None, allowed_topologies: List[IoK8sApiCoreV1TopologySelectorTerm]=None, api_version: str=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, mount_options: List[str]=None, parameters: Dict[str, str]=None, provisioner: str=None, reclaim_policy: str=None, volume_binding_mode: str=None):  # noqa: E501
        """IoK8sApiStorageV1StorageClass - a model defined in Swagger

        :param allow_volume_expansion: The allow_volume_expansion of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type allow_volume_expansion: bool
        :param allowed_topologies: The allowed_topologies of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type allowed_topologies: List[IoK8sApiCoreV1TopologySelectorTerm]
        :param api_version: The api_version of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param mount_options: The mount_options of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type mount_options: List[str]
        :param parameters: The parameters of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type parameters: Dict[str, str]
        :param provisioner: The provisioner of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type provisioner: str
        :param reclaim_policy: The reclaim_policy of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type reclaim_policy: str
        :param volume_binding_mode: The volume_binding_mode of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :type volume_binding_mode: str
        """
        self.swagger_types = {
            'allow_volume_expansion': bool,
            'allowed_topologies': List[IoK8sApiCoreV1TopologySelectorTerm],
            'api_version': str,
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'mount_options': List[str],
            'parameters': Dict[str, str],
            'provisioner': str,
            'reclaim_policy': str,
            'volume_binding_mode': str
        }

        self.attribute_map = {
            'allow_volume_expansion': 'allowVolumeExpansion',
            'allowed_topologies': 'allowedTopologies',
            'api_version': 'apiVersion',
            'kind': 'kind',
            'metadata': 'metadata',
            'mount_options': 'mountOptions',
            'parameters': 'parameters',
            'provisioner': 'provisioner',
            'reclaim_policy': 'reclaimPolicy',
            'volume_binding_mode': 'volumeBindingMode'
        }

        self._allow_volume_expansion = allow_volume_expansion
        self._allowed_topologies = allowed_topologies
        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._mount_options = mount_options
        self._parameters = parameters
        self._provisioner = provisioner
        self._reclaim_policy = reclaim_policy
        self._volume_binding_mode = volume_binding_mode

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiStorageV1StorageClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.storage.v1.StorageClass of this IoK8sApiStorageV1StorageClass.  # noqa: E501
        :rtype: IoK8sApiStorageV1StorageClass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_volume_expansion(self) -> bool:
        """Gets the allow_volume_expansion of this IoK8sApiStorageV1StorageClass.

        AllowVolumeExpansion shows whether the storage class allow volume expand  # noqa: E501

        :return: The allow_volume_expansion of this IoK8sApiStorageV1StorageClass.
        :rtype: bool
        """
        return self._allow_volume_expansion

    @allow_volume_expansion.setter
    def allow_volume_expansion(self, allow_volume_expansion: bool):
        """Sets the allow_volume_expansion of this IoK8sApiStorageV1StorageClass.

        AllowVolumeExpansion shows whether the storage class allow volume expand  # noqa: E501

        :param allow_volume_expansion: The allow_volume_expansion of this IoK8sApiStorageV1StorageClass.
        :type allow_volume_expansion: bool
        """

        self._allow_volume_expansion = allow_volume_expansion

    @property
    def allowed_topologies(self) -> List[IoK8sApiCoreV1TopologySelectorTerm]:
        """Gets the allowed_topologies of this IoK8sApiStorageV1StorageClass.

        Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :return: The allowed_topologies of this IoK8sApiStorageV1StorageClass.
        :rtype: List[IoK8sApiCoreV1TopologySelectorTerm]
        """
        return self._allowed_topologies

    @allowed_topologies.setter
    def allowed_topologies(self, allowed_topologies: List[IoK8sApiCoreV1TopologySelectorTerm]):
        """Sets the allowed_topologies of this IoK8sApiStorageV1StorageClass.

        Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :param allowed_topologies: The allowed_topologies of this IoK8sApiStorageV1StorageClass.
        :type allowed_topologies: List[IoK8sApiCoreV1TopologySelectorTerm]
        """

        self._allowed_topologies = allowed_topologies

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiStorageV1StorageClass.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiStorageV1StorageClass.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiStorageV1StorageClass.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiStorageV1StorageClass.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiStorageV1StorageClass.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiStorageV1StorageClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiStorageV1StorageClass.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiStorageV1StorageClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiStorageV1StorageClass.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The metadata of this IoK8sApiStorageV1StorageClass.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiStorageV1StorageClass.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param metadata: The metadata of this IoK8sApiStorageV1StorageClass.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def mount_options(self) -> List[str]:
        """Gets the mount_options of this IoK8sApiStorageV1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.  # noqa: E501

        :return: The mount_options of this IoK8sApiStorageV1StorageClass.
        :rtype: List[str]
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options: List[str]):
        """Sets the mount_options of this IoK8sApiStorageV1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.  # noqa: E501

        :param mount_options: The mount_options of this IoK8sApiStorageV1StorageClass.
        :type mount_options: List[str]
        """

        self._mount_options = mount_options

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this IoK8sApiStorageV1StorageClass.

        Parameters holds the parameters for the provisioner that should create volumes of this storage class.  # noqa: E501

        :return: The parameters of this IoK8sApiStorageV1StorageClass.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this IoK8sApiStorageV1StorageClass.

        Parameters holds the parameters for the provisioner that should create volumes of this storage class.  # noqa: E501

        :param parameters: The parameters of this IoK8sApiStorageV1StorageClass.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def provisioner(self) -> str:
        """Gets the provisioner of this IoK8sApiStorageV1StorageClass.

        Provisioner indicates the type of the provisioner.  # noqa: E501

        :return: The provisioner of this IoK8sApiStorageV1StorageClass.
        :rtype: str
        """
        return self._provisioner

    @provisioner.setter
    def provisioner(self, provisioner: str):
        """Sets the provisioner of this IoK8sApiStorageV1StorageClass.

        Provisioner indicates the type of the provisioner.  # noqa: E501

        :param provisioner: The provisioner of this IoK8sApiStorageV1StorageClass.
        :type provisioner: str
        """
        if provisioner is None:
            raise ValueError("Invalid value for `provisioner`, must not be `None`")  # noqa: E501

        self._provisioner = provisioner

    @property
    def reclaim_policy(self) -> str:
        """Gets the reclaim_policy of this IoK8sApiStorageV1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.  # noqa: E501

        :return: The reclaim_policy of this IoK8sApiStorageV1StorageClass.
        :rtype: str
        """
        return self._reclaim_policy

    @reclaim_policy.setter
    def reclaim_policy(self, reclaim_policy: str):
        """Sets the reclaim_policy of this IoK8sApiStorageV1StorageClass.

        Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.  # noqa: E501

        :param reclaim_policy: The reclaim_policy of this IoK8sApiStorageV1StorageClass.
        :type reclaim_policy: str
        """

        self._reclaim_policy = reclaim_policy

    @property
    def volume_binding_mode(self) -> str:
        """Gets the volume_binding_mode of this IoK8sApiStorageV1StorageClass.

        VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :return: The volume_binding_mode of this IoK8sApiStorageV1StorageClass.
        :rtype: str
        """
        return self._volume_binding_mode

    @volume_binding_mode.setter
    def volume_binding_mode(self, volume_binding_mode: str):
        """Sets the volume_binding_mode of this IoK8sApiStorageV1StorageClass.

        VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.  # noqa: E501

        :param volume_binding_mode: The volume_binding_mode of this IoK8sApiStorageV1StorageClass.
        :type volume_binding_mode: str
        """

        self._volume_binding_mode = volume_binding_mode
