# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, admission_review_versions: List[str]=None, client_config: IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig=None, failure_policy: str=None, match_policy: str=None, name: str=None, namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, object_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, rules: List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]=None, side_effects: str=None, timeout_seconds: int=None):  # noqa: E501
        """IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook - a model defined in Swagger

        :param admission_review_versions: The admission_review_versions of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type admission_review_versions: List[str]
        :param client_config: The client_config of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type client_config: IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig
        :param failure_policy: The failure_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type failure_policy: str
        :param match_policy: The match_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type match_policy: str
        :param name: The name of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type name: str
        :param namespace_selector: The namespace_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param object_selector: The object_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type object_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param rules: The rules of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type rules: List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]
        :param side_effects: The side_effects of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type side_effects: str
        :param timeout_seconds: The timeout_seconds of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :type timeout_seconds: int
        """
        self.swagger_types = {
            'admission_review_versions': List[str],
            'client_config': IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig,
            'failure_policy': str,
            'match_policy': str,
            'name': str,
            'namespace_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'object_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'rules': List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations],
            'side_effects': str,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'admission_review_versions': 'admissionReviewVersions',
            'client_config': 'clientConfig',
            'failure_policy': 'failurePolicy',
            'match_policy': 'matchPolicy',
            'name': 'name',
            'namespace_selector': 'namespaceSelector',
            'object_selector': 'objectSelector',
            'rules': 'rules',
            'side_effects': 'sideEffects',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._admission_review_versions = admission_review_versions
        self._client_config = client_config
        self._failure_policy = failure_policy
        self._match_policy = match_policy
        self._name = name
        self._namespace_selector = namespace_selector
        self._object_selector = object_selector
        self._rules = rules
        self._side_effects = side_effects
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.  # noqa: E501
        :rtype: IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admission_review_versions(self) -> List[str]:
        """Gets the admission_review_versions of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.  # noqa: E501

        :return: The admission_review_versions of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: List[str]
        """
        return self._admission_review_versions

    @admission_review_versions.setter
    def admission_review_versions(self, admission_review_versions: List[str]):
        """Sets the admission_review_versions of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.  # noqa: E501

        :param admission_review_versions: The admission_review_versions of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type admission_review_versions: List[str]
        """

        self._admission_review_versions = admission_review_versions

    @property
    def client_config(self) -> IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig:
        """Gets the client_config of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        ClientConfig defines how to communicate with the hook. Required  # noqa: E501

        :return: The client_config of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig
        """
        return self._client_config

    @client_config.setter
    def client_config(self, client_config: IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig):
        """Sets the client_config of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        ClientConfig defines how to communicate with the hook. Required  # noqa: E501

        :param client_config: The client_config of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type client_config: IoK8sApiAdmissionregistrationV1beta1WebhookClientConfig
        """
        if client_config is None:
            raise ValueError("Invalid value for `client_config`, must not be `None`")  # noqa: E501

        self._client_config = client_config

    @property
    def failure_policy(self) -> str:
        """Gets the failure_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.  # noqa: E501

        :return: The failure_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: str
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy: str):
        """Sets the failure_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.  # noqa: E501

        :param failure_policy: The failure_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type failure_policy: str
        """

        self._failure_policy = failure_policy

    @property
    def match_policy(self) -> str:
        """Gets the match_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.  Defaults to \"Exact\"  # noqa: E501

        :return: The match_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: str
        """
        return self._match_policy

    @match_policy.setter
    def match_policy(self, match_policy: str):
        """Sets the match_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.  Defaults to \"Exact\"  # noqa: E501

        :param match_policy: The match_policy of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type match_policy: str
        """

        self._match_policy = match_policy

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.  # noqa: E501

        :return: The name of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.  # noqa: E501

        :param name: The name of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the namespace_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.  For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"runlevel\",       \"operator\": \"NotIn\",       \"values\": [         \"0\",         \"1\"       ]     }   ] }  If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"environment\",       \"operator\": \"In\",       \"values\": [         \"prod\",         \"staging\"       ]     }   ] }  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.  Default to the empty LabelSelector, which matches everything.  # noqa: E501

        :return: The namespace_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._namespace_selector

    @namespace_selector.setter
    def namespace_selector(self, namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the namespace_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.  For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"runlevel\",       \"operator\": \"NotIn\",       \"values\": [         \"0\",         \"1\"       ]     }   ] }  If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"environment\",       \"operator\": \"In\",       \"values\": [         \"prod\",         \"staging\"       ]     }   ] }  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.  Default to the empty LabelSelector, which matches everything.  # noqa: E501

        :param namespace_selector: The namespace_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._namespace_selector = namespace_selector

    @property
    def object_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the object_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.  # noqa: E501

        :return: The object_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._object_selector

    @object_selector.setter
    def object_selector(self, object_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the object_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.  # noqa: E501

        :param object_selector: The object_selector of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type object_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._object_selector = object_selector

    @property
    def rules(self) -> List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]:
        """Gets the rules of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.  # noqa: E501

        :return: The rules of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]):
        """Sets the rules of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.  # noqa: E501

        :param rules: The rules of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type rules: List[IoK8sApiAdmissionregistrationV1beta1RuleWithOperations]
        """

        self._rules = rules

    @property
    def side_effects(self) -> str:
        """Gets the side_effects of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.  # noqa: E501

        :return: The side_effects of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: str
        """
        return self._side_effects

    @side_effects.setter
    def side_effects(self, side_effects: str):
        """Sets the side_effects of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.  # noqa: E501

        :param side_effects: The side_effects of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type side_effects: str
        """

        self._side_effects = side_effects

    @property
    def timeout_seconds(self) -> int:
        """Gets the timeout_seconds of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.  # noqa: E501

        :return: The timeout_seconds of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds: int):
        """Sets the timeout_seconds of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.

        TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this IoK8sApiAdmissionregistrationV1beta1ValidatingWebhook.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
