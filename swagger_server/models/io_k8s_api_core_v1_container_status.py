# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ContainerStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, container_id: str=None, image: str=None, image_id: str=None, last_state: IoK8sApiCoreV1ContainerState=None, name: str=None, ready: bool=None, restart_count: int=None, started: bool=None, state: IoK8sApiCoreV1ContainerState=None):  # noqa: E501
        """IoK8sApiCoreV1ContainerStatus - a model defined in Swagger

        :param container_id: The container_id of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type container_id: str
        :param image: The image of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type image: str
        :param image_id: The image_id of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type image_id: str
        :param last_state: The last_state of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type last_state: IoK8sApiCoreV1ContainerState
        :param name: The name of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type name: str
        :param ready: The ready of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type ready: bool
        :param restart_count: The restart_count of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type restart_count: int
        :param started: The started of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type started: bool
        :param state: The state of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :type state: IoK8sApiCoreV1ContainerState
        """
        self.swagger_types = {
            'container_id': str,
            'image': str,
            'image_id': str,
            'last_state': IoK8sApiCoreV1ContainerState,
            'name': str,
            'ready': bool,
            'restart_count': int,
            'started': bool,
            'state': IoK8sApiCoreV1ContainerState
        }

        self.attribute_map = {
            'container_id': 'containerID',
            'image': 'image',
            'image_id': 'imageID',
            'last_state': 'lastState',
            'name': 'name',
            'ready': 'ready',
            'restart_count': 'restartCount',
            'started': 'started',
            'state': 'state'
        }

        self._container_id = container_id
        self._image = image
        self._image_id = image_id
        self._last_state = last_state
        self._name = name
        self._ready = ready
        self._restart_count = restart_count
        self._started = started
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ContainerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ContainerStatus of this IoK8sApiCoreV1ContainerStatus.  # noqa: E501
        :rtype: IoK8sApiCoreV1ContainerStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self) -> str:
        """Gets the container_id of this IoK8sApiCoreV1ContainerStatus.

        Container's ID in the format 'docker://<container_id>'.  # noqa: E501

        :return: The container_id of this IoK8sApiCoreV1ContainerStatus.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id: str):
        """Sets the container_id of this IoK8sApiCoreV1ContainerStatus.

        Container's ID in the format 'docker://<container_id>'.  # noqa: E501

        :param container_id: The container_id of this IoK8sApiCoreV1ContainerStatus.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def image(self) -> str:
        """Gets the image of this IoK8sApiCoreV1ContainerStatus.

        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images  # noqa: E501

        :return: The image of this IoK8sApiCoreV1ContainerStatus.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this IoK8sApiCoreV1ContainerStatus.

        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images  # noqa: E501

        :param image: The image of this IoK8sApiCoreV1ContainerStatus.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def image_id(self) -> str:
        """Gets the image_id of this IoK8sApiCoreV1ContainerStatus.

        ImageID of the container's image.  # noqa: E501

        :return: The image_id of this IoK8sApiCoreV1ContainerStatus.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: str):
        """Sets the image_id of this IoK8sApiCoreV1ContainerStatus.

        ImageID of the container's image.  # noqa: E501

        :param image_id: The image_id of this IoK8sApiCoreV1ContainerStatus.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def last_state(self) -> IoK8sApiCoreV1ContainerState:
        """Gets the last_state of this IoK8sApiCoreV1ContainerStatus.

        Details about the container's last termination condition.  # noqa: E501

        :return: The last_state of this IoK8sApiCoreV1ContainerStatus.
        :rtype: IoK8sApiCoreV1ContainerState
        """
        return self._last_state

    @last_state.setter
    def last_state(self, last_state: IoK8sApiCoreV1ContainerState):
        """Sets the last_state of this IoK8sApiCoreV1ContainerStatus.

        Details about the container's last termination condition.  # noqa: E501

        :param last_state: The last_state of this IoK8sApiCoreV1ContainerStatus.
        :type last_state: IoK8sApiCoreV1ContainerState
        """

        self._last_state = last_state

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1ContainerStatus.

        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1ContainerStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1ContainerStatus.

        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1ContainerStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ready(self) -> bool:
        """Gets the ready of this IoK8sApiCoreV1ContainerStatus.

        Specifies whether the container has passed its readiness probe.  # noqa: E501

        :return: The ready of this IoK8sApiCoreV1ContainerStatus.
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready: bool):
        """Sets the ready of this IoK8sApiCoreV1ContainerStatus.

        Specifies whether the container has passed its readiness probe.  # noqa: E501

        :param ready: The ready of this IoK8sApiCoreV1ContainerStatus.
        :type ready: bool
        """
        if ready is None:
            raise ValueError("Invalid value for `ready`, must not be `None`")  # noqa: E501

        self._ready = ready

    @property
    def restart_count(self) -> int:
        """Gets the restart_count of this IoK8sApiCoreV1ContainerStatus.

        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.  # noqa: E501

        :return: The restart_count of this IoK8sApiCoreV1ContainerStatus.
        :rtype: int
        """
        return self._restart_count

    @restart_count.setter
    def restart_count(self, restart_count: int):
        """Sets the restart_count of this IoK8sApiCoreV1ContainerStatus.

        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.  # noqa: E501

        :param restart_count: The restart_count of this IoK8sApiCoreV1ContainerStatus.
        :type restart_count: int
        """
        if restart_count is None:
            raise ValueError("Invalid value for `restart_count`, must not be `None`")  # noqa: E501

        self._restart_count = restart_count

    @property
    def started(self) -> bool:
        """Gets the started of this IoK8sApiCoreV1ContainerStatus.

        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.  # noqa: E501

        :return: The started of this IoK8sApiCoreV1ContainerStatus.
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started: bool):
        """Sets the started of this IoK8sApiCoreV1ContainerStatus.

        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.  # noqa: E501

        :param started: The started of this IoK8sApiCoreV1ContainerStatus.
        :type started: bool
        """

        self._started = started

    @property
    def state(self) -> IoK8sApiCoreV1ContainerState:
        """Gets the state of this IoK8sApiCoreV1ContainerStatus.

        Details about the container's current condition.  # noqa: E501

        :return: The state of this IoK8sApiCoreV1ContainerStatus.
        :rtype: IoK8sApiCoreV1ContainerState
        """
        return self._state

    @state.setter
    def state(self, state: IoK8sApiCoreV1ContainerState):
        """Sets the state of this IoK8sApiCoreV1ContainerStatus.

        Details about the container's current condition.  # noqa: E501

        :param state: The state of this IoK8sApiCoreV1ContainerStatus.
        :type state: IoK8sApiCoreV1ContainerState
        """

        self._state = state
