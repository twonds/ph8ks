# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNetworkingV1NetworkPolicyPeer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip_block: IoK8sApiNetworkingV1IPBlock=None, namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None):  # noqa: E501
        """IoK8sApiNetworkingV1NetworkPolicyPeer - a model defined in Swagger

        :param ip_block: The ip_block of this IoK8sApiNetworkingV1NetworkPolicyPeer.  # noqa: E501
        :type ip_block: IoK8sApiNetworkingV1IPBlock
        :param namespace_selector: The namespace_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.  # noqa: E501
        :type namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param pod_selector: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.  # noqa: E501
        :type pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        self.swagger_types = {
            'ip_block': IoK8sApiNetworkingV1IPBlock,
            'namespace_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'pod_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector
        }

        self.attribute_map = {
            'ip_block': 'ipBlock',
            'namespace_selector': 'namespaceSelector',
            'pod_selector': 'podSelector'
        }

        self._ip_block = ip_block
        self._namespace_selector = namespace_selector
        self._pod_selector = pod_selector

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNetworkingV1NetworkPolicyPeer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.networking.v1.NetworkPolicyPeer of this IoK8sApiNetworkingV1NetworkPolicyPeer.  # noqa: E501
        :rtype: IoK8sApiNetworkingV1NetworkPolicyPeer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_block(self) -> IoK8sApiNetworkingV1IPBlock:
        """Gets the ip_block of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.  # noqa: E501

        :return: The ip_block of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :rtype: IoK8sApiNetworkingV1IPBlock
        """
        return self._ip_block

    @ip_block.setter
    def ip_block(self, ip_block: IoK8sApiNetworkingV1IPBlock):
        """Sets the ip_block of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.  # noqa: E501

        :param ip_block: The ip_block of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :type ip_block: IoK8sApiNetworkingV1IPBlock
        """

        self._ip_block = ip_block

    @property
    def namespace_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the namespace_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.  If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.  # noqa: E501

        :return: The namespace_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._namespace_selector

    @namespace_selector.setter
    def namespace_selector(self, namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the namespace_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.  If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.  # noqa: E501

        :param namespace_selector: The namespace_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :type namespace_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._namespace_selector = namespace_selector

    @property
    def pod_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the pod_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.  If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.  # noqa: E501

        :return: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._pod_selector

    @pod_selector.setter
    def pod_selector(self, pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the pod_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.

        This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.  If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.  # noqa: E501

        :param pod_selector: The pod_selector of this IoK8sApiNetworkingV1NetworkPolicyPeer.
        :type pod_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._pod_selector = pod_selector
