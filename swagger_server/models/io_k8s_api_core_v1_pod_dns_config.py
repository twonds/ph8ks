# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PodDNSConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nameservers: List[str]=None, options: List[IoK8sApiCoreV1PodDNSConfigOption]=None, searches: List[str]=None):  # noqa: E501
        """IoK8sApiCoreV1PodDNSConfig - a model defined in Swagger

        :param nameservers: The nameservers of this IoK8sApiCoreV1PodDNSConfig.  # noqa: E501
        :type nameservers: List[str]
        :param options: The options of this IoK8sApiCoreV1PodDNSConfig.  # noqa: E501
        :type options: List[IoK8sApiCoreV1PodDNSConfigOption]
        :param searches: The searches of this IoK8sApiCoreV1PodDNSConfig.  # noqa: E501
        :type searches: List[str]
        """
        self.swagger_types = {
            'nameservers': List[str],
            'options': List[IoK8sApiCoreV1PodDNSConfigOption],
            'searches': List[str]
        }

        self.attribute_map = {
            'nameservers': 'nameservers',
            'options': 'options',
            'searches': 'searches'
        }

        self._nameservers = nameservers
        self._options = options
        self._searches = searches

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PodDNSConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PodDNSConfig of this IoK8sApiCoreV1PodDNSConfig.  # noqa: E501
        :rtype: IoK8sApiCoreV1PodDNSConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nameservers(self) -> List[str]:
        """Gets the nameservers of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.  # noqa: E501

        :return: The nameservers of this IoK8sApiCoreV1PodDNSConfig.
        :rtype: List[str]
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers: List[str]):
        """Sets the nameservers of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.  # noqa: E501

        :param nameservers: The nameservers of this IoK8sApiCoreV1PodDNSConfig.
        :type nameservers: List[str]
        """

        self._nameservers = nameservers

    @property
    def options(self) -> List[IoK8sApiCoreV1PodDNSConfigOption]:
        """Gets the options of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.  # noqa: E501

        :return: The options of this IoK8sApiCoreV1PodDNSConfig.
        :rtype: List[IoK8sApiCoreV1PodDNSConfigOption]
        """
        return self._options

    @options.setter
    def options(self, options: List[IoK8sApiCoreV1PodDNSConfigOption]):
        """Sets the options of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.  # noqa: E501

        :param options: The options of this IoK8sApiCoreV1PodDNSConfig.
        :type options: List[IoK8sApiCoreV1PodDNSConfigOption]
        """

        self._options = options

    @property
    def searches(self) -> List[str]:
        """Gets the searches of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.  # noqa: E501

        :return: The searches of this IoK8sApiCoreV1PodDNSConfig.
        :rtype: List[str]
        """
        return self._searches

    @searches.setter
    def searches(self, searches: List[str]):
        """Sets the searches of this IoK8sApiCoreV1PodDNSConfig.

        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.  # noqa: E501

        :param searches: The searches of this IoK8sApiCoreV1PodDNSConfig.
        :type searches: List[str]
        """

        self._searches = searches
