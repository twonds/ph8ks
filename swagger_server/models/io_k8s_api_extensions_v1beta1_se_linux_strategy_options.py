# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiExtensionsV1beta1SELinuxStrategyOptions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, rule: str=None, se_linux_options: IoK8sApiCoreV1SELinuxOptions=None):  # noqa: E501
        """IoK8sApiExtensionsV1beta1SELinuxStrategyOptions - a model defined in Swagger

        :param rule: The rule of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.  # noqa: E501
        :type rule: str
        :param se_linux_options: The se_linux_options of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.  # noqa: E501
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        """
        self.swagger_types = {
            'rule': str,
            'se_linux_options': IoK8sApiCoreV1SELinuxOptions
        }

        self.attribute_map = {
            'rule': 'rule',
            'se_linux_options': 'seLinuxOptions'
        }

        self._rule = rule
        self._se_linux_options = se_linux_options

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiExtensionsV1beta1SELinuxStrategyOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.extensions.v1beta1.SELinuxStrategyOptions of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.  # noqa: E501
        :rtype: IoK8sApiExtensionsV1beta1SELinuxStrategyOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self) -> str:
        """Gets the rule of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.

        rule is the strategy that will dictate the allowable labels that may be set.  # noqa: E501

        :return: The rule of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule: str):
        """Sets the rule of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.

        rule is the strategy that will dictate the allowable labels that may be set.  # noqa: E501

        :param rule: The rule of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.
        :type rule: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")  # noqa: E501

        self._rule = rule

    @property
    def se_linux_options(self) -> IoK8sApiCoreV1SELinuxOptions:
        """Gets the se_linux_options of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.

        seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/  # noqa: E501

        :return: The se_linux_options of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.
        :rtype: IoK8sApiCoreV1SELinuxOptions
        """
        return self._se_linux_options

    @se_linux_options.setter
    def se_linux_options(self, se_linux_options: IoK8sApiCoreV1SELinuxOptions):
        """Sets the se_linux_options of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.

        seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/  # noqa: E501

        :param se_linux_options: The se_linux_options of this IoK8sApiExtensionsV1beta1SELinuxStrategyOptions.
        :type se_linux_options: IoK8sApiCoreV1SELinuxOptions
        """

        self._se_linux_options = se_linux_options
