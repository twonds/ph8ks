# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiExtensionsV1beta1DaemonSetSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, min_ready_seconds: int=None, revision_history_limit: int=None, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, template: IoK8sApiCoreV1PodTemplateSpec=None, template_generation: int=None, update_strategy: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy=None):  # noqa: E501
        """IoK8sApiExtensionsV1beta1DaemonSetSpec - a model defined in Swagger

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type min_ready_seconds: int
        :param revision_history_limit: The revision_history_limit of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type revision_history_limit: int
        :param selector: The selector of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param template: The template of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type template: IoK8sApiCoreV1PodTemplateSpec
        :param template_generation: The template_generation of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type template_generation: int
        :param update_strategy: The update_strategy of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :type update_strategy: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy
        """
        self.swagger_types = {
            'min_ready_seconds': int,
            'revision_history_limit': int,
            'selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'template': IoK8sApiCoreV1PodTemplateSpec,
            'template_generation': int,
            'update_strategy': IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy
        }

        self.attribute_map = {
            'min_ready_seconds': 'minReadySeconds',
            'revision_history_limit': 'revisionHistoryLimit',
            'selector': 'selector',
            'template': 'template',
            'template_generation': 'templateGeneration',
            'update_strategy': 'updateStrategy'
        }

        self._min_ready_seconds = min_ready_seconds
        self._revision_history_limit = revision_history_limit
        self._selector = selector
        self._template = template
        self._template_generation = template_generation
        self._update_strategy = update_strategy

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiExtensionsV1beta1DaemonSetSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.extensions.v1beta1.DaemonSetSpec of this IoK8sApiExtensionsV1beta1DaemonSetSpec.  # noqa: E501
        :rtype: IoK8sApiExtensionsV1beta1DaemonSetSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_ready_seconds(self) -> int:
        """Gets the min_ready_seconds of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).  # noqa: E501

        :return: The min_ready_seconds of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: int
        """
        return self._min_ready_seconds

    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds: int):
        """Sets the min_ready_seconds of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type min_ready_seconds: int
        """

        self._min_ready_seconds = min_ready_seconds

    @property
    def revision_history_limit(self) -> int:
        """Gets the revision_history_limit of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.  # noqa: E501

        :return: The revision_history_limit of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: int
        """
        return self._revision_history_limit

    @revision_history_limit.setter
    def revision_history_limit(self, revision_history_limit: int):
        """Sets the revision_history_limit of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.  # noqa: E501

        :param revision_history_limit: The revision_history_limit of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type revision_history_limit: int
        """

        self._revision_history_limit = revision_history_limit

    @property
    def selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the selector of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors  # noqa: E501

        :return: The selector of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the selector of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors  # noqa: E501

        :param selector: The selector of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._selector = selector

    @property
    def template(self) -> IoK8sApiCoreV1PodTemplateSpec:
        """Gets the template of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template  # noqa: E501

        :return: The template of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: IoK8sApiCoreV1PodTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template: IoK8sApiCoreV1PodTemplateSpec):
        """Sets the template of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template  # noqa: E501

        :param template: The template of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type template: IoK8sApiCoreV1PodTemplateSpec
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def template_generation(self) -> int:
        """Gets the template_generation of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.  # noqa: E501

        :return: The template_generation of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: int
        """
        return self._template_generation

    @template_generation.setter
    def template_generation(self, template_generation: int):
        """Sets the template_generation of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.  # noqa: E501

        :param template_generation: The template_generation of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type template_generation: int
        """

        self._template_generation = template_generation

    @property
    def update_strategy(self) -> IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy:
        """Gets the update_strategy of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        An update strategy to replace existing DaemonSet pods with new pods.  # noqa: E501

        :return: The update_strategy of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :rtype: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy
        """
        return self._update_strategy

    @update_strategy.setter
    def update_strategy(self, update_strategy: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy):
        """Sets the update_strategy of this IoK8sApiExtensionsV1beta1DaemonSetSpec.

        An update strategy to replace existing DaemonSet pods with new pods.  # noqa: E501

        :param update_strategy: The update_strategy of this IoK8sApiExtensionsV1beta1DaemonSetSpec.
        :type update_strategy: IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy
        """

        self._update_strategy = update_strategy
