# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1AzureDiskVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, caching_mode: str=None, disk_name: str=None, disk_uri: str=None, fs_type: str=None, kind: str=None, read_only: bool=None):  # noqa: E501
        """IoK8sApiCoreV1AzureDiskVolumeSource - a model defined in Swagger

        :param caching_mode: The caching_mode of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type caching_mode: str
        :param disk_name: The disk_name of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type disk_name: str
        :param disk_uri: The disk_uri of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type disk_uri: str
        :param fs_type: The fs_type of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type fs_type: str
        :param kind: The kind of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type kind: str
        :param read_only: The read_only of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :type read_only: bool
        """
        self.swagger_types = {
            'caching_mode': str,
            'disk_name': str,
            'disk_uri': str,
            'fs_type': str,
            'kind': str,
            'read_only': bool
        }

        self.attribute_map = {
            'caching_mode': 'cachingMode',
            'disk_name': 'diskName',
            'disk_uri': 'diskURI',
            'fs_type': 'fsType',
            'kind': 'kind',
            'read_only': 'readOnly'
        }

        self._caching_mode = caching_mode
        self._disk_name = disk_name
        self._disk_uri = disk_uri
        self._fs_type = fs_type
        self._kind = kind
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1AzureDiskVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.AzureDiskVolumeSource of this IoK8sApiCoreV1AzureDiskVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1AzureDiskVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching_mode(self) -> str:
        """Gets the caching_mode of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Host Caching mode: None, Read Only, Read Write.  # noqa: E501

        :return: The caching_mode of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._caching_mode

    @caching_mode.setter
    def caching_mode(self, caching_mode: str):
        """Sets the caching_mode of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Host Caching mode: None, Read Only, Read Write.  # noqa: E501

        :param caching_mode: The caching_mode of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type caching_mode: str
        """

        self._caching_mode = caching_mode

    @property
    def disk_name(self) -> str:
        """Gets the disk_name of this IoK8sApiCoreV1AzureDiskVolumeSource.

        The Name of the data disk in the blob storage  # noqa: E501

        :return: The disk_name of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._disk_name

    @disk_name.setter
    def disk_name(self, disk_name: str):
        """Sets the disk_name of this IoK8sApiCoreV1AzureDiskVolumeSource.

        The Name of the data disk in the blob storage  # noqa: E501

        :param disk_name: The disk_name of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type disk_name: str
        """
        if disk_name is None:
            raise ValueError("Invalid value for `disk_name`, must not be `None`")  # noqa: E501

        self._disk_name = disk_name

    @property
    def disk_uri(self) -> str:
        """Gets the disk_uri of this IoK8sApiCoreV1AzureDiskVolumeSource.

        The URI the data disk in the blob storage  # noqa: E501

        :return: The disk_uri of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._disk_uri

    @disk_uri.setter
    def disk_uri(self, disk_uri: str):
        """Sets the disk_uri of this IoK8sApiCoreV1AzureDiskVolumeSource.

        The URI the data disk in the blob storage  # noqa: E501

        :param disk_uri: The disk_uri of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type disk_uri: str
        """
        if disk_uri is None:
            raise ValueError("Invalid value for `disk_uri`, must not be `None`")  # noqa: E501

        self._disk_uri = disk_uri

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared  # noqa: E501

        :return: The kind of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared  # noqa: E501

        :param kind: The kind of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type kind: str
        """

        self._kind = kind

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1AzureDiskVolumeSource.

        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1AzureDiskVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only
