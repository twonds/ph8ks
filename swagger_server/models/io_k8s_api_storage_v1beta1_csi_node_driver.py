# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiStorageV1beta1CSINodeDriver(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, allocatable: IoK8sApiStorageV1beta1VolumeNodeResources=None, name: str=None, node_id: str=None, topology_keys: List[str]=None):  # noqa: E501
        """IoK8sApiStorageV1beta1CSINodeDriver - a model defined in Swagger

        :param allocatable: The allocatable of this IoK8sApiStorageV1beta1CSINodeDriver.  # noqa: E501
        :type allocatable: IoK8sApiStorageV1beta1VolumeNodeResources
        :param name: The name of this IoK8sApiStorageV1beta1CSINodeDriver.  # noqa: E501
        :type name: str
        :param node_id: The node_id of this IoK8sApiStorageV1beta1CSINodeDriver.  # noqa: E501
        :type node_id: str
        :param topology_keys: The topology_keys of this IoK8sApiStorageV1beta1CSINodeDriver.  # noqa: E501
        :type topology_keys: List[str]
        """
        self.swagger_types = {
            'allocatable': IoK8sApiStorageV1beta1VolumeNodeResources,
            'name': str,
            'node_id': str,
            'topology_keys': List[str]
        }

        self.attribute_map = {
            'allocatable': 'allocatable',
            'name': 'name',
            'node_id': 'nodeID',
            'topology_keys': 'topologyKeys'
        }

        self._allocatable = allocatable
        self._name = name
        self._node_id = node_id
        self._topology_keys = topology_keys

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiStorageV1beta1CSINodeDriver':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.storage.v1beta1.CSINodeDriver of this IoK8sApiStorageV1beta1CSINodeDriver.  # noqa: E501
        :rtype: IoK8sApiStorageV1beta1CSINodeDriver
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocatable(self) -> IoK8sApiStorageV1beta1VolumeNodeResources:
        """Gets the allocatable of this IoK8sApiStorageV1beta1CSINodeDriver.

        allocatable represents the volume resources of a node that are available for scheduling.  # noqa: E501

        :return: The allocatable of this IoK8sApiStorageV1beta1CSINodeDriver.
        :rtype: IoK8sApiStorageV1beta1VolumeNodeResources
        """
        return self._allocatable

    @allocatable.setter
    def allocatable(self, allocatable: IoK8sApiStorageV1beta1VolumeNodeResources):
        """Sets the allocatable of this IoK8sApiStorageV1beta1CSINodeDriver.

        allocatable represents the volume resources of a node that are available for scheduling.  # noqa: E501

        :param allocatable: The allocatable of this IoK8sApiStorageV1beta1CSINodeDriver.
        :type allocatable: IoK8sApiStorageV1beta1VolumeNodeResources
        """

        self._allocatable = allocatable

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiStorageV1beta1CSINodeDriver.

        This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.  # noqa: E501

        :return: The name of this IoK8sApiStorageV1beta1CSINodeDriver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiStorageV1beta1CSINodeDriver.

        This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.  # noqa: E501

        :param name: The name of this IoK8sApiStorageV1beta1CSINodeDriver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_id(self) -> str:
        """Gets the node_id of this IoK8sApiStorageV1beta1CSINodeDriver.

        nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.  # noqa: E501

        :return: The node_id of this IoK8sApiStorageV1beta1CSINodeDriver.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this IoK8sApiStorageV1beta1CSINodeDriver.

        nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required.  # noqa: E501

        :param node_id: The node_id of this IoK8sApiStorageV1beta1CSINodeDriver.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def topology_keys(self) -> List[str]:
        """Gets the topology_keys of this IoK8sApiStorageV1beta1CSINodeDriver.

        topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.  # noqa: E501

        :return: The topology_keys of this IoK8sApiStorageV1beta1CSINodeDriver.
        :rtype: List[str]
        """
        return self._topology_keys

    @topology_keys.setter
    def topology_keys(self, topology_keys: List[str]):
        """Sets the topology_keys of this IoK8sApiStorageV1beta1CSINodeDriver.

        topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.  # noqa: E501

        :param topology_keys: The topology_keys of this IoK8sApiStorageV1beta1CSINodeDriver.
        :type topology_keys: List[str]
        """

        self._topology_keys = topology_keys
