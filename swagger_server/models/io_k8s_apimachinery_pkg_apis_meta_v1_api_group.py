# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApimachineryPkgApisMetaV1APIGroup(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, kind: str=None, name: str=None, preferred_version: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery=None, server_address_by_client_cid_rs: List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]=None, versions: List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]=None):  # noqa: E501
        """IoK8sApimachineryPkgApisMetaV1APIGroup - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type kind: str
        :param name: The name of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type name: str
        :param preferred_version: The preferred_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type preferred_version: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
        :param server_address_by_client_cid_rs: The server_address_by_client_cid_rs of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type server_address_by_client_cid_rs: List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]
        :param versions: The versions of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :type versions: List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]
        """
        self.swagger_types = {
            'api_version': str,
            'kind': str,
            'name': str,
            'preferred_version': IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery,
            'server_address_by_client_cid_rs': List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR],
            'versions': List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'kind': 'kind',
            'name': 'name',
            'preferred_version': 'preferredVersion',
            'server_address_by_client_cid_rs': 'serverAddressByClientCIDRs',
            'versions': 'versions'
        }

        self._api_version = api_version
        self._kind = kind
        self._name = name
        self._preferred_version = preferred_version
        self._server_address_by_client_cid_rs = server_address_by_client_cid_rs
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApimachineryPkgApisMetaV1APIGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup of this IoK8sApimachineryPkgApisMetaV1APIGroup.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1APIGroup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        name is the name of the group.  # noqa: E501

        :return: The name of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        name is the name of the group.  # noqa: E501

        :param name: The name of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def preferred_version(self) -> IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery:
        """Gets the preferred_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        preferredVersion is the version preferred by the API server, which probably is the storage version.  # noqa: E501

        :return: The preferred_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
        """
        return self._preferred_version

    @preferred_version.setter
    def preferred_version(self, preferred_version: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery):
        """Sets the preferred_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        preferredVersion is the version preferred by the API server, which probably is the storage version.  # noqa: E501

        :param preferred_version: The preferred_version of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type preferred_version: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
        """

        self._preferred_version = preferred_version

    @property
    def server_address_by_client_cid_rs(self) -> List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]:
        """Gets the server_address_by_client_cid_rs of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.  # noqa: E501

        :return: The server_address_by_client_cid_rs of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]
        """
        return self._server_address_by_client_cid_rs

    @server_address_by_client_cid_rs.setter
    def server_address_by_client_cid_rs(self, server_address_by_client_cid_rs: List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]):
        """Sets the server_address_by_client_cid_rs of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.  # noqa: E501

        :param server_address_by_client_cid_rs: The server_address_by_client_cid_rs of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type server_address_by_client_cid_rs: List[IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR]
        """

        self._server_address_by_client_cid_rs = server_address_by_client_cid_rs

    @property
    def versions(self) -> List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]:
        """Gets the versions of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        versions are the versions supported in this group.  # noqa: E501

        :return: The versions of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :rtype: List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]):
        """Sets the versions of this IoK8sApimachineryPkgApisMetaV1APIGroup.

        versions are the versions supported in this group.  # noqa: E501

        :param versions: The versions of this IoK8sApimachineryPkgApisMetaV1APIGroup.
        :type versions: List[IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions
