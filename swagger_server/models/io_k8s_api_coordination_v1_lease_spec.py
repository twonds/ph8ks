# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoordinationV1LeaseSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, acquire_time: IoK8sApimachineryPkgApisMetaV1MicroTime=None, holder_identity: str=None, lease_duration_seconds: int=None, lease_transitions: int=None, renew_time: IoK8sApimachineryPkgApisMetaV1MicroTime=None):  # noqa: E501
        """IoK8sApiCoordinationV1LeaseSpec - a model defined in Swagger

        :param acquire_time: The acquire_time of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :type acquire_time: IoK8sApimachineryPkgApisMetaV1MicroTime
        :param holder_identity: The holder_identity of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :type holder_identity: str
        :param lease_duration_seconds: The lease_duration_seconds of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :type lease_duration_seconds: int
        :param lease_transitions: The lease_transitions of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :type lease_transitions: int
        :param renew_time: The renew_time of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :type renew_time: IoK8sApimachineryPkgApisMetaV1MicroTime
        """
        self.swagger_types = {
            'acquire_time': IoK8sApimachineryPkgApisMetaV1MicroTime,
            'holder_identity': str,
            'lease_duration_seconds': int,
            'lease_transitions': int,
            'renew_time': IoK8sApimachineryPkgApisMetaV1MicroTime
        }

        self.attribute_map = {
            'acquire_time': 'acquireTime',
            'holder_identity': 'holderIdentity',
            'lease_duration_seconds': 'leaseDurationSeconds',
            'lease_transitions': 'leaseTransitions',
            'renew_time': 'renewTime'
        }

        self._acquire_time = acquire_time
        self._holder_identity = holder_identity
        self._lease_duration_seconds = lease_duration_seconds
        self._lease_transitions = lease_transitions
        self._renew_time = renew_time

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoordinationV1LeaseSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.coordination.v1.LeaseSpec of this IoK8sApiCoordinationV1LeaseSpec.  # noqa: E501
        :rtype: IoK8sApiCoordinationV1LeaseSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquire_time(self) -> IoK8sApimachineryPkgApisMetaV1MicroTime:
        """Gets the acquire_time of this IoK8sApiCoordinationV1LeaseSpec.

        acquireTime is a time when the current lease was acquired.  # noqa: E501

        :return: The acquire_time of this IoK8sApiCoordinationV1LeaseSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1MicroTime
        """
        return self._acquire_time

    @acquire_time.setter
    def acquire_time(self, acquire_time: IoK8sApimachineryPkgApisMetaV1MicroTime):
        """Sets the acquire_time of this IoK8sApiCoordinationV1LeaseSpec.

        acquireTime is a time when the current lease was acquired.  # noqa: E501

        :param acquire_time: The acquire_time of this IoK8sApiCoordinationV1LeaseSpec.
        :type acquire_time: IoK8sApimachineryPkgApisMetaV1MicroTime
        """

        self._acquire_time = acquire_time

    @property
    def holder_identity(self) -> str:
        """Gets the holder_identity of this IoK8sApiCoordinationV1LeaseSpec.

        holderIdentity contains the identity of the holder of a current lease.  # noqa: E501

        :return: The holder_identity of this IoK8sApiCoordinationV1LeaseSpec.
        :rtype: str
        """
        return self._holder_identity

    @holder_identity.setter
    def holder_identity(self, holder_identity: str):
        """Sets the holder_identity of this IoK8sApiCoordinationV1LeaseSpec.

        holderIdentity contains the identity of the holder of a current lease.  # noqa: E501

        :param holder_identity: The holder_identity of this IoK8sApiCoordinationV1LeaseSpec.
        :type holder_identity: str
        """

        self._holder_identity = holder_identity

    @property
    def lease_duration_seconds(self) -> int:
        """Gets the lease_duration_seconds of this IoK8sApiCoordinationV1LeaseSpec.

        leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.  # noqa: E501

        :return: The lease_duration_seconds of this IoK8sApiCoordinationV1LeaseSpec.
        :rtype: int
        """
        return self._lease_duration_seconds

    @lease_duration_seconds.setter
    def lease_duration_seconds(self, lease_duration_seconds: int):
        """Sets the lease_duration_seconds of this IoK8sApiCoordinationV1LeaseSpec.

        leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.  # noqa: E501

        :param lease_duration_seconds: The lease_duration_seconds of this IoK8sApiCoordinationV1LeaseSpec.
        :type lease_duration_seconds: int
        """

        self._lease_duration_seconds = lease_duration_seconds

    @property
    def lease_transitions(self) -> int:
        """Gets the lease_transitions of this IoK8sApiCoordinationV1LeaseSpec.

        leaseTransitions is the number of transitions of a lease between holders.  # noqa: E501

        :return: The lease_transitions of this IoK8sApiCoordinationV1LeaseSpec.
        :rtype: int
        """
        return self._lease_transitions

    @lease_transitions.setter
    def lease_transitions(self, lease_transitions: int):
        """Sets the lease_transitions of this IoK8sApiCoordinationV1LeaseSpec.

        leaseTransitions is the number of transitions of a lease between holders.  # noqa: E501

        :param lease_transitions: The lease_transitions of this IoK8sApiCoordinationV1LeaseSpec.
        :type lease_transitions: int
        """

        self._lease_transitions = lease_transitions

    @property
    def renew_time(self) -> IoK8sApimachineryPkgApisMetaV1MicroTime:
        """Gets the renew_time of this IoK8sApiCoordinationV1LeaseSpec.

        renewTime is a time when the current holder of a lease has last updated the lease.  # noqa: E501

        :return: The renew_time of this IoK8sApiCoordinationV1LeaseSpec.
        :rtype: IoK8sApimachineryPkgApisMetaV1MicroTime
        """
        return self._renew_time

    @renew_time.setter
    def renew_time(self, renew_time: IoK8sApimachineryPkgApisMetaV1MicroTime):
        """Sets the renew_time of this IoK8sApiCoordinationV1LeaseSpec.

        renewTime is a time when the current holder of a lease has last updated the lease.  # noqa: E501

        :param renew_time: The renew_time of this IoK8sApiCoordinationV1LeaseSpec.
        :type renew_time: IoK8sApimachineryPkgApisMetaV1MicroTime
        """

        self._renew_time = renew_time
