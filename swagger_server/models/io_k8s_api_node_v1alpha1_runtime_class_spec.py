# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNodeV1alpha1RuntimeClassSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, overhead: IoK8sApiNodeV1alpha1Overhead=None, runtime_handler: str=None, scheduling: IoK8sApiNodeV1alpha1Scheduling=None):  # noqa: E501
        """IoK8sApiNodeV1alpha1RuntimeClassSpec - a model defined in Swagger

        :param overhead: The overhead of this IoK8sApiNodeV1alpha1RuntimeClassSpec.  # noqa: E501
        :type overhead: IoK8sApiNodeV1alpha1Overhead
        :param runtime_handler: The runtime_handler of this IoK8sApiNodeV1alpha1RuntimeClassSpec.  # noqa: E501
        :type runtime_handler: str
        :param scheduling: The scheduling of this IoK8sApiNodeV1alpha1RuntimeClassSpec.  # noqa: E501
        :type scheduling: IoK8sApiNodeV1alpha1Scheduling
        """
        self.swagger_types = {
            'overhead': IoK8sApiNodeV1alpha1Overhead,
            'runtime_handler': str,
            'scheduling': IoK8sApiNodeV1alpha1Scheduling
        }

        self.attribute_map = {
            'overhead': 'overhead',
            'runtime_handler': 'runtimeHandler',
            'scheduling': 'scheduling'
        }

        self._overhead = overhead
        self._runtime_handler = runtime_handler
        self._scheduling = scheduling

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNodeV1alpha1RuntimeClassSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.node.v1alpha1.RuntimeClassSpec of this IoK8sApiNodeV1alpha1RuntimeClassSpec.  # noqa: E501
        :rtype: IoK8sApiNodeV1alpha1RuntimeClassSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overhead(self) -> IoK8sApiNodeV1alpha1Overhead:
        """Gets the overhead of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.  # noqa: E501

        :return: The overhead of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :rtype: IoK8sApiNodeV1alpha1Overhead
        """
        return self._overhead

    @overhead.setter
    def overhead(self, overhead: IoK8sApiNodeV1alpha1Overhead):
        """Sets the overhead of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.  # noqa: E501

        :param overhead: The overhead of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :type overhead: IoK8sApiNodeV1alpha1Overhead
        """

        self._overhead = overhead

    @property
    def runtime_handler(self) -> str:
        """Gets the runtime_handler of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.  # noqa: E501

        :return: The runtime_handler of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :rtype: str
        """
        return self._runtime_handler

    @runtime_handler.setter
    def runtime_handler(self, runtime_handler: str):
        """Sets the runtime_handler of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.  # noqa: E501

        :param runtime_handler: The runtime_handler of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :type runtime_handler: str
        """
        if runtime_handler is None:
            raise ValueError("Invalid value for `runtime_handler`, must not be `None`")  # noqa: E501

        self._runtime_handler = runtime_handler

    @property
    def scheduling(self) -> IoK8sApiNodeV1alpha1Scheduling:
        """Gets the scheduling of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.  # noqa: E501

        :return: The scheduling of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :rtype: IoK8sApiNodeV1alpha1Scheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling: IoK8sApiNodeV1alpha1Scheduling):
        """Sets the scheduling of this IoK8sApiNodeV1alpha1RuntimeClassSpec.

        Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.  # noqa: E501

        :param scheduling: The scheduling of this IoK8sApiNodeV1alpha1RuntimeClassSpec.
        :type scheduling: IoK8sApiNodeV1alpha1Scheduling
        """

        self._scheduling = scheduling
