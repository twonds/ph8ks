# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ComponentCondition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, message: str=None, status: str=None, type: str=None):  # noqa: E501
        """IoK8sApiCoreV1ComponentCondition - a model defined in Swagger

        :param error: The error of this IoK8sApiCoreV1ComponentCondition.  # noqa: E501
        :type error: str
        :param message: The message of this IoK8sApiCoreV1ComponentCondition.  # noqa: E501
        :type message: str
        :param status: The status of this IoK8sApiCoreV1ComponentCondition.  # noqa: E501
        :type status: str
        :param type: The type of this IoK8sApiCoreV1ComponentCondition.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'error': str,
            'message': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'error': 'error',
            'message': 'message',
            'status': 'status',
            'type': 'type'
        }

        self._error = error
        self._message = message
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ComponentCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ComponentCondition of this IoK8sApiCoreV1ComponentCondition.  # noqa: E501
        :rtype: IoK8sApiCoreV1ComponentCondition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self) -> str:
        """Gets the error of this IoK8sApiCoreV1ComponentCondition.

        Condition error code for a component. For example, a health check error code.  # noqa: E501

        :return: The error of this IoK8sApiCoreV1ComponentCondition.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this IoK8sApiCoreV1ComponentCondition.

        Condition error code for a component. For example, a health check error code.  # noqa: E501

        :param error: The error of this IoK8sApiCoreV1ComponentCondition.
        :type error: str
        """

        self._error = error

    @property
    def message(self) -> str:
        """Gets the message of this IoK8sApiCoreV1ComponentCondition.

        Message about the condition for a component. For example, information about a health check.  # noqa: E501

        :return: The message of this IoK8sApiCoreV1ComponentCondition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this IoK8sApiCoreV1ComponentCondition.

        Message about the condition for a component. For example, information about a health check.  # noqa: E501

        :param message: The message of this IoK8sApiCoreV1ComponentCondition.
        :type message: str
        """

        self._message = message

    @property
    def status(self) -> str:
        """Gets the status of this IoK8sApiCoreV1ComponentCondition.

        Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".  # noqa: E501

        :return: The status of this IoK8sApiCoreV1ComponentCondition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this IoK8sApiCoreV1ComponentCondition.

        Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".  # noqa: E501

        :param status: The status of this IoK8sApiCoreV1ComponentCondition.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self) -> str:
        """Gets the type of this IoK8sApiCoreV1ComponentCondition.

        Type of condition for a component. Valid value: \"Healthy\"  # noqa: E501

        :return: The type of this IoK8sApiCoreV1ComponentCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this IoK8sApiCoreV1ComponentCondition.

        Type of condition for a component. Valid value: \"Healthy\"  # noqa: E501

        :param type: The type of this IoK8sApiCoreV1ComponentCondition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
