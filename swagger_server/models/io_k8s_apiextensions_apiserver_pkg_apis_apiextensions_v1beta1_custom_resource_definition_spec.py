# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, additional_printer_columns: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]=None, conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion=None, group: str=None, names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames=None, preserve_unknown_fields: bool=None, scope: str=None, subresources: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources=None, validation: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation=None, version: str=None, versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]=None):  # noqa: E501
        """IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec - a model defined in Swagger

        :param additional_printer_columns: The additional_printer_columns of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type additional_printer_columns: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]
        :param conversion: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion
        :param group: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type group: str
        :param names: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        :param preserve_unknown_fields: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type preserve_unknown_fields: bool
        :param scope: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type scope: str
        :param subresources: The subresources of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type subresources: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources
        :param validation: The validation of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type validation: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation
        :param version: The version of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type version: str
        :param versions: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :type versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]
        """
        self.swagger_types = {
            'additional_printer_columns': List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition],
            'conversion': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion,
            'group': str,
            'names': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames,
            'preserve_unknown_fields': bool,
            'scope': str,
            'subresources': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources,
            'validation': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation,
            'version': str,
            'versions': List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]
        }

        self.attribute_map = {
            'additional_printer_columns': 'additionalPrinterColumns',
            'conversion': 'conversion',
            'group': 'group',
            'names': 'names',
            'preserve_unknown_fields': 'preserveUnknownFields',
            'scope': 'scope',
            'subresources': 'subresources',
            'validation': 'validation',
            'version': 'version',
            'versions': 'versions'
        }

        self._additional_printer_columns = additional_printer_columns
        self._conversion = conversion
        self._group = group
        self._names = names
        self._preserve_unknown_fields = preserve_unknown_fields
        self._scope = scope
        self._subresources = subresources
        self._validation = validation
        self._version = version
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_printer_columns(self) -> List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]:
        """Gets the additional_printer_columns of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.  # noqa: E501

        :return: The additional_printer_columns of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]
        """
        return self._additional_printer_columns

    @additional_printer_columns.setter
    def additional_printer_columns(self, additional_printer_columns: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]):
        """Sets the additional_printer_columns of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.  # noqa: E501

        :param additional_printer_columns: The additional_printer_columns of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type additional_printer_columns: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition]
        """

        self._additional_printer_columns = additional_printer_columns

    @property
    def conversion(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion:
        """Gets the conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        conversion defines conversion settings for the CRD.  # noqa: E501

        :return: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion
        """
        return self._conversion

    @conversion.setter
    def conversion(self, conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion):
        """Sets the conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        conversion defines conversion settings for the CRD.  # noqa: E501

        :param conversion: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion
        """

        self._conversion = conversion

    @property
    def group(self) -> str:
        """Gets the group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :return: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :param group: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def names(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames:
        """Gets the names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        names specify the resource and kind names for the custom resource.  # noqa: E501

        :return: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        """
        return self._names

    @names.setter
    def names(self, names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames):
        """Sets the names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        names specify the resource and kind names for the custom resource.  # noqa: E501

        :param names: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        """
        if names is None:
            raise ValueError("Invalid value for `names`, must not be `None`")  # noqa: E501

        self._names = names

    @property
    def preserve_unknown_fields(self) -> bool:
        """Gets the preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :return: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: bool
        """
        return self._preserve_unknown_fields

    @preserve_unknown_fields.setter
    def preserve_unknown_fields(self, preserve_unknown_fields: bool):
        """Sets the preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :param preserve_unknown_fields: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type preserve_unknown_fields: bool
        """

        self._preserve_unknown_fields = preserve_unknown_fields

    @property
    def scope(self) -> str:
        """Gets the scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.  # noqa: E501

        :return: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.  # noqa: E501

        :param scope: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def subresources(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources:
        """Gets the subresources of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.  # noqa: E501

        :return: The subresources of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources
        """
        return self._subresources

    @subresources.setter
    def subresources(self, subresources: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources):
        """Sets the subresources of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.  # noqa: E501

        :param subresources: The subresources of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type subresources: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources
        """

        self._subresources = subresources

    @property
    def validation(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation:
        """Gets the validation of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.  # noqa: E501

        :return: The validation of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation
        """
        return self._validation

    @validation.setter
    def validation(self, validation: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation):
        """Sets the validation of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.  # noqa: E501

        :param validation: The validation of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type validation: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation
        """

        self._validation = validation

    @property
    def version(self) -> str:
        """Gets the version of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.  # noqa: E501

        :return: The version of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.  # noqa: E501

        :param version: The version of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type version: str
        """

        self._version = version

    @property
    def versions(self) -> List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]:
        """Gets the versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :return: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :rtype: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]):
        """Sets the versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.

        versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :param versions: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.
        :type versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion]
        """

        self._versions = versions
