# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ca_bundle: ByteArray=None, group: str=None, group_priority_minimum: int=None, insecure_skip_tls_verify: bool=None, service: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference=None, version: str=None, version_priority: int=None):  # noqa: E501
        """IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec - a model defined in Swagger

        :param ca_bundle: The ca_bundle of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type ca_bundle: ByteArray
        :param group: The group of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type group: str
        :param group_priority_minimum: The group_priority_minimum of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type group_priority_minimum: int
        :param insecure_skip_tls_verify: The insecure_skip_tls_verify of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type insecure_skip_tls_verify: bool
        :param service: The service of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type service: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference
        :param version: The version of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type version: str
        :param version_priority: The version_priority of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :type version_priority: int
        """
        self.swagger_types = {
            'ca_bundle': ByteArray,
            'group': str,
            'group_priority_minimum': int,
            'insecure_skip_tls_verify': bool,
            'service': IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference,
            'version': str,
            'version_priority': int
        }

        self.attribute_map = {
            'ca_bundle': 'caBundle',
            'group': 'group',
            'group_priority_minimum': 'groupPriorityMinimum',
            'insecure_skip_tls_verify': 'insecureSkipTLSVerify',
            'service': 'service',
            'version': 'version',
            'version_priority': 'versionPriority'
        }

        self._ca_bundle = ca_bundle
        self._group = group
        self._group_priority_minimum = group_priority_minimum
        self._insecure_skip_tls_verify = insecure_skip_tls_verify
        self._service = service
        self._version = version
        self._version_priority = version_priority

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.  # noqa: E501
        :rtype: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_bundle(self) -> ByteArray:
        """Gets the ca_bundle of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.  # noqa: E501

        :return: The ca_bundle of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: ByteArray
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle: ByteArray):
        """Sets the ca_bundle of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.  # noqa: E501

        :param ca_bundle: The ca_bundle of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type ca_bundle: ByteArray
        """
        if ca_bundle is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ca_bundle):  # noqa: E501
            raise ValueError("Invalid value for `ca_bundle`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._ca_bundle = ca_bundle

    @property
    def group(self) -> str:
        """Gets the group of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Group is the API group name this server hosts  # noqa: E501

        :return: The group of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Group is the API group name this server hosts  # noqa: E501

        :param group: The group of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type group: str
        """

        self._group = group

    @property
    def group_priority_minimum(self) -> int:
        """Gets the group_priority_minimum of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s  # noqa: E501

        :return: The group_priority_minimum of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: int
        """
        return self._group_priority_minimum

    @group_priority_minimum.setter
    def group_priority_minimum(self, group_priority_minimum: int):
        """Sets the group_priority_minimum of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s  # noqa: E501

        :param group_priority_minimum: The group_priority_minimum of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type group_priority_minimum: int
        """
        if group_priority_minimum is None:
            raise ValueError("Invalid value for `group_priority_minimum`, must not be `None`")  # noqa: E501

        self._group_priority_minimum = group_priority_minimum

    @property
    def insecure_skip_tls_verify(self) -> bool:
        """Gets the insecure_skip_tls_verify of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.  # noqa: E501

        :return: The insecure_skip_tls_verify of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: bool
        """
        return self._insecure_skip_tls_verify

    @insecure_skip_tls_verify.setter
    def insecure_skip_tls_verify(self, insecure_skip_tls_verify: bool):
        """Sets the insecure_skip_tls_verify of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.  # noqa: E501

        :param insecure_skip_tls_verify: The insecure_skip_tls_verify of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type insecure_skip_tls_verify: bool
        """

        self._insecure_skip_tls_verify = insecure_skip_tls_verify

    @property
    def service(self) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference:
        """Gets the service of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.  # noqa: E501

        :return: The service of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference
        """
        return self._service

    @service.setter
    def service(self, service: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference):
        """Sets the service of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.  # noqa: E501

        :param service: The service of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type service: IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def version(self) -> str:
        """Gets the version of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Version is the API version this server hosts.  For example, \"v1\"  # noqa: E501

        :return: The version of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        Version is the API version this server hosts.  For example, \"v1\"  # noqa: E501

        :param version: The version of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type version: str
        """

        self._version = version

    @property
    def version_priority(self) -> int:
        """Gets the version_priority of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :return: The version_priority of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :rtype: int
        """
        return self._version_priority

    @version_priority.setter
    def version_priority(self, version_priority: int):
        """Sets the version_priority of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.

        VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :param version_priority: The version_priority of this IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec.
        :type version_priority: int
        """
        if version_priority is None:
            raise ValueError("Invalid value for `version_priority`, must not be `None`")  # noqa: E501

        self._version_priority = version_priority
