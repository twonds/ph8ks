# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ContainerPort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, container_port: int=None, host_ip: str=None, host_port: int=None, name: str=None, protocol: str=None):  # noqa: E501
        """IoK8sApiCoreV1ContainerPort - a model defined in Swagger

        :param container_port: The container_port of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :type container_port: int
        :param host_ip: The host_ip of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :type host_ip: str
        :param host_port: The host_port of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :type host_port: int
        :param name: The name of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :type name: str
        :param protocol: The protocol of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :type protocol: str
        """
        self.swagger_types = {
            'container_port': int,
            'host_ip': str,
            'host_port': int,
            'name': str,
            'protocol': str
        }

        self.attribute_map = {
            'container_port': 'containerPort',
            'host_ip': 'hostIP',
            'host_port': 'hostPort',
            'name': 'name',
            'protocol': 'protocol'
        }

        self._container_port = container_port
        self._host_ip = host_ip
        self._host_port = host_port
        self._name = name
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ContainerPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ContainerPort of this IoK8sApiCoreV1ContainerPort.  # noqa: E501
        :rtype: IoK8sApiCoreV1ContainerPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_port(self) -> int:
        """Gets the container_port of this IoK8sApiCoreV1ContainerPort.

        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.  # noqa: E501

        :return: The container_port of this IoK8sApiCoreV1ContainerPort.
        :rtype: int
        """
        return self._container_port

    @container_port.setter
    def container_port(self, container_port: int):
        """Sets the container_port of this IoK8sApiCoreV1ContainerPort.

        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.  # noqa: E501

        :param container_port: The container_port of this IoK8sApiCoreV1ContainerPort.
        :type container_port: int
        """
        if container_port is None:
            raise ValueError("Invalid value for `container_port`, must not be `None`")  # noqa: E501

        self._container_port = container_port

    @property
    def host_ip(self) -> str:
        """Gets the host_ip of this IoK8sApiCoreV1ContainerPort.

        What host IP to bind the external port to.  # noqa: E501

        :return: The host_ip of this IoK8sApiCoreV1ContainerPort.
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip: str):
        """Sets the host_ip of this IoK8sApiCoreV1ContainerPort.

        What host IP to bind the external port to.  # noqa: E501

        :param host_ip: The host_ip of this IoK8sApiCoreV1ContainerPort.
        :type host_ip: str
        """

        self._host_ip = host_ip

    @property
    def host_port(self) -> int:
        """Gets the host_port of this IoK8sApiCoreV1ContainerPort.

        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.  # noqa: E501

        :return: The host_port of this IoK8sApiCoreV1ContainerPort.
        :rtype: int
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port: int):
        """Sets the host_port of this IoK8sApiCoreV1ContainerPort.

        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.  # noqa: E501

        :param host_port: The host_port of this IoK8sApiCoreV1ContainerPort.
        :type host_port: int
        """

        self._host_port = host_port

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1ContainerPort.

        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1ContainerPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1ContainerPort.

        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1ContainerPort.
        :type name: str
        """

        self._name = name

    @property
    def protocol(self) -> str:
        """Gets the protocol of this IoK8sApiCoreV1ContainerPort.

        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".  # noqa: E501

        :return: The protocol of this IoK8sApiCoreV1ContainerPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this IoK8sApiCoreV1ContainerPort.

        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".  # noqa: E501

        :param protocol: The protocol of this IoK8sApiCoreV1ContainerPort.
        :type protocol: str
        """

        self._protocol = protocol
