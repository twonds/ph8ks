# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1VsphereVirtualDiskVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, storage_policy_id: str=None, storage_policy_name: str=None, volume_path: str=None):  # noqa: E501
        """IoK8sApiCoreV1VsphereVirtualDiskVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.  # noqa: E501
        :type fs_type: str
        :param storage_policy_id: The storage_policy_id of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.  # noqa: E501
        :type storage_policy_id: str
        :param storage_policy_name: The storage_policy_name of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.  # noqa: E501
        :type storage_policy_name: str
        :param volume_path: The volume_path of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.  # noqa: E501
        :type volume_path: str
        """
        self.swagger_types = {
            'fs_type': str,
            'storage_policy_id': str,
            'storage_policy_name': str,
            'volume_path': str
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'storage_policy_id': 'storagePolicyID',
            'storage_policy_name': 'storagePolicyName',
            'volume_path': 'volumePath'
        }

        self._fs_type = fs_type
        self._storage_policy_id = storage_policy_id
        self._storage_policy_name = storage_policy_name
        self._volume_path = volume_path

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1VsphereVirtualDiskVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def storage_policy_id(self) -> str:
        """Gets the storage_policy_id of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.  # noqa: E501

        :return: The storage_policy_id of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :rtype: str
        """
        return self._storage_policy_id

    @storage_policy_id.setter
    def storage_policy_id(self, storage_policy_id: str):
        """Sets the storage_policy_id of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.  # noqa: E501

        :param storage_policy_id: The storage_policy_id of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :type storage_policy_id: str
        """

        self._storage_policy_id = storage_policy_id

    @property
    def storage_policy_name(self) -> str:
        """Gets the storage_policy_name of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Storage Policy Based Management (SPBM) profile name.  # noqa: E501

        :return: The storage_policy_name of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :rtype: str
        """
        return self._storage_policy_name

    @storage_policy_name.setter
    def storage_policy_name(self, storage_policy_name: str):
        """Sets the storage_policy_name of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Storage Policy Based Management (SPBM) profile name.  # noqa: E501

        :param storage_policy_name: The storage_policy_name of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :type storage_policy_name: str
        """

        self._storage_policy_name = storage_policy_name

    @property
    def volume_path(self) -> str:
        """Gets the volume_path of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Path that identifies vSphere volume vmdk  # noqa: E501

        :return: The volume_path of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :rtype: str
        """
        return self._volume_path

    @volume_path.setter
    def volume_path(self, volume_path: str):
        """Sets the volume_path of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.

        Path that identifies vSphere volume vmdk  # noqa: E501

        :param volume_path: The volume_path of this IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.
        :type volume_path: str
        """
        if volume_path is None:
            raise ValueError("Invalid value for `volume_path`, must not be `None`")  # noqa: E501

        self._volume_path = volume_path
