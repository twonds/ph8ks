# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiRbacV1RoleRef(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_group: str=None, kind: str=None, name: str=None):  # noqa: E501
        """IoK8sApiRbacV1RoleRef - a model defined in Swagger

        :param api_group: The api_group of this IoK8sApiRbacV1RoleRef.  # noqa: E501
        :type api_group: str
        :param kind: The kind of this IoK8sApiRbacV1RoleRef.  # noqa: E501
        :type kind: str
        :param name: The name of this IoK8sApiRbacV1RoleRef.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'api_group': str,
            'kind': str,
            'name': str
        }

        self.attribute_map = {
            'api_group': 'apiGroup',
            'kind': 'kind',
            'name': 'name'
        }

        self._api_group = api_group
        self._kind = kind
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiRbacV1RoleRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.rbac.v1.RoleRef of this IoK8sApiRbacV1RoleRef.  # noqa: E501
        :rtype: IoK8sApiRbacV1RoleRef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_group(self) -> str:
        """Gets the api_group of this IoK8sApiRbacV1RoleRef.

        APIGroup is the group for the resource being referenced  # noqa: E501

        :return: The api_group of this IoK8sApiRbacV1RoleRef.
        :rtype: str
        """
        return self._api_group

    @api_group.setter
    def api_group(self, api_group: str):
        """Sets the api_group of this IoK8sApiRbacV1RoleRef.

        APIGroup is the group for the resource being referenced  # noqa: E501

        :param api_group: The api_group of this IoK8sApiRbacV1RoleRef.
        :type api_group: str
        """
        if api_group is None:
            raise ValueError("Invalid value for `api_group`, must not be `None`")  # noqa: E501

        self._api_group = api_group

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiRbacV1RoleRef.

        Kind is the type of resource being referenced  # noqa: E501

        :return: The kind of this IoK8sApiRbacV1RoleRef.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiRbacV1RoleRef.

        Kind is the type of resource being referenced  # noqa: E501

        :param kind: The kind of this IoK8sApiRbacV1RoleRef.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiRbacV1RoleRef.

        Name is the name of resource being referenced  # noqa: E501

        :return: The name of this IoK8sApiRbacV1RoleRef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiRbacV1RoleRef.

        Name is the name of resource being referenced  # noqa: E501

        :param name: The name of this IoK8sApiRbacV1RoleRef.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
