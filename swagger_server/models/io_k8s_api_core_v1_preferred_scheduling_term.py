# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PreferredSchedulingTerm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, preference: IoK8sApiCoreV1NodeSelectorTerm=None, weight: int=None):  # noqa: E501
        """IoK8sApiCoreV1PreferredSchedulingTerm - a model defined in Swagger

        :param preference: The preference of this IoK8sApiCoreV1PreferredSchedulingTerm.  # noqa: E501
        :type preference: IoK8sApiCoreV1NodeSelectorTerm
        :param weight: The weight of this IoK8sApiCoreV1PreferredSchedulingTerm.  # noqa: E501
        :type weight: int
        """
        self.swagger_types = {
            'preference': IoK8sApiCoreV1NodeSelectorTerm,
            'weight': int
        }

        self.attribute_map = {
            'preference': 'preference',
            'weight': 'weight'
        }

        self._preference = preference
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PreferredSchedulingTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PreferredSchedulingTerm of this IoK8sApiCoreV1PreferredSchedulingTerm.  # noqa: E501
        :rtype: IoK8sApiCoreV1PreferredSchedulingTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preference(self) -> IoK8sApiCoreV1NodeSelectorTerm:
        """Gets the preference of this IoK8sApiCoreV1PreferredSchedulingTerm.

        A node selector term, associated with the corresponding weight.  # noqa: E501

        :return: The preference of this IoK8sApiCoreV1PreferredSchedulingTerm.
        :rtype: IoK8sApiCoreV1NodeSelectorTerm
        """
        return self._preference

    @preference.setter
    def preference(self, preference: IoK8sApiCoreV1NodeSelectorTerm):
        """Sets the preference of this IoK8sApiCoreV1PreferredSchedulingTerm.

        A node selector term, associated with the corresponding weight.  # noqa: E501

        :param preference: The preference of this IoK8sApiCoreV1PreferredSchedulingTerm.
        :type preference: IoK8sApiCoreV1NodeSelectorTerm
        """
        if preference is None:
            raise ValueError("Invalid value for `preference`, must not be `None`")  # noqa: E501

        self._preference = preference

    @property
    def weight(self) -> int:
        """Gets the weight of this IoK8sApiCoreV1PreferredSchedulingTerm.

        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.  # noqa: E501

        :return: The weight of this IoK8sApiCoreV1PreferredSchedulingTerm.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """Sets the weight of this IoK8sApiCoreV1PreferredSchedulingTerm.

        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.  # noqa: E501

        :param weight: The weight of this IoK8sApiCoreV1PreferredSchedulingTerm.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight
