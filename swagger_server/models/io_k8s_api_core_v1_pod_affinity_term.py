# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PodAffinityTerm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector=None, namespaces: List[str]=None, topology_key: str=None):  # noqa: E501
        """IoK8sApiCoreV1PodAffinityTerm - a model defined in Swagger

        :param label_selector: The label_selector of this IoK8sApiCoreV1PodAffinityTerm.  # noqa: E501
        :type label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        :param namespaces: The namespaces of this IoK8sApiCoreV1PodAffinityTerm.  # noqa: E501
        :type namespaces: List[str]
        :param topology_key: The topology_key of this IoK8sApiCoreV1PodAffinityTerm.  # noqa: E501
        :type topology_key: str
        """
        self.swagger_types = {
            'label_selector': IoK8sApimachineryPkgApisMetaV1LabelSelector,
            'namespaces': List[str],
            'topology_key': str
        }

        self.attribute_map = {
            'label_selector': 'labelSelector',
            'namespaces': 'namespaces',
            'topology_key': 'topologyKey'
        }

        self._label_selector = label_selector
        self._namespaces = namespaces
        self._topology_key = topology_key

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PodAffinityTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PodAffinityTerm of this IoK8sApiCoreV1PodAffinityTerm.  # noqa: E501
        :rtype: IoK8sApiCoreV1PodAffinityTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_selector(self) -> IoK8sApimachineryPkgApisMetaV1LabelSelector:
        """Gets the label_selector of this IoK8sApiCoreV1PodAffinityTerm.

        A label query over a set of resources, in this case pods.  # noqa: E501

        :return: The label_selector of this IoK8sApiCoreV1PodAffinityTerm.
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector):
        """Sets the label_selector of this IoK8sApiCoreV1PodAffinityTerm.

        A label query over a set of resources, in this case pods.  # noqa: E501

        :param label_selector: The label_selector of this IoK8sApiCoreV1PodAffinityTerm.
        :type label_selector: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._label_selector = label_selector

    @property
    def namespaces(self) -> List[str]:
        """Gets the namespaces of this IoK8sApiCoreV1PodAffinityTerm.

        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"  # noqa: E501

        :return: The namespaces of this IoK8sApiCoreV1PodAffinityTerm.
        :rtype: List[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces: List[str]):
        """Sets the namespaces of this IoK8sApiCoreV1PodAffinityTerm.

        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"  # noqa: E501

        :param namespaces: The namespaces of this IoK8sApiCoreV1PodAffinityTerm.
        :type namespaces: List[str]
        """

        self._namespaces = namespaces

    @property
    def topology_key(self) -> str:
        """Gets the topology_key of this IoK8sApiCoreV1PodAffinityTerm.

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.  # noqa: E501

        :return: The topology_key of this IoK8sApiCoreV1PodAffinityTerm.
        :rtype: str
        """
        return self._topology_key

    @topology_key.setter
    def topology_key(self, topology_key: str):
        """Sets the topology_key of this IoK8sApiCoreV1PodAffinityTerm.

        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.  # noqa: E501

        :param topology_key: The topology_key of this IoK8sApiCoreV1PodAffinityTerm.
        :type topology_key: str
        """
        if topology_key is None:
            raise ValueError("Invalid value for `topology_key`, must not be `None`")  # noqa: E501

        self._topology_key = topology_key
