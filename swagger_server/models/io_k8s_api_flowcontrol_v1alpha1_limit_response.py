# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiFlowcontrolV1alpha1LimitResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, queuing: IoK8sApiFlowcontrolV1alpha1QueuingConfiguration=None, type: str=None):  # noqa: E501
        """IoK8sApiFlowcontrolV1alpha1LimitResponse - a model defined in Swagger

        :param queuing: The queuing of this IoK8sApiFlowcontrolV1alpha1LimitResponse.  # noqa: E501
        :type queuing: IoK8sApiFlowcontrolV1alpha1QueuingConfiguration
        :param type: The type of this IoK8sApiFlowcontrolV1alpha1LimitResponse.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'queuing': IoK8sApiFlowcontrolV1alpha1QueuingConfiguration,
            'type': str
        }

        self.attribute_map = {
            'queuing': 'queuing',
            'type': 'type'
        }

        self._queuing = queuing
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiFlowcontrolV1alpha1LimitResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.flowcontrol.v1alpha1.LimitResponse of this IoK8sApiFlowcontrolV1alpha1LimitResponse.  # noqa: E501
        :rtype: IoK8sApiFlowcontrolV1alpha1LimitResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queuing(self) -> IoK8sApiFlowcontrolV1alpha1QueuingConfiguration:
        """Gets the queuing of this IoK8sApiFlowcontrolV1alpha1LimitResponse.

        `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`.  # noqa: E501

        :return: The queuing of this IoK8sApiFlowcontrolV1alpha1LimitResponse.
        :rtype: IoK8sApiFlowcontrolV1alpha1QueuingConfiguration
        """
        return self._queuing

    @queuing.setter
    def queuing(self, queuing: IoK8sApiFlowcontrolV1alpha1QueuingConfiguration):
        """Sets the queuing of this IoK8sApiFlowcontrolV1alpha1LimitResponse.

        `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`.  # noqa: E501

        :param queuing: The queuing of this IoK8sApiFlowcontrolV1alpha1LimitResponse.
        :type queuing: IoK8sApiFlowcontrolV1alpha1QueuingConfiguration
        """

        self._queuing = queuing

    @property
    def type(self) -> str:
        """Gets the type of this IoK8sApiFlowcontrolV1alpha1LimitResponse.

        `type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.  # noqa: E501

        :return: The type of this IoK8sApiFlowcontrolV1alpha1LimitResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this IoK8sApiFlowcontrolV1alpha1LimitResponse.

        `type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.  # noqa: E501

        :param type: The type of this IoK8sApiFlowcontrolV1alpha1LimitResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
