# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1NodeSelectorTerm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, match_expressions: List[IoK8sApiCoreV1NodeSelectorRequirement]=None, match_fields: List[IoK8sApiCoreV1NodeSelectorRequirement]=None):  # noqa: E501
        """IoK8sApiCoreV1NodeSelectorTerm - a model defined in Swagger

        :param match_expressions: The match_expressions of this IoK8sApiCoreV1NodeSelectorTerm.  # noqa: E501
        :type match_expressions: List[IoK8sApiCoreV1NodeSelectorRequirement]
        :param match_fields: The match_fields of this IoK8sApiCoreV1NodeSelectorTerm.  # noqa: E501
        :type match_fields: List[IoK8sApiCoreV1NodeSelectorRequirement]
        """
        self.swagger_types = {
            'match_expressions': List[IoK8sApiCoreV1NodeSelectorRequirement],
            'match_fields': List[IoK8sApiCoreV1NodeSelectorRequirement]
        }

        self.attribute_map = {
            'match_expressions': 'matchExpressions',
            'match_fields': 'matchFields'
        }

        self._match_expressions = match_expressions
        self._match_fields = match_fields

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1NodeSelectorTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.NodeSelectorTerm of this IoK8sApiCoreV1NodeSelectorTerm.  # noqa: E501
        :rtype: IoK8sApiCoreV1NodeSelectorTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_expressions(self) -> List[IoK8sApiCoreV1NodeSelectorRequirement]:
        """Gets the match_expressions of this IoK8sApiCoreV1NodeSelectorTerm.

        A list of node selector requirements by node's labels.  # noqa: E501

        :return: The match_expressions of this IoK8sApiCoreV1NodeSelectorTerm.
        :rtype: List[IoK8sApiCoreV1NodeSelectorRequirement]
        """
        return self._match_expressions

    @match_expressions.setter
    def match_expressions(self, match_expressions: List[IoK8sApiCoreV1NodeSelectorRequirement]):
        """Sets the match_expressions of this IoK8sApiCoreV1NodeSelectorTerm.

        A list of node selector requirements by node's labels.  # noqa: E501

        :param match_expressions: The match_expressions of this IoK8sApiCoreV1NodeSelectorTerm.
        :type match_expressions: List[IoK8sApiCoreV1NodeSelectorRequirement]
        """

        self._match_expressions = match_expressions

    @property
    def match_fields(self) -> List[IoK8sApiCoreV1NodeSelectorRequirement]:
        """Gets the match_fields of this IoK8sApiCoreV1NodeSelectorTerm.

        A list of node selector requirements by node's fields.  # noqa: E501

        :return: The match_fields of this IoK8sApiCoreV1NodeSelectorTerm.
        :rtype: List[IoK8sApiCoreV1NodeSelectorRequirement]
        """
        return self._match_fields

    @match_fields.setter
    def match_fields(self, match_fields: List[IoK8sApiCoreV1NodeSelectorRequirement]):
        """Sets the match_fields of this IoK8sApiCoreV1NodeSelectorTerm.

        A list of node selector requirements by node's fields.  # noqa: E501

        :param match_fields: The match_fields of this IoK8sApiCoreV1NodeSelectorTerm.
        :type match_fields: List[IoK8sApiCoreV1NodeSelectorRequirement]
        """

        self._match_fields = match_fields
