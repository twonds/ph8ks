# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ISCSIVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, chap_auth_discovery: bool=None, chap_auth_session: bool=None, fs_type: str=None, initiator_name: str=None, iqn: str=None, iscsi_interface: str=None, lun: int=None, portals: List[str]=None, read_only: bool=None, secret_ref: IoK8sApiCoreV1LocalObjectReference=None, target_portal: str=None):  # noqa: E501
        """IoK8sApiCoreV1ISCSIVolumeSource - a model defined in Swagger

        :param chap_auth_discovery: The chap_auth_discovery of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type chap_auth_discovery: bool
        :param chap_auth_session: The chap_auth_session of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type chap_auth_session: bool
        :param fs_type: The fs_type of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type fs_type: str
        :param initiator_name: The initiator_name of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type initiator_name: str
        :param iqn: The iqn of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type iqn: str
        :param iscsi_interface: The iscsi_interface of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type iscsi_interface: str
        :param lun: The lun of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type lun: int
        :param portals: The portals of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type portals: List[str]
        :param read_only: The read_only of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type read_only: bool
        :param secret_ref: The secret_ref of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        :param target_portal: The target_portal of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :type target_portal: str
        """
        self.swagger_types = {
            'chap_auth_discovery': bool,
            'chap_auth_session': bool,
            'fs_type': str,
            'initiator_name': str,
            'iqn': str,
            'iscsi_interface': str,
            'lun': int,
            'portals': List[str],
            'read_only': bool,
            'secret_ref': IoK8sApiCoreV1LocalObjectReference,
            'target_portal': str
        }

        self.attribute_map = {
            'chap_auth_discovery': 'chapAuthDiscovery',
            'chap_auth_session': 'chapAuthSession',
            'fs_type': 'fsType',
            'initiator_name': 'initiatorName',
            'iqn': 'iqn',
            'iscsi_interface': 'iscsiInterface',
            'lun': 'lun',
            'portals': 'portals',
            'read_only': 'readOnly',
            'secret_ref': 'secretRef',
            'target_portal': 'targetPortal'
        }

        self._chap_auth_discovery = chap_auth_discovery
        self._chap_auth_session = chap_auth_session
        self._fs_type = fs_type
        self._initiator_name = initiator_name
        self._iqn = iqn
        self._iscsi_interface = iscsi_interface
        self._lun = lun
        self._portals = portals
        self._read_only = read_only
        self._secret_ref = secret_ref
        self._target_portal = target_portal

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ISCSIVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ISCSIVolumeSource of this IoK8sApiCoreV1ISCSIVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1ISCSIVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chap_auth_discovery(self) -> bool:
        """Gets the chap_auth_discovery of this IoK8sApiCoreV1ISCSIVolumeSource.

        whether support iSCSI Discovery CHAP authentication  # noqa: E501

        :return: The chap_auth_discovery of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: bool
        """
        return self._chap_auth_discovery

    @chap_auth_discovery.setter
    def chap_auth_discovery(self, chap_auth_discovery: bool):
        """Sets the chap_auth_discovery of this IoK8sApiCoreV1ISCSIVolumeSource.

        whether support iSCSI Discovery CHAP authentication  # noqa: E501

        :param chap_auth_discovery: The chap_auth_discovery of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type chap_auth_discovery: bool
        """

        self._chap_auth_discovery = chap_auth_discovery

    @property
    def chap_auth_session(self) -> bool:
        """Gets the chap_auth_session of this IoK8sApiCoreV1ISCSIVolumeSource.

        whether support iSCSI Session CHAP authentication  # noqa: E501

        :return: The chap_auth_session of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: bool
        """
        return self._chap_auth_session

    @chap_auth_session.setter
    def chap_auth_session(self, chap_auth_session: bool):
        """Sets the chap_auth_session of this IoK8sApiCoreV1ISCSIVolumeSource.

        whether support iSCSI Session CHAP authentication  # noqa: E501

        :param chap_auth_session: The chap_auth_session of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type chap_auth_session: bool
        """

        self._chap_auth_session = chap_auth_session

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1ISCSIVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1ISCSIVolumeSource.

        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def initiator_name(self) -> str:
        """Gets the initiator_name of this IoK8sApiCoreV1ISCSIVolumeSource.

        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.  # noqa: E501

        :return: The initiator_name of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name: str):
        """Sets the initiator_name of this IoK8sApiCoreV1ISCSIVolumeSource.

        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.  # noqa: E501

        :param initiator_name: The initiator_name of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type initiator_name: str
        """

        self._initiator_name = initiator_name

    @property
    def iqn(self) -> str:
        """Gets the iqn of this IoK8sApiCoreV1ISCSIVolumeSource.

        Target iSCSI Qualified Name.  # noqa: E501

        :return: The iqn of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn: str):
        """Sets the iqn of this IoK8sApiCoreV1ISCSIVolumeSource.

        Target iSCSI Qualified Name.  # noqa: E501

        :param iqn: The iqn of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type iqn: str
        """
        if iqn is None:
            raise ValueError("Invalid value for `iqn`, must not be `None`")  # noqa: E501

        self._iqn = iqn

    @property
    def iscsi_interface(self) -> str:
        """Gets the iscsi_interface of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).  # noqa: E501

        :return: The iscsi_interface of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: str
        """
        return self._iscsi_interface

    @iscsi_interface.setter
    def iscsi_interface(self, iscsi_interface: str):
        """Sets the iscsi_interface of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).  # noqa: E501

        :param iscsi_interface: The iscsi_interface of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type iscsi_interface: str
        """

        self._iscsi_interface = iscsi_interface

    @property
    def lun(self) -> int:
        """Gets the lun of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Lun number.  # noqa: E501

        :return: The lun of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun: int):
        """Sets the lun of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Lun number.  # noqa: E501

        :param lun: The lun of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type lun: int
        """
        if lun is None:
            raise ValueError("Invalid value for `lun`, must not be `None`")  # noqa: E501

        self._lun = lun

    @property
    def portals(self) -> List[str]:
        """Gets the portals of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :return: The portals of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: List[str]
        """
        return self._portals

    @portals.setter
    def portals(self, portals: List[str]):
        """Sets the portals of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :param portals: The portals of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type portals: List[str]
        """

        self._portals = portals

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1ISCSIVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1ISCSIVolumeSource.

        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_ref(self) -> IoK8sApiCoreV1LocalObjectReference:
        """Gets the secret_ref of this IoK8sApiCoreV1ISCSIVolumeSource.

        CHAP Secret for iSCSI target and initiator authentication  # noqa: E501

        :return: The secret_ref of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: IoK8sApiCoreV1LocalObjectReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref: IoK8sApiCoreV1LocalObjectReference):
        """Sets the secret_ref of this IoK8sApiCoreV1ISCSIVolumeSource.

        CHAP Secret for iSCSI target and initiator authentication  # noqa: E501

        :param secret_ref: The secret_ref of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type secret_ref: IoK8sApiCoreV1LocalObjectReference
        """

        self._secret_ref = secret_ref

    @property
    def target_portal(self) -> str:
        """Gets the target_portal of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :return: The target_portal of this IoK8sApiCoreV1ISCSIVolumeSource.
        :rtype: str
        """
        return self._target_portal

    @target_portal.setter
    def target_portal(self, target_portal: str):
        """Sets the target_portal of this IoK8sApiCoreV1ISCSIVolumeSource.

        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).  # noqa: E501

        :param target_portal: The target_portal of this IoK8sApiCoreV1ISCSIVolumeSource.
        :type target_portal: str
        """
        if target_portal is None:
            raise ValueError("Invalid value for `target_portal`, must not be `None`")  # noqa: E501

        self._target_portal = target_portal
