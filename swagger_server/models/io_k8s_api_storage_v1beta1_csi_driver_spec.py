# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiStorageV1beta1CSIDriverSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attach_required: bool=None, pod_info_on_mount: bool=None, volume_lifecycle_modes: List[str]=None):  # noqa: E501
        """IoK8sApiStorageV1beta1CSIDriverSpec - a model defined in Swagger

        :param attach_required: The attach_required of this IoK8sApiStorageV1beta1CSIDriverSpec.  # noqa: E501
        :type attach_required: bool
        :param pod_info_on_mount: The pod_info_on_mount of this IoK8sApiStorageV1beta1CSIDriverSpec.  # noqa: E501
        :type pod_info_on_mount: bool
        :param volume_lifecycle_modes: The volume_lifecycle_modes of this IoK8sApiStorageV1beta1CSIDriverSpec.  # noqa: E501
        :type volume_lifecycle_modes: List[str]
        """
        self.swagger_types = {
            'attach_required': bool,
            'pod_info_on_mount': bool,
            'volume_lifecycle_modes': List[str]
        }

        self.attribute_map = {
            'attach_required': 'attachRequired',
            'pod_info_on_mount': 'podInfoOnMount',
            'volume_lifecycle_modes': 'volumeLifecycleModes'
        }

        self._attach_required = attach_required
        self._pod_info_on_mount = pod_info_on_mount
        self._volume_lifecycle_modes = volume_lifecycle_modes

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiStorageV1beta1CSIDriverSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.storage.v1beta1.CSIDriverSpec of this IoK8sApiStorageV1beta1CSIDriverSpec.  # noqa: E501
        :rtype: IoK8sApiStorageV1beta1CSIDriverSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_required(self) -> bool:
        """Gets the attach_required of this IoK8sApiStorageV1beta1CSIDriverSpec.

        attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.  # noqa: E501

        :return: The attach_required of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :rtype: bool
        """
        return self._attach_required

    @attach_required.setter
    def attach_required(self, attach_required: bool):
        """Sets the attach_required of this IoK8sApiStorageV1beta1CSIDriverSpec.

        attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.  # noqa: E501

        :param attach_required: The attach_required of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :type attach_required: bool
        """

        self._attach_required = attach_required

    @property
    def pod_info_on_mount(self) -> bool:
        """Gets the pod_info_on_mount of this IoK8sApiStorageV1beta1CSIDriverSpec.

        If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume                                 defined by a CSIVolumeSource, otherwise \"false\"  \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.  # noqa: E501

        :return: The pod_info_on_mount of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :rtype: bool
        """
        return self._pod_info_on_mount

    @pod_info_on_mount.setter
    def pod_info_on_mount(self, pod_info_on_mount: bool):
        """Sets the pod_info_on_mount of this IoK8sApiStorageV1beta1CSIDriverSpec.

        If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume                                 defined by a CSIVolumeSource, otherwise \"false\"  \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.  # noqa: E501

        :param pod_info_on_mount: The pod_info_on_mount of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :type pod_info_on_mount: bool
        """

        self._pod_info_on_mount = pod_info_on_mount

    @property
    def volume_lifecycle_modes(self) -> List[str]:
        """Gets the volume_lifecycle_modes of this IoK8sApiStorageV1beta1CSIDriverSpec.

        VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.  # noqa: E501

        :return: The volume_lifecycle_modes of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :rtype: List[str]
        """
        return self._volume_lifecycle_modes

    @volume_lifecycle_modes.setter
    def volume_lifecycle_modes(self, volume_lifecycle_modes: List[str]):
        """Sets the volume_lifecycle_modes of this IoK8sApiStorageV1beta1CSIDriverSpec.

        VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.  # noqa: E501

        :param volume_lifecycle_modes: The volume_lifecycle_modes of this IoK8sApiStorageV1beta1CSIDriverSpec.
        :type volume_lifecycle_modes: List[str]
        """

        self._volume_lifecycle_modes = volume_lifecycle_modes
