# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ServicePort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, node_port: int=None, port: int=None, protocol: str=None, target_port: IoK8sApimachineryPkgUtilIntstrIntOrString=None):  # noqa: E501
        """IoK8sApiCoreV1ServicePort - a model defined in Swagger

        :param name: The name of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :type name: str
        :param node_port: The node_port of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :type node_port: int
        :param port: The port of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :type port: int
        :param protocol: The protocol of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :type protocol: str
        :param target_port: The target_port of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :type target_port: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        self.swagger_types = {
            'name': str,
            'node_port': int,
            'port': int,
            'protocol': str,
            'target_port': IoK8sApimachineryPkgUtilIntstrIntOrString
        }

        self.attribute_map = {
            'name': 'name',
            'node_port': 'nodePort',
            'port': 'port',
            'protocol': 'protocol',
            'target_port': 'targetPort'
        }

        self._name = name
        self._node_port = node_port
        self._port = port
        self._protocol = protocol
        self._target_port = target_port

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ServicePort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ServicePort of this IoK8sApiCoreV1ServicePort.  # noqa: E501
        :rtype: IoK8sApiCoreV1ServicePort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1ServicePort.

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1ServicePort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1ServicePort.

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1ServicePort.
        :type name: str
        """

        self._name = name

    @property
    def node_port(self) -> int:
        """Gets the node_port of this IoK8sApiCoreV1ServicePort.

        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport  # noqa: E501

        :return: The node_port of this IoK8sApiCoreV1ServicePort.
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port: int):
        """Sets the node_port of this IoK8sApiCoreV1ServicePort.

        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport  # noqa: E501

        :param node_port: The node_port of this IoK8sApiCoreV1ServicePort.
        :type node_port: int
        """

        self._node_port = node_port

    @property
    def port(self) -> int:
        """Gets the port of this IoK8sApiCoreV1ServicePort.

        The port that will be exposed by this service.  # noqa: E501

        :return: The port of this IoK8sApiCoreV1ServicePort.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this IoK8sApiCoreV1ServicePort.

        The port that will be exposed by this service.  # noqa: E501

        :param port: The port of this IoK8sApiCoreV1ServicePort.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def protocol(self) -> str:
        """Gets the protocol of this IoK8sApiCoreV1ServicePort.

        The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.  # noqa: E501

        :return: The protocol of this IoK8sApiCoreV1ServicePort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this IoK8sApiCoreV1ServicePort.

        The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.  # noqa: E501

        :param protocol: The protocol of this IoK8sApiCoreV1ServicePort.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def target_port(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the target_port of this IoK8sApiCoreV1ServicePort.

        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service  # noqa: E501

        :return: The target_port of this IoK8sApiCoreV1ServicePort.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the target_port of this IoK8sApiCoreV1ServicePort.

        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service  # noqa: E501

        :param target_port: The target_port of this IoK8sApiCoreV1ServicePort.
        :type target_port: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._target_port = target_port
