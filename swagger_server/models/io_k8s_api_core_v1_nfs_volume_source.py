# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1NFSVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, read_only: bool=None, server: str=None):  # noqa: E501
        """IoK8sApiCoreV1NFSVolumeSource - a model defined in Swagger

        :param path: The path of this IoK8sApiCoreV1NFSVolumeSource.  # noqa: E501
        :type path: str
        :param read_only: The read_only of this IoK8sApiCoreV1NFSVolumeSource.  # noqa: E501
        :type read_only: bool
        :param server: The server of this IoK8sApiCoreV1NFSVolumeSource.  # noqa: E501
        :type server: str
        """
        self.swagger_types = {
            'path': str,
            'read_only': bool,
            'server': str
        }

        self.attribute_map = {
            'path': 'path',
            'read_only': 'readOnly',
            'server': 'server'
        }

        self._path = path
        self._read_only = read_only
        self._server = server

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1NFSVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.NFSVolumeSource of this IoK8sApiCoreV1NFSVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1NFSVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this IoK8sApiCoreV1NFSVolumeSource.

        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :return: The path of this IoK8sApiCoreV1NFSVolumeSource.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this IoK8sApiCoreV1NFSVolumeSource.

        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :param path: The path of this IoK8sApiCoreV1NFSVolumeSource.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1NFSVolumeSource.

        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1NFSVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1NFSVolumeSource.

        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1NFSVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def server(self) -> str:
        """Gets the server of this IoK8sApiCoreV1NFSVolumeSource.

        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :return: The server of this IoK8sApiCoreV1NFSVolumeSource.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server: str):
        """Sets the server of this IoK8sApiCoreV1NFSVolumeSource.

        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :param server: The server of this IoK8sApiCoreV1NFSVolumeSource.
        :type server: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server
