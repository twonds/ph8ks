# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1FCVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, fs_type: str=None, lun: int=None, read_only: bool=None, target_ww_ns: List[str]=None, wwids: List[str]=None):  # noqa: E501
        """IoK8sApiCoreV1FCVolumeSource - a model defined in Swagger

        :param fs_type: The fs_type of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :type fs_type: str
        :param lun: The lun of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :type lun: int
        :param read_only: The read_only of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :type read_only: bool
        :param target_ww_ns: The target_ww_ns of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :type target_ww_ns: List[str]
        :param wwids: The wwids of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :type wwids: List[str]
        """
        self.swagger_types = {
            'fs_type': str,
            'lun': int,
            'read_only': bool,
            'target_ww_ns': List[str],
            'wwids': List[str]
        }

        self.attribute_map = {
            'fs_type': 'fsType',
            'lun': 'lun',
            'read_only': 'readOnly',
            'target_ww_ns': 'targetWWNs',
            'wwids': 'wwids'
        }

        self._fs_type = fs_type
        self._lun = lun
        self._read_only = read_only
        self._target_ww_ns = target_ww_ns
        self._wwids = wwids

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1FCVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.FCVolumeSource of this IoK8sApiCoreV1FCVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1FCVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1FCVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1FCVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1FCVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1FCVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def lun(self) -> int:
        """Gets the lun of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC target lun number  # noqa: E501

        :return: The lun of this IoK8sApiCoreV1FCVolumeSource.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun: int):
        """Sets the lun of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC target lun number  # noqa: E501

        :param lun: The lun of this IoK8sApiCoreV1FCVolumeSource.
        :type lun: int
        """

        self._lun = lun

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1FCVolumeSource.

        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1FCVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1FCVolumeSource.

        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1FCVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def target_ww_ns(self) -> List[str]:
        """Gets the target_ww_ns of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC target worldwide names (WWNs)  # noqa: E501

        :return: The target_ww_ns of this IoK8sApiCoreV1FCVolumeSource.
        :rtype: List[str]
        """
        return self._target_ww_ns

    @target_ww_ns.setter
    def target_ww_ns(self, target_ww_ns: List[str]):
        """Sets the target_ww_ns of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC target worldwide names (WWNs)  # noqa: E501

        :param target_ww_ns: The target_ww_ns of this IoK8sApiCoreV1FCVolumeSource.
        :type target_ww_ns: List[str]
        """

        self._target_ww_ns = target_ww_ns

    @property
    def wwids(self) -> List[str]:
        """Gets the wwids of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.  # noqa: E501

        :return: The wwids of this IoK8sApiCoreV1FCVolumeSource.
        :rtype: List[str]
        """
        return self._wwids

    @wwids.setter
    def wwids(self, wwids: List[str]):
        """Sets the wwids of this IoK8sApiCoreV1FCVolumeSource.

        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.  # noqa: E501

        :param wwids: The wwids of this IoK8sApiCoreV1FCVolumeSource.
        :type wwids: List[str]
        """

        self._wwids = wwids
