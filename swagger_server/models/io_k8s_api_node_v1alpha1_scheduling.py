# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiNodeV1alpha1Scheduling(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, node_selector: Dict[str, str]=None, tolerations: List[IoK8sApiCoreV1Toleration]=None):  # noqa: E501
        """IoK8sApiNodeV1alpha1Scheduling - a model defined in Swagger

        :param node_selector: The node_selector of this IoK8sApiNodeV1alpha1Scheduling.  # noqa: E501
        :type node_selector: Dict[str, str]
        :param tolerations: The tolerations of this IoK8sApiNodeV1alpha1Scheduling.  # noqa: E501
        :type tolerations: List[IoK8sApiCoreV1Toleration]
        """
        self.swagger_types = {
            'node_selector': Dict[str, str],
            'tolerations': List[IoK8sApiCoreV1Toleration]
        }

        self.attribute_map = {
            'node_selector': 'nodeSelector',
            'tolerations': 'tolerations'
        }

        self._node_selector = node_selector
        self._tolerations = tolerations

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiNodeV1alpha1Scheduling':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.node.v1alpha1.Scheduling of this IoK8sApiNodeV1alpha1Scheduling.  # noqa: E501
        :rtype: IoK8sApiNodeV1alpha1Scheduling
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_selector(self) -> Dict[str, str]:
        """Gets the node_selector of this IoK8sApiNodeV1alpha1Scheduling.

        nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.  # noqa: E501

        :return: The node_selector of this IoK8sApiNodeV1alpha1Scheduling.
        :rtype: Dict[str, str]
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector: Dict[str, str]):
        """Sets the node_selector of this IoK8sApiNodeV1alpha1Scheduling.

        nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.  # noqa: E501

        :param node_selector: The node_selector of this IoK8sApiNodeV1alpha1Scheduling.
        :type node_selector: Dict[str, str]
        """

        self._node_selector = node_selector

    @property
    def tolerations(self) -> List[IoK8sApiCoreV1Toleration]:
        """Gets the tolerations of this IoK8sApiNodeV1alpha1Scheduling.

        tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.  # noqa: E501

        :return: The tolerations of this IoK8sApiNodeV1alpha1Scheduling.
        :rtype: List[IoK8sApiCoreV1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations: List[IoK8sApiCoreV1Toleration]):
        """Sets the tolerations of this IoK8sApiNodeV1alpha1Scheduling.

        tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.  # noqa: E501

        :param tolerations: The tolerations of this IoK8sApiNodeV1alpha1Scheduling.
        :type tolerations: List[IoK8sApiCoreV1Toleration]
        """

        self._tolerations = tolerations
