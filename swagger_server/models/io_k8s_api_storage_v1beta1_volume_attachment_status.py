# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiStorageV1beta1VolumeAttachmentStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, attach_error: IoK8sApiStorageV1beta1VolumeError=None, attached: bool=None, attachment_metadata: Dict[str, str]=None, detach_error: IoK8sApiStorageV1beta1VolumeError=None):  # noqa: E501
        """IoK8sApiStorageV1beta1VolumeAttachmentStatus - a model defined in Swagger

        :param attach_error: The attach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.  # noqa: E501
        :type attach_error: IoK8sApiStorageV1beta1VolumeError
        :param attached: The attached of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.  # noqa: E501
        :type attached: bool
        :param attachment_metadata: The attachment_metadata of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.  # noqa: E501
        :type attachment_metadata: Dict[str, str]
        :param detach_error: The detach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.  # noqa: E501
        :type detach_error: IoK8sApiStorageV1beta1VolumeError
        """
        self.swagger_types = {
            'attach_error': IoK8sApiStorageV1beta1VolumeError,
            'attached': bool,
            'attachment_metadata': Dict[str, str],
            'detach_error': IoK8sApiStorageV1beta1VolumeError
        }

        self.attribute_map = {
            'attach_error': 'attachError',
            'attached': 'attached',
            'attachment_metadata': 'attachmentMetadata',
            'detach_error': 'detachError'
        }

        self._attach_error = attach_error
        self._attached = attached
        self._attachment_metadata = attachment_metadata
        self._detach_error = detach_error

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiStorageV1beta1VolumeAttachmentStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.storage.v1beta1.VolumeAttachmentStatus of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.  # noqa: E501
        :rtype: IoK8sApiStorageV1beta1VolumeAttachmentStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_error(self) -> IoK8sApiStorageV1beta1VolumeError:
        """Gets the attach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :return: The attach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :rtype: IoK8sApiStorageV1beta1VolumeError
        """
        return self._attach_error

    @attach_error.setter
    def attach_error(self, attach_error: IoK8sApiStorageV1beta1VolumeError):
        """Sets the attach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :param attach_error: The attach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :type attach_error: IoK8sApiStorageV1beta1VolumeError
        """

        self._attach_error = attach_error

    @property
    def attached(self) -> bool:
        """Gets the attached of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :return: The attached of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :rtype: bool
        """
        return self._attached

    @attached.setter
    def attached(self, attached: bool):
        """Sets the attached of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :param attached: The attached of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :type attached: bool
        """
        if attached is None:
            raise ValueError("Invalid value for `attached`, must not be `None`")  # noqa: E501

        self._attached = attached

    @property
    def attachment_metadata(self) -> Dict[str, str]:
        """Gets the attachment_metadata of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :return: The attachment_metadata of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :rtype: Dict[str, str]
        """
        return self._attachment_metadata

    @attachment_metadata.setter
    def attachment_metadata(self, attachment_metadata: Dict[str, str]):
        """Sets the attachment_metadata of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.  # noqa: E501

        :param attachment_metadata: The attachment_metadata of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :type attachment_metadata: Dict[str, str]
        """

        self._attachment_metadata = attachment_metadata

    @property
    def detach_error(self) -> IoK8sApiStorageV1beta1VolumeError:
        """Gets the detach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.  # noqa: E501

        :return: The detach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :rtype: IoK8sApiStorageV1beta1VolumeError
        """
        return self._detach_error

    @detach_error.setter
    def detach_error(self, detach_error: IoK8sApiStorageV1beta1VolumeError):
        """Sets the detach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.

        The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.  # noqa: E501

        :param detach_error: The detach_error of this IoK8sApiStorageV1beta1VolumeAttachmentStatus.
        :type detach_error: IoK8sApiStorageV1beta1VolumeError
        """

        self._detach_error = detach_error
