# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, kind: str=None, list_kind: str=None, plural: str=None, short_names: List[str]=None, singular: str=None):  # noqa: E501
        """IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames - a model defined in Swagger

        :param categories: The categories of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type categories: List[str]
        :param kind: The kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type kind: str
        :param list_kind: The list_kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type list_kind: str
        :param plural: The plural of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type plural: str
        :param short_names: The short_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type short_names: List[str]
        :param singular: The singular of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :type singular: str
        """
        self.swagger_types = {
            'categories': List[str],
            'kind': str,
            'list_kind': str,
            'plural': str,
            'short_names': List[str],
            'singular': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'kind': 'kind',
            'list_kind': 'listKind',
            'plural': 'plural',
            'short_names': 'shortNames',
            'singular': 'singular'
        }

        self._categories = categories
        self._kind = kind
        self._list_kind = list_kind
        self._plural = plural
        self._short_names = short_names
        self._singular = singular

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.  # noqa: E501
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self) -> List[str]:
        """Gets the categories of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.  # noqa: E501

        :return: The categories of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: List[str]):
        """Sets the categories of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.  # noqa: E501

        :param categories: The categories of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.  # noqa: E501

        :return: The kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.  # noqa: E501

        :param kind: The kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def list_kind(self) -> str:
        """Gets the list_kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".  # noqa: E501

        :return: The list_kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: str
        """
        return self._list_kind

    @list_kind.setter
    def list_kind(self, list_kind: str):
        """Sets the list_kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".  # noqa: E501

        :param list_kind: The list_kind of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type list_kind: str
        """

        self._list_kind = list_kind

    @property
    def plural(self) -> str:
        """Gets the plural of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.  # noqa: E501

        :return: The plural of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: str
        """
        return self._plural

    @plural.setter
    def plural(self, plural: str):
        """Sets the plural of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.  # noqa: E501

        :param plural: The plural of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type plural: str
        """
        if plural is None:
            raise ValueError("Invalid value for `plural`, must not be `None`")  # noqa: E501

        self._plural = plural

    @property
    def short_names(self) -> List[str]:
        """Gets the short_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.  # noqa: E501

        :return: The short_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: List[str]
        """
        return self._short_names

    @short_names.setter
    def short_names(self, short_names: List[str]):
        """Sets the short_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.  # noqa: E501

        :param short_names: The short_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type short_names: List[str]
        """

        self._short_names = short_names

    @property
    def singular(self) -> str:
        """Gets the singular of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.  # noqa: E501

        :return: The singular of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :rtype: str
        """
        return self._singular

    @singular.setter
    def singular(self, singular: str):
        """Sets the singular of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.

        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.  # noqa: E501

        :param singular: The singular of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.
        :type singular: str
        """

        self._singular = singular
