# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1Secret(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, data: Dict[str, ByteArray]=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, string_data: Dict[str, str]=None, type: str=None):  # noqa: E501
        """IoK8sApiCoreV1Secret - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type api_version: str
        :param data: The data of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type data: Dict[str, ByteArray]
        :param kind: The kind of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param string_data: The string_data of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type string_data: Dict[str, str]
        :param type: The type of this IoK8sApiCoreV1Secret.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'api_version': str,
            'data': Dict[str, ByteArray],
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'string_data': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'data': 'data',
            'kind': 'kind',
            'metadata': 'metadata',
            'string_data': 'stringData',
            'type': 'type'
        }

        self._api_version = api_version
        self._data = data
        self._kind = kind
        self._metadata = metadata
        self._string_data = string_data
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1Secret':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.Secret of this IoK8sApiCoreV1Secret.  # noqa: E501
        :rtype: IoK8sApiCoreV1Secret
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiCoreV1Secret.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiCoreV1Secret.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiCoreV1Secret.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiCoreV1Secret.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def data(self) -> Dict[str, ByteArray]:
        """Gets the data of this IoK8sApiCoreV1Secret.

        Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4  # noqa: E501

        :return: The data of this IoK8sApiCoreV1Secret.
        :rtype: Dict[str, ByteArray]
        """
        return self._data

    @data.setter
    def data(self, data: Dict[str, ByteArray]):
        """Sets the data of this IoK8sApiCoreV1Secret.

        Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4  # noqa: E501

        :param data: The data of this IoK8sApiCoreV1Secret.
        :type data: Dict[str, ByteArray]
        """

        self._data = data

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiCoreV1Secret.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiCoreV1Secret.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiCoreV1Secret.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiCoreV1Secret.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiCoreV1Secret.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The metadata of this IoK8sApiCoreV1Secret.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiCoreV1Secret.

        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param metadata: The metadata of this IoK8sApiCoreV1Secret.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def string_data(self) -> Dict[str, str]:
        """Gets the string_data of this IoK8sApiCoreV1Secret.

        stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.  # noqa: E501

        :return: The string_data of this IoK8sApiCoreV1Secret.
        :rtype: Dict[str, str]
        """
        return self._string_data

    @string_data.setter
    def string_data(self, string_data: Dict[str, str]):
        """Sets the string_data of this IoK8sApiCoreV1Secret.

        stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.  # noqa: E501

        :param string_data: The string_data of this IoK8sApiCoreV1Secret.
        :type string_data: Dict[str, str]
        """

        self._string_data = string_data

    @property
    def type(self) -> str:
        """Gets the type of this IoK8sApiCoreV1Secret.

        Used to facilitate programmatic handling of secret data.  # noqa: E501

        :return: The type of this IoK8sApiCoreV1Secret.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this IoK8sApiCoreV1Secret.

        Used to facilitate programmatic handling of secret data.  # noqa: E501

        :param type: The type of this IoK8sApiCoreV1Secret.
        :type type: str
        """

        self._type = type
