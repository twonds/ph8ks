# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiBatchV2alpha1CronJobSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, concurrency_policy: str=None, failed_jobs_history_limit: int=None, job_template: IoK8sApiBatchV2alpha1JobTemplateSpec=None, schedule: str=None, starting_deadline_seconds: int=None, successful_jobs_history_limit: int=None, suspend: bool=None):  # noqa: E501
        """IoK8sApiBatchV2alpha1CronJobSpec - a model defined in Swagger

        :param concurrency_policy: The concurrency_policy of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type concurrency_policy: str
        :param failed_jobs_history_limit: The failed_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type failed_jobs_history_limit: int
        :param job_template: The job_template of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type job_template: IoK8sApiBatchV2alpha1JobTemplateSpec
        :param schedule: The schedule of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type schedule: str
        :param starting_deadline_seconds: The starting_deadline_seconds of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type starting_deadline_seconds: int
        :param successful_jobs_history_limit: The successful_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type successful_jobs_history_limit: int
        :param suspend: The suspend of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :type suspend: bool
        """
        self.swagger_types = {
            'concurrency_policy': str,
            'failed_jobs_history_limit': int,
            'job_template': IoK8sApiBatchV2alpha1JobTemplateSpec,
            'schedule': str,
            'starting_deadline_seconds': int,
            'successful_jobs_history_limit': int,
            'suspend': bool
        }

        self.attribute_map = {
            'concurrency_policy': 'concurrencyPolicy',
            'failed_jobs_history_limit': 'failedJobsHistoryLimit',
            'job_template': 'jobTemplate',
            'schedule': 'schedule',
            'starting_deadline_seconds': 'startingDeadlineSeconds',
            'successful_jobs_history_limit': 'successfulJobsHistoryLimit',
            'suspend': 'suspend'
        }

        self._concurrency_policy = concurrency_policy
        self._failed_jobs_history_limit = failed_jobs_history_limit
        self._job_template = job_template
        self._schedule = schedule
        self._starting_deadline_seconds = starting_deadline_seconds
        self._successful_jobs_history_limit = successful_jobs_history_limit
        self._suspend = suspend

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiBatchV2alpha1CronJobSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.batch.v2alpha1.CronJobSpec of this IoK8sApiBatchV2alpha1CronJobSpec.  # noqa: E501
        :rtype: IoK8sApiBatchV2alpha1CronJobSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrency_policy(self) -> str:
        """Gets the concurrency_policy of this IoK8sApiBatchV2alpha1CronJobSpec.

        Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one  # noqa: E501

        :return: The concurrency_policy of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: str
        """
        return self._concurrency_policy

    @concurrency_policy.setter
    def concurrency_policy(self, concurrency_policy: str):
        """Sets the concurrency_policy of this IoK8sApiBatchV2alpha1CronJobSpec.

        Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one  # noqa: E501

        :param concurrency_policy: The concurrency_policy of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type concurrency_policy: str
        """

        self._concurrency_policy = concurrency_policy

    @property
    def failed_jobs_history_limit(self) -> int:
        """Gets the failed_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.

        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.  # noqa: E501

        :return: The failed_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: int
        """
        return self._failed_jobs_history_limit

    @failed_jobs_history_limit.setter
    def failed_jobs_history_limit(self, failed_jobs_history_limit: int):
        """Sets the failed_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.

        The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.  # noqa: E501

        :param failed_jobs_history_limit: The failed_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type failed_jobs_history_limit: int
        """

        self._failed_jobs_history_limit = failed_jobs_history_limit

    @property
    def job_template(self) -> IoK8sApiBatchV2alpha1JobTemplateSpec:
        """Gets the job_template of this IoK8sApiBatchV2alpha1CronJobSpec.

        Specifies the job that will be created when executing a CronJob.  # noqa: E501

        :return: The job_template of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: IoK8sApiBatchV2alpha1JobTemplateSpec
        """
        return self._job_template

    @job_template.setter
    def job_template(self, job_template: IoK8sApiBatchV2alpha1JobTemplateSpec):
        """Sets the job_template of this IoK8sApiBatchV2alpha1CronJobSpec.

        Specifies the job that will be created when executing a CronJob.  # noqa: E501

        :param job_template: The job_template of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type job_template: IoK8sApiBatchV2alpha1JobTemplateSpec
        """
        if job_template is None:
            raise ValueError("Invalid value for `job_template`, must not be `None`")  # noqa: E501

        self._job_template = job_template

    @property
    def schedule(self) -> str:
        """Gets the schedule of this IoK8sApiBatchV2alpha1CronJobSpec.

        The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.  # noqa: E501

        :return: The schedule of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: str):
        """Sets the schedule of this IoK8sApiBatchV2alpha1CronJobSpec.

        The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.  # noqa: E501

        :param schedule: The schedule of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def starting_deadline_seconds(self) -> int:
        """Gets the starting_deadline_seconds of this IoK8sApiBatchV2alpha1CronJobSpec.

        Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.  # noqa: E501

        :return: The starting_deadline_seconds of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: int
        """
        return self._starting_deadline_seconds

    @starting_deadline_seconds.setter
    def starting_deadline_seconds(self, starting_deadline_seconds: int):
        """Sets the starting_deadline_seconds of this IoK8sApiBatchV2alpha1CronJobSpec.

        Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.  # noqa: E501

        :param starting_deadline_seconds: The starting_deadline_seconds of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type starting_deadline_seconds: int
        """

        self._starting_deadline_seconds = starting_deadline_seconds

    @property
    def successful_jobs_history_limit(self) -> int:
        """Gets the successful_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.

        The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.  # noqa: E501

        :return: The successful_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: int
        """
        return self._successful_jobs_history_limit

    @successful_jobs_history_limit.setter
    def successful_jobs_history_limit(self, successful_jobs_history_limit: int):
        """Sets the successful_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.

        The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.  # noqa: E501

        :param successful_jobs_history_limit: The successful_jobs_history_limit of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type successful_jobs_history_limit: int
        """

        self._successful_jobs_history_limit = successful_jobs_history_limit

    @property
    def suspend(self) -> bool:
        """Gets the suspend of this IoK8sApiBatchV2alpha1CronJobSpec.

        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.  # noqa: E501

        :return: The suspend of this IoK8sApiBatchV2alpha1CronJobSpec.
        :rtype: bool
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend: bool):
        """Sets the suspend of this IoK8sApiBatchV2alpha1CronJobSpec.

        This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.  # noqa: E501

        :param suspend: The suspend of this IoK8sApiBatchV2alpha1CronJobSpec.
        :type suspend: bool
        """

        self._suspend = suspend
