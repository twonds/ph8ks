# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApimachineryPkgApisMetaV1OwnerReference(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, block_owner_deletion: bool=None, controller: bool=None, kind: str=None, name: str=None, uid: str=None):  # noqa: E501
        """IoK8sApimachineryPkgApisMetaV1OwnerReference - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type api_version: str
        :param block_owner_deletion: The block_owner_deletion of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type block_owner_deletion: bool
        :param controller: The controller of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type controller: bool
        :param kind: The kind of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type kind: str
        :param name: The name of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type name: str
        :param uid: The uid of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :type uid: str
        """
        self.swagger_types = {
            'api_version': str,
            'block_owner_deletion': bool,
            'controller': bool,
            'kind': str,
            'name': str,
            'uid': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'block_owner_deletion': 'blockOwnerDeletion',
            'controller': 'controller',
            'kind': 'kind',
            'name': 'name',
            'uid': 'uid'
        }

        self._api_version = api_version
        self._block_owner_deletion = block_owner_deletion
        self._controller = controller
        self._kind = kind
        self._name = name
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApimachineryPkgApisMetaV1OwnerReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference of this IoK8sApimachineryPkgApisMetaV1OwnerReference.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1OwnerReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        API version of the referent.  # noqa: E501

        :return: The api_version of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        API version of the referent.  # noqa: E501

        :param api_version: The api_version of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def block_owner_deletion(self) -> bool:
        """Gets the block_owner_deletion of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.  # noqa: E501

        :return: The block_owner_deletion of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: bool
        """
        return self._block_owner_deletion

    @block_owner_deletion.setter
    def block_owner_deletion(self, block_owner_deletion: bool):
        """Sets the block_owner_deletion of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.  # noqa: E501

        :param block_owner_deletion: The block_owner_deletion of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type block_owner_deletion: bool
        """

        self._block_owner_deletion = block_owner_deletion

    @property
    def controller(self) -> bool:
        """Gets the controller of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        If true, this reference points to the managing controller.  # noqa: E501

        :return: The controller of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: bool
        """
        return self._controller

    @controller.setter
    def controller(self, controller: bool):
        """Sets the controller of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        If true, this reference points to the managing controller.  # noqa: E501

        :param controller: The controller of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type controller: bool
        """

        self._controller = controller

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :return: The name of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names  # noqa: E501

        :param name: The name of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uid(self) -> str:
        """Gets the uid of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :return: The uid of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this IoK8sApimachineryPkgApisMetaV1OwnerReference.

        UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :param uid: The uid of this IoK8sApimachineryPkgApisMetaV1OwnerReference.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid
