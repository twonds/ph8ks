# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ReplicationControllerSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, min_ready_seconds: int=None, replicas: int=None, selector: Dict[str, str]=None, template: IoK8sApiCoreV1PodTemplateSpec=None):  # noqa: E501
        """IoK8sApiCoreV1ReplicationControllerSpec - a model defined in Swagger

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiCoreV1ReplicationControllerSpec.  # noqa: E501
        :type min_ready_seconds: int
        :param replicas: The replicas of this IoK8sApiCoreV1ReplicationControllerSpec.  # noqa: E501
        :type replicas: int
        :param selector: The selector of this IoK8sApiCoreV1ReplicationControllerSpec.  # noqa: E501
        :type selector: Dict[str, str]
        :param template: The template of this IoK8sApiCoreV1ReplicationControllerSpec.  # noqa: E501
        :type template: IoK8sApiCoreV1PodTemplateSpec
        """
        self.swagger_types = {
            'min_ready_seconds': int,
            'replicas': int,
            'selector': Dict[str, str],
            'template': IoK8sApiCoreV1PodTemplateSpec
        }

        self.attribute_map = {
            'min_ready_seconds': 'minReadySeconds',
            'replicas': 'replicas',
            'selector': 'selector',
            'template': 'template'
        }

        self._min_ready_seconds = min_ready_seconds
        self._replicas = replicas
        self._selector = selector
        self._template = template

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ReplicationControllerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ReplicationControllerSpec of this IoK8sApiCoreV1ReplicationControllerSpec.  # noqa: E501
        :rtype: IoK8sApiCoreV1ReplicationControllerSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_ready_seconds(self) -> int:
        """Gets the min_ready_seconds of this IoK8sApiCoreV1ReplicationControllerSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :return: The min_ready_seconds of this IoK8sApiCoreV1ReplicationControllerSpec.
        :rtype: int
        """
        return self._min_ready_seconds

    @min_ready_seconds.setter
    def min_ready_seconds(self, min_ready_seconds: int):
        """Sets the min_ready_seconds of this IoK8sApiCoreV1ReplicationControllerSpec.

        Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)  # noqa: E501

        :param min_ready_seconds: The min_ready_seconds of this IoK8sApiCoreV1ReplicationControllerSpec.
        :type min_ready_seconds: int
        """

        self._min_ready_seconds = min_ready_seconds

    @property
    def replicas(self) -> int:
        """Gets the replicas of this IoK8sApiCoreV1ReplicationControllerSpec.

        Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller  # noqa: E501

        :return: The replicas of this IoK8sApiCoreV1ReplicationControllerSpec.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: int):
        """Sets the replicas of this IoK8sApiCoreV1ReplicationControllerSpec.

        Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller  # noqa: E501

        :param replicas: The replicas of this IoK8sApiCoreV1ReplicationControllerSpec.
        :type replicas: int
        """

        self._replicas = replicas

    @property
    def selector(self) -> Dict[str, str]:
        """Gets the selector of this IoK8sApiCoreV1ReplicationControllerSpec.

        Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors  # noqa: E501

        :return: The selector of this IoK8sApiCoreV1ReplicationControllerSpec.
        :rtype: Dict[str, str]
        """
        return self._selector

    @selector.setter
    def selector(self, selector: Dict[str, str]):
        """Sets the selector of this IoK8sApiCoreV1ReplicationControllerSpec.

        Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors  # noqa: E501

        :param selector: The selector of this IoK8sApiCoreV1ReplicationControllerSpec.
        :type selector: Dict[str, str]
        """

        self._selector = selector

    @property
    def template(self) -> IoK8sApiCoreV1PodTemplateSpec:
        """Gets the template of this IoK8sApiCoreV1ReplicationControllerSpec.

        Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template  # noqa: E501

        :return: The template of this IoK8sApiCoreV1ReplicationControllerSpec.
        :rtype: IoK8sApiCoreV1PodTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template: IoK8sApiCoreV1PodTemplateSpec):
        """Sets the template of this IoK8sApiCoreV1ReplicationControllerSpec.

        Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template  # noqa: E501

        :param template: The template of this IoK8sApiCoreV1ReplicationControllerSpec.
        :type template: IoK8sApiCoreV1PodTemplateSpec
        """

        self._template = template
