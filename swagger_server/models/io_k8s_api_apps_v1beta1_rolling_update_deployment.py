# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAppsV1beta1RollingUpdateDeployment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, max_surge: IoK8sApimachineryPkgUtilIntstrIntOrString=None, max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString=None):  # noqa: E501
        """IoK8sApiAppsV1beta1RollingUpdateDeployment - a model defined in Swagger

        :param max_surge: The max_surge of this IoK8sApiAppsV1beta1RollingUpdateDeployment.  # noqa: E501
        :type max_surge: IoK8sApimachineryPkgUtilIntstrIntOrString
        :param max_unavailable: The max_unavailable of this IoK8sApiAppsV1beta1RollingUpdateDeployment.  # noqa: E501
        :type max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        self.swagger_types = {
            'max_surge': IoK8sApimachineryPkgUtilIntstrIntOrString,
            'max_unavailable': IoK8sApimachineryPkgUtilIntstrIntOrString
        }

        self.attribute_map = {
            'max_surge': 'maxSurge',
            'max_unavailable': 'maxUnavailable'
        }

        self._max_surge = max_surge
        self._max_unavailable = max_unavailable

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAppsV1beta1RollingUpdateDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.apps.v1beta1.RollingUpdateDeployment of this IoK8sApiAppsV1beta1RollingUpdateDeployment.  # noqa: E501
        :rtype: IoK8sApiAppsV1beta1RollingUpdateDeployment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_surge(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the max_surge of this IoK8sApiAppsV1beta1RollingUpdateDeployment.

        The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.  # noqa: E501

        :return: The max_surge of this IoK8sApiAppsV1beta1RollingUpdateDeployment.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._max_surge

    @max_surge.setter
    def max_surge(self, max_surge: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the max_surge of this IoK8sApiAppsV1beta1RollingUpdateDeployment.

        The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.  # noqa: E501

        :param max_surge: The max_surge of this IoK8sApiAppsV1beta1RollingUpdateDeployment.
        :type max_surge: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._max_surge = max_surge

    @property
    def max_unavailable(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the max_unavailable of this IoK8sApiAppsV1beta1RollingUpdateDeployment.

        The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.  # noqa: E501

        :return: The max_unavailable of this IoK8sApiAppsV1beta1RollingUpdateDeployment.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._max_unavailable

    @max_unavailable.setter
    def max_unavailable(self, max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the max_unavailable of this IoK8sApiAppsV1beta1RollingUpdateDeployment.

        The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.  # noqa: E501

        :param max_unavailable: The max_unavailable of this IoK8sApiAppsV1beta1RollingUpdateDeployment.
        :type max_unavailable: IoK8sApimachineryPkgUtilIntstrIntOrString
        """

        self._max_unavailable = max_unavailable
