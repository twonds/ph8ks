# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1EndpointPort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, port: int=None, protocol: str=None):  # noqa: E501
        """IoK8sApiCoreV1EndpointPort - a model defined in Swagger

        :param name: The name of this IoK8sApiCoreV1EndpointPort.  # noqa: E501
        :type name: str
        :param port: The port of this IoK8sApiCoreV1EndpointPort.  # noqa: E501
        :type port: int
        :param protocol: The protocol of this IoK8sApiCoreV1EndpointPort.  # noqa: E501
        :type protocol: str
        """
        self.swagger_types = {
            'name': str,
            'port': int,
            'protocol': str
        }

        self.attribute_map = {
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol'
        }

        self._name = name
        self._port = port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1EndpointPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.EndpointPort of this IoK8sApiCoreV1EndpointPort.  # noqa: E501
        :rtype: IoK8sApiCoreV1EndpointPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1EndpointPort.

        The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1EndpointPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1EndpointPort.

        The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1EndpointPort.
        :type name: str
        """

        self._name = name

    @property
    def port(self) -> int:
        """Gets the port of this IoK8sApiCoreV1EndpointPort.

        The port number of the endpoint.  # noqa: E501

        :return: The port of this IoK8sApiCoreV1EndpointPort.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this IoK8sApiCoreV1EndpointPort.

        The port number of the endpoint.  # noqa: E501

        :param port: The port of this IoK8sApiCoreV1EndpointPort.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def protocol(self) -> str:
        """Gets the protocol of this IoK8sApiCoreV1EndpointPort.

        The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.  # noqa: E501

        :return: The protocol of this IoK8sApiCoreV1EndpointPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this IoK8sApiCoreV1EndpointPort.

        The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.  # noqa: E501

        :param protocol: The protocol of this IoK8sApiCoreV1EndpointPort.
        :type protocol: str
        """

        self._protocol = protocol
