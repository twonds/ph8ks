# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1FlexPersistentVolumeSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, driver: str=None, fs_type: str=None, options: Dict[str, str]=None, read_only: bool=None, secret_ref: IoK8sApiCoreV1SecretReference=None):  # noqa: E501
        """IoK8sApiCoreV1FlexPersistentVolumeSource - a model defined in Swagger

        :param driver: The driver of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :type driver: str
        :param fs_type: The fs_type of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :type fs_type: str
        :param options: The options of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :type options: Dict[str, str]
        :param read_only: The read_only of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :type read_only: bool
        :param secret_ref: The secret_ref of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :type secret_ref: IoK8sApiCoreV1SecretReference
        """
        self.swagger_types = {
            'driver': str,
            'fs_type': str,
            'options': Dict[str, str],
            'read_only': bool,
            'secret_ref': IoK8sApiCoreV1SecretReference
        }

        self.attribute_map = {
            'driver': 'driver',
            'fs_type': 'fsType',
            'options': 'options',
            'read_only': 'readOnly',
            'secret_ref': 'secretRef'
        }

        self._driver = driver
        self._fs_type = fs_type
        self._options = options
        self._read_only = read_only
        self._secret_ref = secret_ref

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1FlexPersistentVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.FlexPersistentVolumeSource of this IoK8sApiCoreV1FlexPersistentVolumeSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1FlexPersistentVolumeSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self) -> str:
        """Gets the driver of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Driver is the name of the driver to use for this volume.  # noqa: E501

        :return: The driver of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Driver is the name of the driver to use for this volume.  # noqa: E501

        :param driver: The driver of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :type driver: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def fs_type(self) -> str:
        """Gets the fs_type of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.  # noqa: E501

        :return: The fs_type of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type: str):
        """Sets the fs_type of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.  # noqa: E501

        :param fs_type: The fs_type of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def options(self) -> Dict[str, str]:
        """Gets the options of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: Extra command options if any.  # noqa: E501

        :return: The options of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :rtype: Dict[str, str]
        """
        return self._options

    @options.setter
    def options(self, options: Dict[str, str]):
        """Sets the options of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: Extra command options if any.  # noqa: E501

        :param options: The options of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :type options: Dict[str, str]
        """

        self._options = options

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :return: The read_only of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.  # noqa: E501

        :param read_only: The read_only of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secret_ref(self) -> IoK8sApiCoreV1SecretReference:
        """Gets the secret_ref of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.  # noqa: E501

        :return: The secret_ref of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :rtype: IoK8sApiCoreV1SecretReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref: IoK8sApiCoreV1SecretReference):
        """Sets the secret_ref of this IoK8sApiCoreV1FlexPersistentVolumeSource.

        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.  # noqa: E501

        :param secret_ref: The secret_ref of this IoK8sApiCoreV1FlexPersistentVolumeSource.
        :type secret_ref: IoK8sApiCoreV1SecretReference
        """

        self._secret_ref = secret_ref
