# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiRbacV1ClusterRoleBinding(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, kind: str=None, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta=None, role_ref: IoK8sApiRbacV1RoleRef=None, subjects: List[IoK8sApiRbacV1Subject]=None):  # noqa: E501
        """IoK8sApiRbacV1ClusterRoleBinding - a model defined in Swagger

        :param api_version: The api_version of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :type api_version: str
        :param kind: The kind of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :type kind: str
        :param metadata: The metadata of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        :param role_ref: The role_ref of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :type role_ref: IoK8sApiRbacV1RoleRef
        :param subjects: The subjects of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :type subjects: List[IoK8sApiRbacV1Subject]
        """
        self.swagger_types = {
            'api_version': str,
            'kind': str,
            'metadata': IoK8sApimachineryPkgApisMetaV1ObjectMeta,
            'role_ref': IoK8sApiRbacV1RoleRef,
            'subjects': List[IoK8sApiRbacV1Subject]
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'kind': 'kind',
            'metadata': 'metadata',
            'role_ref': 'roleRef',
            'subjects': 'subjects'
        }

        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._role_ref = role_ref
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiRbacV1ClusterRoleBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.rbac.v1.ClusterRoleBinding of this IoK8sApiRbacV1ClusterRoleBinding.  # noqa: E501
        :rtype: IoK8sApiRbacV1ClusterRoleBinding
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this IoK8sApiRbacV1ClusterRoleBinding.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiRbacV1ClusterRoleBinding.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this IoK8sApiRbacV1ClusterRoleBinding.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiRbacV1ClusterRoleBinding.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self) -> str:
        """Gets the kind of this IoK8sApiRbacV1ClusterRoleBinding.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiRbacV1ClusterRoleBinding.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this IoK8sApiRbacV1ClusterRoleBinding.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiRbacV1ClusterRoleBinding.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta:
        """Gets the metadata of this IoK8sApiRbacV1ClusterRoleBinding.

        Standard object's metadata.  # noqa: E501

        :return: The metadata of this IoK8sApiRbacV1ClusterRoleBinding.
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta):
        """Sets the metadata of this IoK8sApiRbacV1ClusterRoleBinding.

        Standard object's metadata.  # noqa: E501

        :param metadata: The metadata of this IoK8sApiRbacV1ClusterRoleBinding.
        :type metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def role_ref(self) -> IoK8sApiRbacV1RoleRef:
        """Gets the role_ref of this IoK8sApiRbacV1ClusterRoleBinding.

        RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.  # noqa: E501

        :return: The role_ref of this IoK8sApiRbacV1ClusterRoleBinding.
        :rtype: IoK8sApiRbacV1RoleRef
        """
        return self._role_ref

    @role_ref.setter
    def role_ref(self, role_ref: IoK8sApiRbacV1RoleRef):
        """Sets the role_ref of this IoK8sApiRbacV1ClusterRoleBinding.

        RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.  # noqa: E501

        :param role_ref: The role_ref of this IoK8sApiRbacV1ClusterRoleBinding.
        :type role_ref: IoK8sApiRbacV1RoleRef
        """
        if role_ref is None:
            raise ValueError("Invalid value for `role_ref`, must not be `None`")  # noqa: E501

        self._role_ref = role_ref

    @property
    def subjects(self) -> List[IoK8sApiRbacV1Subject]:
        """Gets the subjects of this IoK8sApiRbacV1ClusterRoleBinding.

        Subjects holds references to the objects the role applies to.  # noqa: E501

        :return: The subjects of this IoK8sApiRbacV1ClusterRoleBinding.
        :rtype: List[IoK8sApiRbacV1Subject]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects: List[IoK8sApiRbacV1Subject]):
        """Sets the subjects of this IoK8sApiRbacV1ClusterRoleBinding.

        Subjects holds references to the objects the role applies to.  # noqa: E501

        :param subjects: The subjects of this IoK8sApiRbacV1ClusterRoleBinding.
        :type subjects: List[IoK8sApiRbacV1Subject]
        """

        self._subjects = subjects
