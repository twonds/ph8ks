# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1PersistentVolumeSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_modes: List[str]=None, aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource=None, azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource=None, azure_file: IoK8sApiCoreV1AzureFilePersistentVolumeSource=None, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, cephfs: IoK8sApiCoreV1CephFSPersistentVolumeSource=None, cinder: IoK8sApiCoreV1CinderPersistentVolumeSource=None, claim_ref: IoK8sApiCoreV1ObjectReference=None, csi: IoK8sApiCoreV1CSIPersistentVolumeSource=None, fc: IoK8sApiCoreV1FCVolumeSource=None, flex_volume: IoK8sApiCoreV1FlexPersistentVolumeSource=None, flocker: IoK8sApiCoreV1FlockerVolumeSource=None, gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource=None, glusterfs: IoK8sApiCoreV1GlusterfsPersistentVolumeSource=None, host_path: IoK8sApiCoreV1HostPathVolumeSource=None, iscsi: IoK8sApiCoreV1ISCSIPersistentVolumeSource=None, local: IoK8sApiCoreV1LocalVolumeSource=None, mount_options: List[str]=None, nfs: IoK8sApiCoreV1NFSVolumeSource=None, node_affinity: IoK8sApiCoreV1VolumeNodeAffinity=None, persistent_volume_reclaim_policy: str=None, photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource=None, portworx_volume: IoK8sApiCoreV1PortworxVolumeSource=None, quobyte: IoK8sApiCoreV1QuobyteVolumeSource=None, rbd: IoK8sApiCoreV1RBDPersistentVolumeSource=None, scale_io: IoK8sApiCoreV1ScaleIOPersistentVolumeSource=None, storage_class_name: str=None, storageos: IoK8sApiCoreV1StorageOSPersistentVolumeSource=None, volume_mode: str=None, vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource=None):  # noqa: E501
        """IoK8sApiCoreV1PersistentVolumeSpec - a model defined in Swagger

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type access_modes: List[str]
        :param aws_elastic_block_store: The aws_elastic_block_store of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        :param azure_disk: The azure_disk of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource
        :param azure_file: The azure_file of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type azure_file: IoK8sApiCoreV1AzureFilePersistentVolumeSource
        :param capacity: The capacity of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param cephfs: The cephfs of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type cephfs: IoK8sApiCoreV1CephFSPersistentVolumeSource
        :param cinder: The cinder of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type cinder: IoK8sApiCoreV1CinderPersistentVolumeSource
        :param claim_ref: The claim_ref of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type claim_ref: IoK8sApiCoreV1ObjectReference
        :param csi: The csi of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type csi: IoK8sApiCoreV1CSIPersistentVolumeSource
        :param fc: The fc of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type fc: IoK8sApiCoreV1FCVolumeSource
        :param flex_volume: The flex_volume of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type flex_volume: IoK8sApiCoreV1FlexPersistentVolumeSource
        :param flocker: The flocker of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type flocker: IoK8sApiCoreV1FlockerVolumeSource
        :param gce_persistent_disk: The gce_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        :param glusterfs: The glusterfs of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type glusterfs: IoK8sApiCoreV1GlusterfsPersistentVolumeSource
        :param host_path: The host_path of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type host_path: IoK8sApiCoreV1HostPathVolumeSource
        :param iscsi: The iscsi of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type iscsi: IoK8sApiCoreV1ISCSIPersistentVolumeSource
        :param local: The local of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type local: IoK8sApiCoreV1LocalVolumeSource
        :param mount_options: The mount_options of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type mount_options: List[str]
        :param nfs: The nfs of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type nfs: IoK8sApiCoreV1NFSVolumeSource
        :param node_affinity: The node_affinity of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type node_affinity: IoK8sApiCoreV1VolumeNodeAffinity
        :param persistent_volume_reclaim_policy: The persistent_volume_reclaim_policy of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type persistent_volume_reclaim_policy: str
        :param photon_persistent_disk: The photon_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        :param portworx_volume: The portworx_volume of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type portworx_volume: IoK8sApiCoreV1PortworxVolumeSource
        :param quobyte: The quobyte of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type quobyte: IoK8sApiCoreV1QuobyteVolumeSource
        :param rbd: The rbd of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type rbd: IoK8sApiCoreV1RBDPersistentVolumeSource
        :param scale_io: The scale_io of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type scale_io: IoK8sApiCoreV1ScaleIOPersistentVolumeSource
        :param storage_class_name: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type storage_class_name: str
        :param storageos: The storageos of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type storageos: IoK8sApiCoreV1StorageOSPersistentVolumeSource
        :param volume_mode: The volume_mode of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type volume_mode: str
        :param vsphere_volume: The vsphere_volume of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :type vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """
        self.swagger_types = {
            'access_modes': List[str],
            'aws_elastic_block_store': IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource,
            'azure_disk': IoK8sApiCoreV1AzureDiskVolumeSource,
            'azure_file': IoK8sApiCoreV1AzureFilePersistentVolumeSource,
            'capacity': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'cephfs': IoK8sApiCoreV1CephFSPersistentVolumeSource,
            'cinder': IoK8sApiCoreV1CinderPersistentVolumeSource,
            'claim_ref': IoK8sApiCoreV1ObjectReference,
            'csi': IoK8sApiCoreV1CSIPersistentVolumeSource,
            'fc': IoK8sApiCoreV1FCVolumeSource,
            'flex_volume': IoK8sApiCoreV1FlexPersistentVolumeSource,
            'flocker': IoK8sApiCoreV1FlockerVolumeSource,
            'gce_persistent_disk': IoK8sApiCoreV1GCEPersistentDiskVolumeSource,
            'glusterfs': IoK8sApiCoreV1GlusterfsPersistentVolumeSource,
            'host_path': IoK8sApiCoreV1HostPathVolumeSource,
            'iscsi': IoK8sApiCoreV1ISCSIPersistentVolumeSource,
            'local': IoK8sApiCoreV1LocalVolumeSource,
            'mount_options': List[str],
            'nfs': IoK8sApiCoreV1NFSVolumeSource,
            'node_affinity': IoK8sApiCoreV1VolumeNodeAffinity,
            'persistent_volume_reclaim_policy': str,
            'photon_persistent_disk': IoK8sApiCoreV1PhotonPersistentDiskVolumeSource,
            'portworx_volume': IoK8sApiCoreV1PortworxVolumeSource,
            'quobyte': IoK8sApiCoreV1QuobyteVolumeSource,
            'rbd': IoK8sApiCoreV1RBDPersistentVolumeSource,
            'scale_io': IoK8sApiCoreV1ScaleIOPersistentVolumeSource,
            'storage_class_name': str,
            'storageos': IoK8sApiCoreV1StorageOSPersistentVolumeSource,
            'volume_mode': str,
            'vsphere_volume': IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        }

        self.attribute_map = {
            'access_modes': 'accessModes',
            'aws_elastic_block_store': 'awsElasticBlockStore',
            'azure_disk': 'azureDisk',
            'azure_file': 'azureFile',
            'capacity': 'capacity',
            'cephfs': 'cephfs',
            'cinder': 'cinder',
            'claim_ref': 'claimRef',
            'csi': 'csi',
            'fc': 'fc',
            'flex_volume': 'flexVolume',
            'flocker': 'flocker',
            'gce_persistent_disk': 'gcePersistentDisk',
            'glusterfs': 'glusterfs',
            'host_path': 'hostPath',
            'iscsi': 'iscsi',
            'local': 'local',
            'mount_options': 'mountOptions',
            'nfs': 'nfs',
            'node_affinity': 'nodeAffinity',
            'persistent_volume_reclaim_policy': 'persistentVolumeReclaimPolicy',
            'photon_persistent_disk': 'photonPersistentDisk',
            'portworx_volume': 'portworxVolume',
            'quobyte': 'quobyte',
            'rbd': 'rbd',
            'scale_io': 'scaleIO',
            'storage_class_name': 'storageClassName',
            'storageos': 'storageos',
            'volume_mode': 'volumeMode',
            'vsphere_volume': 'vsphereVolume'
        }

        self._access_modes = access_modes
        self._aws_elastic_block_store = aws_elastic_block_store
        self._azure_disk = azure_disk
        self._azure_file = azure_file
        self._capacity = capacity
        self._cephfs = cephfs
        self._cinder = cinder
        self._claim_ref = claim_ref
        self._csi = csi
        self._fc = fc
        self._flex_volume = flex_volume
        self._flocker = flocker
        self._gce_persistent_disk = gce_persistent_disk
        self._glusterfs = glusterfs
        self._host_path = host_path
        self._iscsi = iscsi
        self._local = local
        self._mount_options = mount_options
        self._nfs = nfs
        self._node_affinity = node_affinity
        self._persistent_volume_reclaim_policy = persistent_volume_reclaim_policy
        self._photon_persistent_disk = photon_persistent_disk
        self._portworx_volume = portworx_volume
        self._quobyte = quobyte
        self._rbd = rbd
        self._scale_io = scale_io
        self._storage_class_name = storage_class_name
        self._storageos = storageos
        self._volume_mode = volume_mode
        self._vsphere_volume = vsphere_volume

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1PersistentVolumeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.PersistentVolumeSpec of this IoK8sApiCoreV1PersistentVolumeSpec.  # noqa: E501
        :rtype: IoK8sApiCoreV1PersistentVolumeSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_modes(self) -> List[str]:
        """Gets the access_modes of this IoK8sApiCoreV1PersistentVolumeSpec.

        AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes  # noqa: E501

        :return: The access_modes of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: List[str]
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes: List[str]):
        """Sets the access_modes of this IoK8sApiCoreV1PersistentVolumeSpec.

        AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes  # noqa: E501

        :param access_modes: The access_modes of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type access_modes: List[str]
        """

        self._access_modes = access_modes

    @property
    def aws_elastic_block_store(self) -> IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource:
        """Gets the aws_elastic_block_store of this IoK8sApiCoreV1PersistentVolumeSpec.

        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore  # noqa: E501

        :return: The aws_elastic_block_store of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        """
        return self._aws_elastic_block_store

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource):
        """Sets the aws_elastic_block_store of this IoK8sApiCoreV1PersistentVolumeSpec.

        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore  # noqa: E501

        :param aws_elastic_block_store: The aws_elastic_block_store of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type aws_elastic_block_store: IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
        """

        self._aws_elastic_block_store = aws_elastic_block_store

    @property
    def azure_disk(self) -> IoK8sApiCoreV1AzureDiskVolumeSource:
        """Gets the azure_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.  # noqa: E501

        :return: The azure_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1AzureDiskVolumeSource
        """
        return self._azure_disk

    @azure_disk.setter
    def azure_disk(self, azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource):
        """Sets the azure_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.  # noqa: E501

        :param azure_disk: The azure_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type azure_disk: IoK8sApiCoreV1AzureDiskVolumeSource
        """

        self._azure_disk = azure_disk

    @property
    def azure_file(self) -> IoK8sApiCoreV1AzureFilePersistentVolumeSource:
        """Gets the azure_file of this IoK8sApiCoreV1PersistentVolumeSpec.

        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.  # noqa: E501

        :return: The azure_file of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1AzureFilePersistentVolumeSource
        """
        return self._azure_file

    @azure_file.setter
    def azure_file(self, azure_file: IoK8sApiCoreV1AzureFilePersistentVolumeSource):
        """Sets the azure_file of this IoK8sApiCoreV1PersistentVolumeSpec.

        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.  # noqa: E501

        :param azure_file: The azure_file of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type azure_file: IoK8sApiCoreV1AzureFilePersistentVolumeSource
        """

        self._azure_file = azure_file

    @property
    def capacity(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the capacity of this IoK8sApiCoreV1PersistentVolumeSpec.

        A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :return: The capacity of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the capacity of this IoK8sApiCoreV1PersistentVolumeSpec.

        A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :param capacity: The capacity of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._capacity = capacity

    @property
    def cephfs(self) -> IoK8sApiCoreV1CephFSPersistentVolumeSource:
        """Gets the cephfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime  # noqa: E501

        :return: The cephfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1CephFSPersistentVolumeSource
        """
        return self._cephfs

    @cephfs.setter
    def cephfs(self, cephfs: IoK8sApiCoreV1CephFSPersistentVolumeSource):
        """Sets the cephfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime  # noqa: E501

        :param cephfs: The cephfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type cephfs: IoK8sApiCoreV1CephFSPersistentVolumeSource
        """

        self._cephfs = cephfs

    @property
    def cinder(self) -> IoK8sApiCoreV1CinderPersistentVolumeSource:
        """Gets the cinder of this IoK8sApiCoreV1PersistentVolumeSpec.

        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md  # noqa: E501

        :return: The cinder of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1CinderPersistentVolumeSource
        """
        return self._cinder

    @cinder.setter
    def cinder(self, cinder: IoK8sApiCoreV1CinderPersistentVolumeSource):
        """Sets the cinder of this IoK8sApiCoreV1PersistentVolumeSpec.

        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md  # noqa: E501

        :param cinder: The cinder of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type cinder: IoK8sApiCoreV1CinderPersistentVolumeSource
        """

        self._cinder = cinder

    @property
    def claim_ref(self) -> IoK8sApiCoreV1ObjectReference:
        """Gets the claim_ref of this IoK8sApiCoreV1PersistentVolumeSpec.

        ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding  # noqa: E501

        :return: The claim_ref of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1ObjectReference
        """
        return self._claim_ref

    @claim_ref.setter
    def claim_ref(self, claim_ref: IoK8sApiCoreV1ObjectReference):
        """Sets the claim_ref of this IoK8sApiCoreV1PersistentVolumeSpec.

        ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding  # noqa: E501

        :param claim_ref: The claim_ref of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type claim_ref: IoK8sApiCoreV1ObjectReference
        """

        self._claim_ref = claim_ref

    @property
    def csi(self) -> IoK8sApiCoreV1CSIPersistentVolumeSource:
        """Gets the csi of this IoK8sApiCoreV1PersistentVolumeSpec.

        CSI represents storage that is handled by an external CSI driver (Beta feature).  # noqa: E501

        :return: The csi of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1CSIPersistentVolumeSource
        """
        return self._csi

    @csi.setter
    def csi(self, csi: IoK8sApiCoreV1CSIPersistentVolumeSource):
        """Sets the csi of this IoK8sApiCoreV1PersistentVolumeSpec.

        CSI represents storage that is handled by an external CSI driver (Beta feature).  # noqa: E501

        :param csi: The csi of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type csi: IoK8sApiCoreV1CSIPersistentVolumeSource
        """

        self._csi = csi

    @property
    def fc(self) -> IoK8sApiCoreV1FCVolumeSource:
        """Gets the fc of this IoK8sApiCoreV1PersistentVolumeSpec.

        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.  # noqa: E501

        :return: The fc of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1FCVolumeSource
        """
        return self._fc

    @fc.setter
    def fc(self, fc: IoK8sApiCoreV1FCVolumeSource):
        """Sets the fc of this IoK8sApiCoreV1PersistentVolumeSpec.

        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.  # noqa: E501

        :param fc: The fc of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type fc: IoK8sApiCoreV1FCVolumeSource
        """

        self._fc = fc

    @property
    def flex_volume(self) -> IoK8sApiCoreV1FlexPersistentVolumeSource:
        """Gets the flex_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.  # noqa: E501

        :return: The flex_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1FlexPersistentVolumeSource
        """
        return self._flex_volume

    @flex_volume.setter
    def flex_volume(self, flex_volume: IoK8sApiCoreV1FlexPersistentVolumeSource):
        """Sets the flex_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.  # noqa: E501

        :param flex_volume: The flex_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type flex_volume: IoK8sApiCoreV1FlexPersistentVolumeSource
        """

        self._flex_volume = flex_volume

    @property
    def flocker(self) -> IoK8sApiCoreV1FlockerVolumeSource:
        """Gets the flocker of this IoK8sApiCoreV1PersistentVolumeSpec.

        Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running  # noqa: E501

        :return: The flocker of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1FlockerVolumeSource
        """
        return self._flocker

    @flocker.setter
    def flocker(self, flocker: IoK8sApiCoreV1FlockerVolumeSource):
        """Sets the flocker of this IoK8sApiCoreV1PersistentVolumeSpec.

        Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running  # noqa: E501

        :param flocker: The flocker of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type flocker: IoK8sApiCoreV1FlockerVolumeSource
        """

        self._flocker = flocker

    @property
    def gce_persistent_disk(self) -> IoK8sApiCoreV1GCEPersistentDiskVolumeSource:
        """Gets the gce_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :return: The gce_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        """
        return self._gce_persistent_disk

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource):
        """Sets the gce_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk  # noqa: E501

        :param gce_persistent_disk: The gce_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type gce_persistent_disk: IoK8sApiCoreV1GCEPersistentDiskVolumeSource
        """

        self._gce_persistent_disk = gce_persistent_disk

    @property
    def glusterfs(self) -> IoK8sApiCoreV1GlusterfsPersistentVolumeSource:
        """Gets the glusterfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md  # noqa: E501

        :return: The glusterfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1GlusterfsPersistentVolumeSource
        """
        return self._glusterfs

    @glusterfs.setter
    def glusterfs(self, glusterfs: IoK8sApiCoreV1GlusterfsPersistentVolumeSource):
        """Sets the glusterfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md  # noqa: E501

        :param glusterfs: The glusterfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type glusterfs: IoK8sApiCoreV1GlusterfsPersistentVolumeSource
        """

        self._glusterfs = glusterfs

    @property
    def host_path(self) -> IoK8sApiCoreV1HostPathVolumeSource:
        """Gets the host_path of this IoK8sApiCoreV1PersistentVolumeSpec.

        HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath  # noqa: E501

        :return: The host_path of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1HostPathVolumeSource
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path: IoK8sApiCoreV1HostPathVolumeSource):
        """Sets the host_path of this IoK8sApiCoreV1PersistentVolumeSpec.

        HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath  # noqa: E501

        :param host_path: The host_path of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type host_path: IoK8sApiCoreV1HostPathVolumeSource
        """

        self._host_path = host_path

    @property
    def iscsi(self) -> IoK8sApiCoreV1ISCSIPersistentVolumeSource:
        """Gets the iscsi of this IoK8sApiCoreV1PersistentVolumeSpec.

        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.  # noqa: E501

        :return: The iscsi of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1ISCSIPersistentVolumeSource
        """
        return self._iscsi

    @iscsi.setter
    def iscsi(self, iscsi: IoK8sApiCoreV1ISCSIPersistentVolumeSource):
        """Sets the iscsi of this IoK8sApiCoreV1PersistentVolumeSpec.

        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.  # noqa: E501

        :param iscsi: The iscsi of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type iscsi: IoK8sApiCoreV1ISCSIPersistentVolumeSource
        """

        self._iscsi = iscsi

    @property
    def local(self) -> IoK8sApiCoreV1LocalVolumeSource:
        """Gets the local of this IoK8sApiCoreV1PersistentVolumeSpec.

        Local represents directly-attached storage with node affinity  # noqa: E501

        :return: The local of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1LocalVolumeSource
        """
        return self._local

    @local.setter
    def local(self, local: IoK8sApiCoreV1LocalVolumeSource):
        """Sets the local of this IoK8sApiCoreV1PersistentVolumeSpec.

        Local represents directly-attached storage with node affinity  # noqa: E501

        :param local: The local of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type local: IoK8sApiCoreV1LocalVolumeSource
        """

        self._local = local

    @property
    def mount_options(self) -> List[str]:
        """Gets the mount_options of this IoK8sApiCoreV1PersistentVolumeSpec.

        A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options  # noqa: E501

        :return: The mount_options of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: List[str]
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options: List[str]):
        """Sets the mount_options of this IoK8sApiCoreV1PersistentVolumeSpec.

        A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options  # noqa: E501

        :param mount_options: The mount_options of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type mount_options: List[str]
        """

        self._mount_options = mount_options

    @property
    def nfs(self) -> IoK8sApiCoreV1NFSVolumeSource:
        """Gets the nfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :return: The nfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1NFSVolumeSource
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs: IoK8sApiCoreV1NFSVolumeSource):
        """Sets the nfs of this IoK8sApiCoreV1PersistentVolumeSpec.

        NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs  # noqa: E501

        :param nfs: The nfs of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type nfs: IoK8sApiCoreV1NFSVolumeSource
        """

        self._nfs = nfs

    @property
    def node_affinity(self) -> IoK8sApiCoreV1VolumeNodeAffinity:
        """Gets the node_affinity of this IoK8sApiCoreV1PersistentVolumeSpec.

        NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.  # noqa: E501

        :return: The node_affinity of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1VolumeNodeAffinity
        """
        return self._node_affinity

    @node_affinity.setter
    def node_affinity(self, node_affinity: IoK8sApiCoreV1VolumeNodeAffinity):
        """Sets the node_affinity of this IoK8sApiCoreV1PersistentVolumeSpec.

        NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.  # noqa: E501

        :param node_affinity: The node_affinity of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type node_affinity: IoK8sApiCoreV1VolumeNodeAffinity
        """

        self._node_affinity = node_affinity

    @property
    def persistent_volume_reclaim_policy(self) -> str:
        """Gets the persistent_volume_reclaim_policy of this IoK8sApiCoreV1PersistentVolumeSpec.

        What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming  # noqa: E501

        :return: The persistent_volume_reclaim_policy of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: str
        """
        return self._persistent_volume_reclaim_policy

    @persistent_volume_reclaim_policy.setter
    def persistent_volume_reclaim_policy(self, persistent_volume_reclaim_policy: str):
        """Sets the persistent_volume_reclaim_policy of this IoK8sApiCoreV1PersistentVolumeSpec.

        What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming  # noqa: E501

        :param persistent_volume_reclaim_policy: The persistent_volume_reclaim_policy of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type persistent_volume_reclaim_policy: str
        """

        self._persistent_volume_reclaim_policy = persistent_volume_reclaim_policy

    @property
    def photon_persistent_disk(self) -> IoK8sApiCoreV1PhotonPersistentDiskVolumeSource:
        """Gets the photon_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine  # noqa: E501

        :return: The photon_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        """
        return self._photon_persistent_disk

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource):
        """Sets the photon_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.

        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine  # noqa: E501

        :param photon_persistent_disk: The photon_persistent_disk of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type photon_persistent_disk: IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
        """

        self._photon_persistent_disk = photon_persistent_disk

    @property
    def portworx_volume(self) -> IoK8sApiCoreV1PortworxVolumeSource:
        """Gets the portworx_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine  # noqa: E501

        :return: The portworx_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1PortworxVolumeSource
        """
        return self._portworx_volume

    @portworx_volume.setter
    def portworx_volume(self, portworx_volume: IoK8sApiCoreV1PortworxVolumeSource):
        """Sets the portworx_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine  # noqa: E501

        :param portworx_volume: The portworx_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type portworx_volume: IoK8sApiCoreV1PortworxVolumeSource
        """

        self._portworx_volume = portworx_volume

    @property
    def quobyte(self) -> IoK8sApiCoreV1QuobyteVolumeSource:
        """Gets the quobyte of this IoK8sApiCoreV1PersistentVolumeSpec.

        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime  # noqa: E501

        :return: The quobyte of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1QuobyteVolumeSource
        """
        return self._quobyte

    @quobyte.setter
    def quobyte(self, quobyte: IoK8sApiCoreV1QuobyteVolumeSource):
        """Sets the quobyte of this IoK8sApiCoreV1PersistentVolumeSpec.

        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime  # noqa: E501

        :param quobyte: The quobyte of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type quobyte: IoK8sApiCoreV1QuobyteVolumeSource
        """

        self._quobyte = quobyte

    @property
    def rbd(self) -> IoK8sApiCoreV1RBDPersistentVolumeSource:
        """Gets the rbd of this IoK8sApiCoreV1PersistentVolumeSpec.

        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md  # noqa: E501

        :return: The rbd of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1RBDPersistentVolumeSource
        """
        return self._rbd

    @rbd.setter
    def rbd(self, rbd: IoK8sApiCoreV1RBDPersistentVolumeSource):
        """Sets the rbd of this IoK8sApiCoreV1PersistentVolumeSpec.

        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md  # noqa: E501

        :param rbd: The rbd of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type rbd: IoK8sApiCoreV1RBDPersistentVolumeSource
        """

        self._rbd = rbd

    @property
    def scale_io(self) -> IoK8sApiCoreV1ScaleIOPersistentVolumeSource:
        """Gets the scale_io of this IoK8sApiCoreV1PersistentVolumeSpec.

        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :return: The scale_io of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1ScaleIOPersistentVolumeSource
        """
        return self._scale_io

    @scale_io.setter
    def scale_io(self, scale_io: IoK8sApiCoreV1ScaleIOPersistentVolumeSource):
        """Sets the scale_io of this IoK8sApiCoreV1PersistentVolumeSpec.

        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.  # noqa: E501

        :param scale_io: The scale_io of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type scale_io: IoK8sApiCoreV1ScaleIOPersistentVolumeSource
        """

        self._scale_io = scale_io

    @property
    def storage_class_name(self) -> str:
        """Gets the storage_class_name of this IoK8sApiCoreV1PersistentVolumeSpec.

        Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.  # noqa: E501

        :return: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: str
        """
        return self._storage_class_name

    @storage_class_name.setter
    def storage_class_name(self, storage_class_name: str):
        """Sets the storage_class_name of this IoK8sApiCoreV1PersistentVolumeSpec.

        Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.  # noqa: E501

        :param storage_class_name: The storage_class_name of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type storage_class_name: str
        """

        self._storage_class_name = storage_class_name

    @property
    def storageos(self) -> IoK8sApiCoreV1StorageOSPersistentVolumeSource:
        """Gets the storageos of this IoK8sApiCoreV1PersistentVolumeSpec.

        StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md  # noqa: E501

        :return: The storageos of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1StorageOSPersistentVolumeSource
        """
        return self._storageos

    @storageos.setter
    def storageos(self, storageos: IoK8sApiCoreV1StorageOSPersistentVolumeSource):
        """Sets the storageos of this IoK8sApiCoreV1PersistentVolumeSpec.

        StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md  # noqa: E501

        :param storageos: The storageos of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type storageos: IoK8sApiCoreV1StorageOSPersistentVolumeSource
        """

        self._storageos = storageos

    @property
    def volume_mode(self) -> str:
        """Gets the volume_mode of this IoK8sApiCoreV1PersistentVolumeSpec.

        volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is a beta feature.  # noqa: E501

        :return: The volume_mode of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: str
        """
        return self._volume_mode

    @volume_mode.setter
    def volume_mode(self, volume_mode: str):
        """Sets the volume_mode of this IoK8sApiCoreV1PersistentVolumeSpec.

        volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is a beta feature.  # noqa: E501

        :param volume_mode: The volume_mode of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type volume_mode: str
        """

        self._volume_mode = volume_mode

    @property
    def vsphere_volume(self) -> IoK8sApiCoreV1VsphereVirtualDiskVolumeSource:
        """Gets the vsphere_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine  # noqa: E501

        :return: The vsphere_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :rtype: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """
        return self._vsphere_volume

    @vsphere_volume.setter
    def vsphere_volume(self, vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource):
        """Sets the vsphere_volume of this IoK8sApiCoreV1PersistentVolumeSpec.

        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine  # noqa: E501

        :param vsphere_volume: The vsphere_volume of this IoK8sApiCoreV1PersistentVolumeSpec.
        :type vsphere_volume: IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
        """

        self._vsphere_volume = vsphere_volume
