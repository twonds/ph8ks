# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1ResourceQuotaStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, used: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None):  # noqa: E501
        """IoK8sApiCoreV1ResourceQuotaStatus - a model defined in Swagger

        :param hard: The hard of this IoK8sApiCoreV1ResourceQuotaStatus.  # noqa: E501
        :type hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param used: The used of this IoK8sApiCoreV1ResourceQuotaStatus.  # noqa: E501
        :type used: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        self.swagger_types = {
            'hard': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'used': Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        }

        self.attribute_map = {
            'hard': 'hard',
            'used': 'used'
        }

        self._hard = hard
        self._used = used

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1ResourceQuotaStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.ResourceQuotaStatus of this IoK8sApiCoreV1ResourceQuotaStatus.  # noqa: E501
        :rtype: IoK8sApiCoreV1ResourceQuotaStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hard(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the hard of this IoK8sApiCoreV1ResourceQuotaStatus.

        Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/  # noqa: E501

        :return: The hard of this IoK8sApiCoreV1ResourceQuotaStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._hard

    @hard.setter
    def hard(self, hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the hard of this IoK8sApiCoreV1ResourceQuotaStatus.

        Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/  # noqa: E501

        :param hard: The hard of this IoK8sApiCoreV1ResourceQuotaStatus.
        :type hard: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._hard = hard

    @property
    def used(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the used of this IoK8sApiCoreV1ResourceQuotaStatus.

        Used is the current observed total usage of the resource in the namespace.  # noqa: E501

        :return: The used of this IoK8sApiCoreV1ResourceQuotaStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._used

    @used.setter
    def used(self, used: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the used of this IoK8sApiCoreV1ResourceQuotaStatus.

        Used is the current observed total usage of the resource in the namespace.  # noqa: E501

        :param used: The used of this IoK8sApiCoreV1ResourceQuotaStatus.
        :type used: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._used = used
