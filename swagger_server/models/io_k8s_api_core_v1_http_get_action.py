# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1HTTPGetAction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, http_headers: List[IoK8sApiCoreV1HTTPHeader]=None, path: str=None, port: IoK8sApimachineryPkgUtilIntstrIntOrString=None, scheme: str=None):  # noqa: E501
        """IoK8sApiCoreV1HTTPGetAction - a model defined in Swagger

        :param host: The host of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :type host: str
        :param http_headers: The http_headers of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :type http_headers: List[IoK8sApiCoreV1HTTPHeader]
        :param path: The path of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :type path: str
        :param port: The port of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :type port: IoK8sApimachineryPkgUtilIntstrIntOrString
        :param scheme: The scheme of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :type scheme: str
        """
        self.swagger_types = {
            'host': str,
            'http_headers': List[IoK8sApiCoreV1HTTPHeader],
            'path': str,
            'port': IoK8sApimachineryPkgUtilIntstrIntOrString,
            'scheme': str
        }

        self.attribute_map = {
            'host': 'host',
            'http_headers': 'httpHeaders',
            'path': 'path',
            'port': 'port',
            'scheme': 'scheme'
        }

        self._host = host
        self._http_headers = http_headers
        self._path = path
        self._port = port
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1HTTPGetAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.HTTPGetAction of this IoK8sApiCoreV1HTTPGetAction.  # noqa: E501
        :rtype: IoK8sApiCoreV1HTTPGetAction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self) -> str:
        """Gets the host of this IoK8sApiCoreV1HTTPGetAction.

        Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.  # noqa: E501

        :return: The host of this IoK8sApiCoreV1HTTPGetAction.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this IoK8sApiCoreV1HTTPGetAction.

        Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.  # noqa: E501

        :param host: The host of this IoK8sApiCoreV1HTTPGetAction.
        :type host: str
        """

        self._host = host

    @property
    def http_headers(self) -> List[IoK8sApiCoreV1HTTPHeader]:
        """Gets the http_headers of this IoK8sApiCoreV1HTTPGetAction.

        Custom headers to set in the request. HTTP allows repeated headers.  # noqa: E501

        :return: The http_headers of this IoK8sApiCoreV1HTTPGetAction.
        :rtype: List[IoK8sApiCoreV1HTTPHeader]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers: List[IoK8sApiCoreV1HTTPHeader]):
        """Sets the http_headers of this IoK8sApiCoreV1HTTPGetAction.

        Custom headers to set in the request. HTTP allows repeated headers.  # noqa: E501

        :param http_headers: The http_headers of this IoK8sApiCoreV1HTTPGetAction.
        :type http_headers: List[IoK8sApiCoreV1HTTPHeader]
        """

        self._http_headers = http_headers

    @property
    def path(self) -> str:
        """Gets the path of this IoK8sApiCoreV1HTTPGetAction.

        Path to access on the HTTP server.  # noqa: E501

        :return: The path of this IoK8sApiCoreV1HTTPGetAction.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this IoK8sApiCoreV1HTTPGetAction.

        Path to access on the HTTP server.  # noqa: E501

        :param path: The path of this IoK8sApiCoreV1HTTPGetAction.
        :type path: str
        """

        self._path = path

    @property
    def port(self) -> IoK8sApimachineryPkgUtilIntstrIntOrString:
        """Gets the port of this IoK8sApiCoreV1HTTPGetAction.

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.  # noqa: E501

        :return: The port of this IoK8sApiCoreV1HTTPGetAction.
        :rtype: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        return self._port

    @port.setter
    def port(self, port: IoK8sApimachineryPkgUtilIntstrIntOrString):
        """Sets the port of this IoK8sApiCoreV1HTTPGetAction.

        Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.  # noqa: E501

        :param port: The port of this IoK8sApiCoreV1HTTPGetAction.
        :type port: IoK8sApimachineryPkgUtilIntstrIntOrString
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def scheme(self) -> str:
        """Gets the scheme of this IoK8sApiCoreV1HTTPGetAction.

        Scheme to use for connecting to the host. Defaults to HTTP.  # noqa: E501

        :return: The scheme of this IoK8sApiCoreV1HTTPGetAction.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme: str):
        """Sets the scheme of this IoK8sApiCoreV1HTTPGetAction.

        Scheme to use for connecting to the host. Defaults to HTTP.  # noqa: E501

        :param scheme: The scheme of this IoK8sApiCoreV1HTTPGetAction.
        :type scheme: str
        """

        self._scheme = scheme
