# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _from: List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]=None, ports: List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]=None):  # noqa: E501
        """IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule - a model defined in Swagger

        :param _from: The _from of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.  # noqa: E501
        :type _from: List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]
        :param ports: The ports of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.  # noqa: E501
        :type ports: List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]
        """
        self.swagger_types = {
            '_from': List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer],
            'ports': List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]
        }

        self.attribute_map = {
            '_from': 'from',
            'ports': 'ports'
        }

        self.__from = _from
        self._ports = ports

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.extensions.v1beta1.NetworkPolicyIngressRule of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.  # noqa: E501
        :rtype: IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self) -> List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]:
        """Gets the _from of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.

        List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.  # noqa: E501

        :return: The _from of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.
        :rtype: List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]
        """
        return self.__from

    @_from.setter
    def _from(self, _from: List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]):
        """Sets the _from of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.

        List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.  # noqa: E501

        :param _from: The _from of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.
        :type _from: List[IoK8sApiExtensionsV1beta1NetworkPolicyPeer]
        """

        self.__from = _from

    @property
    def ports(self) -> List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]:
        """Gets the ports of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.

        List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.  # noqa: E501

        :return: The ports of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.
        :rtype: List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]):
        """Sets the ports of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.

        List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.  # noqa: E501

        :param ports: The ports of this IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule.
        :type ports: List[IoK8sApiExtensionsV1beta1NetworkPolicyPort]
        """

        self._ports = ports
