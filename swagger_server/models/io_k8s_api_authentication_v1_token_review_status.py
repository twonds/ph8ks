# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAuthenticationV1TokenReviewStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, audiences: List[str]=None, authenticated: bool=None, error: str=None, user: IoK8sApiAuthenticationV1UserInfo=None):  # noqa: E501
        """IoK8sApiAuthenticationV1TokenReviewStatus - a model defined in Swagger

        :param audiences: The audiences of this IoK8sApiAuthenticationV1TokenReviewStatus.  # noqa: E501
        :type audiences: List[str]
        :param authenticated: The authenticated of this IoK8sApiAuthenticationV1TokenReviewStatus.  # noqa: E501
        :type authenticated: bool
        :param error: The error of this IoK8sApiAuthenticationV1TokenReviewStatus.  # noqa: E501
        :type error: str
        :param user: The user of this IoK8sApiAuthenticationV1TokenReviewStatus.  # noqa: E501
        :type user: IoK8sApiAuthenticationV1UserInfo
        """
        self.swagger_types = {
            'audiences': List[str],
            'authenticated': bool,
            'error': str,
            'user': IoK8sApiAuthenticationV1UserInfo
        }

        self.attribute_map = {
            'audiences': 'audiences',
            'authenticated': 'authenticated',
            'error': 'error',
            'user': 'user'
        }

        self._audiences = audiences
        self._authenticated = authenticated
        self._error = error
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAuthenticationV1TokenReviewStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.authentication.v1.TokenReviewStatus of this IoK8sApiAuthenticationV1TokenReviewStatus.  # noqa: E501
        :rtype: IoK8sApiAuthenticationV1TokenReviewStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audiences(self) -> List[str]:
        """Gets the audiences of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.  # noqa: E501

        :return: The audiences of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :rtype: List[str]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences: List[str]):
        """Sets the audiences of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.  # noqa: E501

        :param audiences: The audiences of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :type audiences: List[str]
        """

        self._audiences = audiences

    @property
    def authenticated(self) -> bool:
        """Gets the authenticated of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Authenticated indicates that the token was associated with a known user.  # noqa: E501

        :return: The authenticated of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated: bool):
        """Sets the authenticated of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Authenticated indicates that the token was associated with a known user.  # noqa: E501

        :param authenticated: The authenticated of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :type authenticated: bool
        """

        self._authenticated = authenticated

    @property
    def error(self) -> str:
        """Gets the error of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Error indicates that the token couldn't be checked  # noqa: E501

        :return: The error of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this IoK8sApiAuthenticationV1TokenReviewStatus.

        Error indicates that the token couldn't be checked  # noqa: E501

        :param error: The error of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :type error: str
        """

        self._error = error

    @property
    def user(self) -> IoK8sApiAuthenticationV1UserInfo:
        """Gets the user of this IoK8sApiAuthenticationV1TokenReviewStatus.

        User is the UserInfo associated with the provided token.  # noqa: E501

        :return: The user of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :rtype: IoK8sApiAuthenticationV1UserInfo
        """
        return self._user

    @user.setter
    def user(self, user: IoK8sApiAuthenticationV1UserInfo):
        """Sets the user of this IoK8sApiAuthenticationV1TokenReviewStatus.

        User is the UserInfo associated with the provided token.  # noqa: E501

        :param user: The user of this IoK8sApiAuthenticationV1TokenReviewStatus.
        :type user: IoK8sApiAuthenticationV1UserInfo
        """

        self._user = user
