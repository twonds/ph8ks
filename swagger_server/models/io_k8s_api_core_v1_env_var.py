# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1EnvVar(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None, value_from: IoK8sApiCoreV1EnvVarSource=None):  # noqa: E501
        """IoK8sApiCoreV1EnvVar - a model defined in Swagger

        :param name: The name of this IoK8sApiCoreV1EnvVar.  # noqa: E501
        :type name: str
        :param value: The value of this IoK8sApiCoreV1EnvVar.  # noqa: E501
        :type value: str
        :param value_from: The value_from of this IoK8sApiCoreV1EnvVar.  # noqa: E501
        :type value_from: IoK8sApiCoreV1EnvVarSource
        """
        self.swagger_types = {
            'name': str,
            'value': str,
            'value_from': IoK8sApiCoreV1EnvVarSource
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'value_from': 'valueFrom'
        }

        self._name = name
        self._value = value
        self._value_from = value_from

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1EnvVar':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.EnvVar of this IoK8sApiCoreV1EnvVar.  # noqa: E501
        :rtype: IoK8sApiCoreV1EnvVar
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this IoK8sApiCoreV1EnvVar.

        Name of the environment variable. Must be a C_IDENTIFIER.  # noqa: E501

        :return: The name of this IoK8sApiCoreV1EnvVar.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IoK8sApiCoreV1EnvVar.

        Name of the environment variable. Must be a C_IDENTIFIER.  # noqa: E501

        :param name: The name of this IoK8sApiCoreV1EnvVar.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> str:
        """Gets the value of this IoK8sApiCoreV1EnvVar.

        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".  # noqa: E501

        :return: The value of this IoK8sApiCoreV1EnvVar.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this IoK8sApiCoreV1EnvVar.

        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".  # noqa: E501

        :param value: The value of this IoK8sApiCoreV1EnvVar.
        :type value: str
        """

        self._value = value

    @property
    def value_from(self) -> IoK8sApiCoreV1EnvVarSource:
        """Gets the value_from of this IoK8sApiCoreV1EnvVar.

        Source for the environment variable's value. Cannot be used if value is not empty.  # noqa: E501

        :return: The value_from of this IoK8sApiCoreV1EnvVar.
        :rtype: IoK8sApiCoreV1EnvVarSource
        """
        return self._value_from

    @value_from.setter
    def value_from(self, value_from: IoK8sApiCoreV1EnvVarSource):
        """Sets the value_from of this IoK8sApiCoreV1EnvVar.

        Source for the environment variable's value. Cannot be used if value is not empty.  # noqa: E501

        :param value_from: The value_from of this IoK8sApiCoreV1EnvVar.
        :type value_from: IoK8sApiCoreV1EnvVarSource
        """

        self._value_from = value_from
