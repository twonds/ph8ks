# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, accepted_names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames=None, conditions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]=None, stored_versions: List[str]=None):  # noqa: E501
        """IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus - a model defined in Swagger

        :param accepted_names: The accepted_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.  # noqa: E501
        :type accepted_names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        :param conditions: The conditions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.  # noqa: E501
        :type conditions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]
        :param stored_versions: The stored_versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.  # noqa: E501
        :type stored_versions: List[str]
        """
        self.swagger_types = {
            'accepted_names': IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames,
            'conditions': List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition],
            'stored_versions': List[str]
        }

        self.attribute_map = {
            'accepted_names': 'acceptedNames',
            'conditions': 'conditions',
            'stored_versions': 'storedVersions'
        }

        self._accepted_names = accepted_names
        self._conditions = conditions
        self._stored_versions = stored_versions

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.  # noqa: E501
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_names(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames:
        """Gets the accepted_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.  # noqa: E501

        :return: The accepted_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        """
        return self._accepted_names

    @accepted_names.setter
    def accepted_names(self, accepted_names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames):
        """Sets the accepted_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.  # noqa: E501

        :param accepted_names: The accepted_names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :type accepted_names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
        """
        if accepted_names is None:
            raise ValueError("Invalid value for `accepted_names`, must not be `None`")  # noqa: E501

        self._accepted_names = accepted_names

    @property
    def conditions(self) -> List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]:
        """Gets the conditions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        conditions indicate state for particular aspects of a CustomResourceDefinition  # noqa: E501

        :return: The conditions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :rtype: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]):
        """Sets the conditions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        conditions indicate state for particular aspects of a CustomResourceDefinition  # noqa: E501

        :param conditions: The conditions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :type conditions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition]
        """

        self._conditions = conditions

    @property
    def stored_versions(self) -> List[str]:
        """Gets the stored_versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.  # noqa: E501

        :return: The stored_versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :rtype: List[str]
        """
        return self._stored_versions

    @stored_versions.setter
    def stored_versions(self, stored_versions: List[str]):
        """Sets the stored_versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.

        storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.  # noqa: E501

        :param stored_versions: The stored_versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus.
        :type stored_versions: List[str]
        """
        if stored_versions is None:
            raise ValueError("Invalid value for `stored_versions`, must not be `None`")  # noqa: E501

        self._stored_versions = stored_versions
