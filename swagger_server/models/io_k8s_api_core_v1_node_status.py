# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiCoreV1NodeStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[IoK8sApiCoreV1NodeAddress]=None, allocatable: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]=None, conditions: List[IoK8sApiCoreV1NodeCondition]=None, config: IoK8sApiCoreV1NodeConfigStatus=None, daemon_endpoints: IoK8sApiCoreV1NodeDaemonEndpoints=None, images: List[IoK8sApiCoreV1ContainerImage]=None, node_info: IoK8sApiCoreV1NodeSystemInfo=None, phase: str=None, volumes_attached: List[IoK8sApiCoreV1AttachedVolume]=None, volumes_in_use: List[str]=None):  # noqa: E501
        """IoK8sApiCoreV1NodeStatus - a model defined in Swagger

        :param addresses: The addresses of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type addresses: List[IoK8sApiCoreV1NodeAddress]
        :param allocatable: The allocatable of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type allocatable: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param capacity: The capacity of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        :param conditions: The conditions of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type conditions: List[IoK8sApiCoreV1NodeCondition]
        :param config: The config of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type config: IoK8sApiCoreV1NodeConfigStatus
        :param daemon_endpoints: The daemon_endpoints of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type daemon_endpoints: IoK8sApiCoreV1NodeDaemonEndpoints
        :param images: The images of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type images: List[IoK8sApiCoreV1ContainerImage]
        :param node_info: The node_info of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type node_info: IoK8sApiCoreV1NodeSystemInfo
        :param phase: The phase of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type phase: str
        :param volumes_attached: The volumes_attached of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type volumes_attached: List[IoK8sApiCoreV1AttachedVolume]
        :param volumes_in_use: The volumes_in_use of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :type volumes_in_use: List[str]
        """
        self.swagger_types = {
            'addresses': List[IoK8sApiCoreV1NodeAddress],
            'allocatable': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'capacity': Dict[str, IoK8sApimachineryPkgApiResourceQuantity],
            'conditions': List[IoK8sApiCoreV1NodeCondition],
            'config': IoK8sApiCoreV1NodeConfigStatus,
            'daemon_endpoints': IoK8sApiCoreV1NodeDaemonEndpoints,
            'images': List[IoK8sApiCoreV1ContainerImage],
            'node_info': IoK8sApiCoreV1NodeSystemInfo,
            'phase': str,
            'volumes_attached': List[IoK8sApiCoreV1AttachedVolume],
            'volumes_in_use': List[str]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'allocatable': 'allocatable',
            'capacity': 'capacity',
            'conditions': 'conditions',
            'config': 'config',
            'daemon_endpoints': 'daemonEndpoints',
            'images': 'images',
            'node_info': 'nodeInfo',
            'phase': 'phase',
            'volumes_attached': 'volumesAttached',
            'volumes_in_use': 'volumesInUse'
        }

        self._addresses = addresses
        self._allocatable = allocatable
        self._capacity = capacity
        self._conditions = conditions
        self._config = config
        self._daemon_endpoints = daemon_endpoints
        self._images = images
        self._node_info = node_info
        self._phase = phase
        self._volumes_attached = volumes_attached
        self._volumes_in_use = volumes_in_use

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiCoreV1NodeStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.core.v1.NodeStatus of this IoK8sApiCoreV1NodeStatus.  # noqa: E501
        :rtype: IoK8sApiCoreV1NodeStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self) -> List[IoK8sApiCoreV1NodeAddress]:
        """Gets the addresses of this IoK8sApiCoreV1NodeStatus.

        List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.  # noqa: E501

        :return: The addresses of this IoK8sApiCoreV1NodeStatus.
        :rtype: List[IoK8sApiCoreV1NodeAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses: List[IoK8sApiCoreV1NodeAddress]):
        """Sets the addresses of this IoK8sApiCoreV1NodeStatus.

        List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.  # noqa: E501

        :param addresses: The addresses of this IoK8sApiCoreV1NodeStatus.
        :type addresses: List[IoK8sApiCoreV1NodeAddress]
        """

        self._addresses = addresses

    @property
    def allocatable(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the allocatable of this IoK8sApiCoreV1NodeStatus.

        Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.  # noqa: E501

        :return: The allocatable of this IoK8sApiCoreV1NodeStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._allocatable

    @allocatable.setter
    def allocatable(self, allocatable: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the allocatable of this IoK8sApiCoreV1NodeStatus.

        Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.  # noqa: E501

        :param allocatable: The allocatable of this IoK8sApiCoreV1NodeStatus.
        :type allocatable: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._allocatable = allocatable

    @property
    def capacity(self) -> Dict[str, IoK8sApimachineryPkgApiResourceQuantity]:
        """Gets the capacity of this IoK8sApiCoreV1NodeStatus.

        Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :return: The capacity of this IoK8sApiCoreV1NodeStatus.
        :rtype: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]):
        """Sets the capacity of this IoK8sApiCoreV1NodeStatus.

        Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity  # noqa: E501

        :param capacity: The capacity of this IoK8sApiCoreV1NodeStatus.
        :type capacity: Dict[str, IoK8sApimachineryPkgApiResourceQuantity]
        """

        self._capacity = capacity

    @property
    def conditions(self) -> List[IoK8sApiCoreV1NodeCondition]:
        """Gets the conditions of this IoK8sApiCoreV1NodeStatus.

        Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition  # noqa: E501

        :return: The conditions of this IoK8sApiCoreV1NodeStatus.
        :rtype: List[IoK8sApiCoreV1NodeCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: List[IoK8sApiCoreV1NodeCondition]):
        """Sets the conditions of this IoK8sApiCoreV1NodeStatus.

        Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition  # noqa: E501

        :param conditions: The conditions of this IoK8sApiCoreV1NodeStatus.
        :type conditions: List[IoK8sApiCoreV1NodeCondition]
        """

        self._conditions = conditions

    @property
    def config(self) -> IoK8sApiCoreV1NodeConfigStatus:
        """Gets the config of this IoK8sApiCoreV1NodeStatus.

        Status of the config assigned to the node via the dynamic Kubelet config feature.  # noqa: E501

        :return: The config of this IoK8sApiCoreV1NodeStatus.
        :rtype: IoK8sApiCoreV1NodeConfigStatus
        """
        return self._config

    @config.setter
    def config(self, config: IoK8sApiCoreV1NodeConfigStatus):
        """Sets the config of this IoK8sApiCoreV1NodeStatus.

        Status of the config assigned to the node via the dynamic Kubelet config feature.  # noqa: E501

        :param config: The config of this IoK8sApiCoreV1NodeStatus.
        :type config: IoK8sApiCoreV1NodeConfigStatus
        """

        self._config = config

    @property
    def daemon_endpoints(self) -> IoK8sApiCoreV1NodeDaemonEndpoints:
        """Gets the daemon_endpoints of this IoK8sApiCoreV1NodeStatus.

        Endpoints of daemons running on the Node.  # noqa: E501

        :return: The daemon_endpoints of this IoK8sApiCoreV1NodeStatus.
        :rtype: IoK8sApiCoreV1NodeDaemonEndpoints
        """
        return self._daemon_endpoints

    @daemon_endpoints.setter
    def daemon_endpoints(self, daemon_endpoints: IoK8sApiCoreV1NodeDaemonEndpoints):
        """Sets the daemon_endpoints of this IoK8sApiCoreV1NodeStatus.

        Endpoints of daemons running on the Node.  # noqa: E501

        :param daemon_endpoints: The daemon_endpoints of this IoK8sApiCoreV1NodeStatus.
        :type daemon_endpoints: IoK8sApiCoreV1NodeDaemonEndpoints
        """

        self._daemon_endpoints = daemon_endpoints

    @property
    def images(self) -> List[IoK8sApiCoreV1ContainerImage]:
        """Gets the images of this IoK8sApiCoreV1NodeStatus.

        List of container images on this node  # noqa: E501

        :return: The images of this IoK8sApiCoreV1NodeStatus.
        :rtype: List[IoK8sApiCoreV1ContainerImage]
        """
        return self._images

    @images.setter
    def images(self, images: List[IoK8sApiCoreV1ContainerImage]):
        """Sets the images of this IoK8sApiCoreV1NodeStatus.

        List of container images on this node  # noqa: E501

        :param images: The images of this IoK8sApiCoreV1NodeStatus.
        :type images: List[IoK8sApiCoreV1ContainerImage]
        """

        self._images = images

    @property
    def node_info(self) -> IoK8sApiCoreV1NodeSystemInfo:
        """Gets the node_info of this IoK8sApiCoreV1NodeStatus.

        Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info  # noqa: E501

        :return: The node_info of this IoK8sApiCoreV1NodeStatus.
        :rtype: IoK8sApiCoreV1NodeSystemInfo
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info: IoK8sApiCoreV1NodeSystemInfo):
        """Sets the node_info of this IoK8sApiCoreV1NodeStatus.

        Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info  # noqa: E501

        :param node_info: The node_info of this IoK8sApiCoreV1NodeStatus.
        :type node_info: IoK8sApiCoreV1NodeSystemInfo
        """

        self._node_info = node_info

    @property
    def phase(self) -> str:
        """Gets the phase of this IoK8sApiCoreV1NodeStatus.

        NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.  # noqa: E501

        :return: The phase of this IoK8sApiCoreV1NodeStatus.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase: str):
        """Sets the phase of this IoK8sApiCoreV1NodeStatus.

        NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.  # noqa: E501

        :param phase: The phase of this IoK8sApiCoreV1NodeStatus.
        :type phase: str
        """

        self._phase = phase

    @property
    def volumes_attached(self) -> List[IoK8sApiCoreV1AttachedVolume]:
        """Gets the volumes_attached of this IoK8sApiCoreV1NodeStatus.

        List of volumes that are attached to the node.  # noqa: E501

        :return: The volumes_attached of this IoK8sApiCoreV1NodeStatus.
        :rtype: List[IoK8sApiCoreV1AttachedVolume]
        """
        return self._volumes_attached

    @volumes_attached.setter
    def volumes_attached(self, volumes_attached: List[IoK8sApiCoreV1AttachedVolume]):
        """Sets the volumes_attached of this IoK8sApiCoreV1NodeStatus.

        List of volumes that are attached to the node.  # noqa: E501

        :param volumes_attached: The volumes_attached of this IoK8sApiCoreV1NodeStatus.
        :type volumes_attached: List[IoK8sApiCoreV1AttachedVolume]
        """

        self._volumes_attached = volumes_attached

    @property
    def volumes_in_use(self) -> List[str]:
        """Gets the volumes_in_use of this IoK8sApiCoreV1NodeStatus.

        List of attachable volumes in use (mounted) by the node.  # noqa: E501

        :return: The volumes_in_use of this IoK8sApiCoreV1NodeStatus.
        :rtype: List[str]
        """
        return self._volumes_in_use

    @volumes_in_use.setter
    def volumes_in_use(self, volumes_in_use: List[str]):
        """Sets the volumes_in_use of this IoK8sApiCoreV1NodeStatus.

        List of attachable volumes in use (mounted) by the node.  # noqa: E501

        :param volumes_in_use: The volumes_in_use of this IoK8sApiCoreV1NodeStatus.
        :type volumes_in_use: List[str]
        """

        self._volumes_in_use = volumes_in_use
