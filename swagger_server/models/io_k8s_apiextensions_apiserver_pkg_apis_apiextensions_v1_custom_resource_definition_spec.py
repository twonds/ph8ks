# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion=None, group: str=None, names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames=None, preserve_unknown_fields: bool=None, scope: str=None, versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]=None):  # noqa: E501
        """IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec - a model defined in Swagger

        :param conversion: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion
        :param group: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type group: str
        :param names: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
        :param preserve_unknown_fields: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type preserve_unknown_fields: bool
        :param scope: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type scope: str
        :param versions: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :type versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]
        """
        self.swagger_types = {
            'conversion': IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion,
            'group': str,
            'names': IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames,
            'preserve_unknown_fields': bool,
            'scope': str,
            'versions': List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]
        }

        self.attribute_map = {
            'conversion': 'conversion',
            'group': 'group',
            'names': 'names',
            'preserve_unknown_fields': 'preserveUnknownFields',
            'scope': 'scope',
            'versions': 'versions'
        }

        self._conversion = conversion
        self._group = group
        self._names = names
        self._preserve_unknown_fields = preserve_unknown_fields
        self._scope = scope
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.  # noqa: E501
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversion(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion:
        """Gets the conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        conversion defines conversion settings for the CRD.  # noqa: E501

        :return: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion
        """
        return self._conversion

    @conversion.setter
    def conversion(self, conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion):
        """Sets the conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        conversion defines conversion settings for the CRD.  # noqa: E501

        :param conversion: The conversion of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type conversion: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion
        """

        self._conversion = conversion

    @property
    def group(self) -> str:
        """Gets the group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :return: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """Sets the group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).  # noqa: E501

        :param group: The group of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def names(self) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames:
        """Gets the names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        names specify the resource and kind names for the custom resource.  # noqa: E501

        :return: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
        """
        return self._names

    @names.setter
    def names(self, names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames):
        """Sets the names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        names specify the resource and kind names for the custom resource.  # noqa: E501

        :param names: The names of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
        """
        if names is None:
            raise ValueError("Invalid value for `names`, must not be `None`")  # noqa: E501

        self._names = names

    @property
    def preserve_unknown_fields(self) -> bool:
        """Gets the preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :return: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: bool
        """
        return self._preserve_unknown_fields

    @preserve_unknown_fields.setter
    def preserve_unknown_fields(self, preserve_unknown_fields: bool):
        """Sets the preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.  # noqa: E501

        :param preserve_unknown_fields: The preserve_unknown_fields of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type preserve_unknown_fields: bool
        """

        self._preserve_unknown_fields = preserve_unknown_fields

    @property
    def scope(self) -> str:
        """Gets the scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.  # noqa: E501

        :return: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.  # noqa: E501

        :param scope: The scope of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def versions(self) -> List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]:
        """Gets the versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :return: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :rtype: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]):
        """Sets the versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.

        versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.  # noqa: E501

        :param versions: The versions of this IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec.
        :type versions: List[IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions
