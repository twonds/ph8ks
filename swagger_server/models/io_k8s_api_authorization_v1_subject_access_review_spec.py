# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IoK8sApiAuthorizationV1SubjectAccessReviewSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, extra: Dict[str, List[str]]=None, groups: List[str]=None, non_resource_attributes: IoK8sApiAuthorizationV1NonResourceAttributes=None, resource_attributes: IoK8sApiAuthorizationV1ResourceAttributes=None, uid: str=None, user: str=None):  # noqa: E501
        """IoK8sApiAuthorizationV1SubjectAccessReviewSpec - a model defined in Swagger

        :param extra: The extra of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type extra: Dict[str, List[str]]
        :param groups: The groups of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type groups: List[str]
        :param non_resource_attributes: The non_resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type non_resource_attributes: IoK8sApiAuthorizationV1NonResourceAttributes
        :param resource_attributes: The resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type resource_attributes: IoK8sApiAuthorizationV1ResourceAttributes
        :param uid: The uid of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type uid: str
        :param user: The user of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :type user: str
        """
        self.swagger_types = {
            'extra': Dict[str, List[str]],
            'groups': List[str],
            'non_resource_attributes': IoK8sApiAuthorizationV1NonResourceAttributes,
            'resource_attributes': IoK8sApiAuthorizationV1ResourceAttributes,
            'uid': str,
            'user': str
        }

        self.attribute_map = {
            'extra': 'extra',
            'groups': 'groups',
            'non_resource_attributes': 'nonResourceAttributes',
            'resource_attributes': 'resourceAttributes',
            'uid': 'uid',
            'user': 'user'
        }

        self._extra = extra
        self._groups = groups
        self._non_resource_attributes = non_resource_attributes
        self._resource_attributes = resource_attributes
        self._uid = uid
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'IoK8sApiAuthorizationV1SubjectAccessReviewSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The io.k8s.api.authorization.v1.SubjectAccessReviewSpec of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.  # noqa: E501
        :rtype: IoK8sApiAuthorizationV1SubjectAccessReviewSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extra(self) -> Dict[str, List[str]]:
        """Gets the extra of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.  # noqa: E501

        :return: The extra of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: Dict[str, List[str]]
        """
        return self._extra

    @extra.setter
    def extra(self, extra: Dict[str, List[str]]):
        """Sets the extra of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.  # noqa: E501

        :param extra: The extra of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type extra: Dict[str, List[str]]
        """

        self._extra = extra

    @property
    def groups(self) -> List[str]:
        """Gets the groups of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        Groups is the groups you're testing for.  # noqa: E501

        :return: The groups of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[str]):
        """Sets the groups of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        Groups is the groups you're testing for.  # noqa: E501

        :param groups: The groups of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def non_resource_attributes(self) -> IoK8sApiAuthorizationV1NonResourceAttributes:
        """Gets the non_resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        NonResourceAttributes describes information for a non-resource access request  # noqa: E501

        :return: The non_resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: IoK8sApiAuthorizationV1NonResourceAttributes
        """
        return self._non_resource_attributes

    @non_resource_attributes.setter
    def non_resource_attributes(self, non_resource_attributes: IoK8sApiAuthorizationV1NonResourceAttributes):
        """Sets the non_resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        NonResourceAttributes describes information for a non-resource access request  # noqa: E501

        :param non_resource_attributes: The non_resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type non_resource_attributes: IoK8sApiAuthorizationV1NonResourceAttributes
        """

        self._non_resource_attributes = non_resource_attributes

    @property
    def resource_attributes(self) -> IoK8sApiAuthorizationV1ResourceAttributes:
        """Gets the resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        ResourceAuthorizationAttributes describes information for a resource access request  # noqa: E501

        :return: The resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: IoK8sApiAuthorizationV1ResourceAttributes
        """
        return self._resource_attributes

    @resource_attributes.setter
    def resource_attributes(self, resource_attributes: IoK8sApiAuthorizationV1ResourceAttributes):
        """Sets the resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        ResourceAuthorizationAttributes describes information for a resource access request  # noqa: E501

        :param resource_attributes: The resource_attributes of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type resource_attributes: IoK8sApiAuthorizationV1ResourceAttributes
        """

        self._resource_attributes = resource_attributes

    @property
    def uid(self) -> str:
        """Gets the uid of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        UID information about the requesting user.  # noqa: E501

        :return: The uid of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        UID information about the requesting user.  # noqa: E501

        :param uid: The uid of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type uid: str
        """

        self._uid = uid

    @property
    def user(self) -> str:
        """Gets the user of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups  # noqa: E501

        :return: The user of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.

        User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups  # noqa: E501

        :param user: The user of this IoK8sApiAuthorizationV1SubjectAccessReviewSpec.
        :type user: str
        """

        self._user = user
